================ PFT Run: Sun Aug 23 20:15:28 ================
  Running test 0 to end
  Running in fork mode with timeout enabled
==============================================================
\nResults of failed tests:\n\n
Test   7 (pct_5w) : FAILED.
    First line of code: {return test("%5%");}
    SEGFAULT

Test   8 (pct_5wlj) : FAILED.
    First line of code: {return test("%-5%");}
    SEGFAULT

Test   9 (pct_5wzp) : FAILED.
    First line of code: {return test("%05%");}
    SEGFAULT

Test  10 (pct_5wljzp) : FAILED.
    First line of code: {return test("%-05%");}
    SEGFAULT

Test  27 (c_nullterm_5wlj) : FAILED.
    First line of code: {return test("%-5c", '
      expected output : "    "
      your output     : "    "
      expected (nonprintable as hex) : "\x00    "
      actual   (nonprintable as hex) : "    \x00"

Test  44 (s_string_prec_default) : FAILED.
    First line of code: {return test("%.s", "hello");}
      expected output : ""
      your output     : "hello"
      expected (nonprintable as hex) : ""
      actual   (nonprintable as hex) : "hello"

Test  45 (s_string_prec_zero) : FAILED.
    First line of code: {return test("%.0s", "hello");}
      expected output : ""
      your output     : "hello"
      expected (nonprintable as hex) : ""
      actual   (nonprintable as hex) : "hello"

Test  82 (s_null_string_prec_default) : FAILED.
    First line of code: {return test("%.s", "NULL");}
      expected output : ""
      your output     : "NULL"
      expected (nonprintable as hex) : ""
      actual   (nonprintable as hex) : "NULL"

Test  83 (s_null_string_prec_zero) : FAILED.
    First line of code: {return test("%.0s", "NULL");}
      expected output : ""
      your output     : "NULL"
      expected (nonprintable as hex) : ""
      actual   (nonprintable as hex) : "NULL"

Test  87 (s_prec_no_width_s_hidden) : FAILED.
    First line of code: {return test("%.s", s_hidden);}
      expected output : ""
      your output     : "hi low"
      expected (nonprintable as hex) : ""
      actual   (nonprintable as hex) : "hi low"

Test  97 (s_prec_0_width_3_s_hidden) : FAILED.
    First line of code: {return test("%3.s", s_hidden);}
      expected output : "   "
      your output     : "hi low"
      expected (nonprintable as hex) : "   "
      actual   (nonprintable as hex) : "hi low"

Test  98 (s_prec_0_width_10_s_hidden) : FAILED.
    First line of code: {return test("%10.s", s_hidden);}
      expected output : "          "
      your output     : "    hi low"
      expected (nonprintable as hex) : "          "
      actual   (nonprintable as hex) : "    hi low"

Test  99 (s_prec_0_width_3_s_null) : FAILED.
    First line of code: {return test("%3.s", NULL);}
      expected output : "   "
      your output     : "(null)"
      expected (nonprintable as hex) : "   "
      actual   (nonprintable as hex) : "(null)"

Test 100 (s_prec_0_width_10_s_null) : FAILED.
    First line of code: {return test("%10.s", NULL);}
      expected output : "          "
      your output     : "    (null)"
      expected (nonprintable as hex) : "          "
      actual   (nonprintable as hex) : "    (null)"

Test 104 (s_prec_0_lj_width_3_s_hidden) : FAILED.
    First line of code: {return test("%-3.s", s_hidden);}
      expected output : "   "
      your output     : "hi low"
      expected (nonprintable as hex) : "   "
      actual   (nonprintable as hex) : "hi low"

Test 105 (s_prec_0_lj_width_8_s_hidden) : FAILED.
    First line of code: {return test("%-8.s", s_hidden);}
      expected output : "        "
      your output     : "hi low  "
      expected (nonprintable as hex) : "        "
      actual   (nonprintable as hex) : "hi low  "

Test 106 (s_prec_0_lj_width_3_s_null) : FAILED.
    First line of code: {return test("%-3.s", NULL);}
      expected output : "   "
      your output     : "(null)"
      expected (nonprintable as hex) : "   "
      actual   (nonprintable as hex) : "(null)"

Test 107 (s_prec_0_lj_width_8_s_null) : FAILED.
    First line of code: {return test("%-8.s", NULL);}
      expected output : "        "
      your output     : "(null)  "
      expected (nonprintable as hex) : "        "
      actual   (nonprintable as hex) : "(null)  "

Test 133 (s_prec_00_lj_s_hidden_trunc) : FAILED.
    First line of code: {return test("%-.00s", s_hidden);}
      expected output : ""
      your output     : "hi low"
      expected (nonprintable as hex) : ""
      actual   (nonprintable as hex) : "hi low"

Test 173 (p_null) : FAILED.
    First line of code: {return test("%p", NULL);}
      expected output : "0x0"
      your output     : "0"
      expected (nonprintable as hex) : "0x0"
      actual   (nonprintable as hex) : "0"

Test 178 (p_ftfc_5w_throwswarning) : FAILED.
    First line of code: {return test("%5p", 0);}
      expected output : "  0x0"
      your output     : "    0"
      expected (nonprintable as hex) : "  0x0"
      actual   (nonprintable as hex) : "    0"

Test 179 (p_basic) : FAILED.
    First line of code: {return test("%p%p%p%p%p%p%p%p%p%p%p%p",&a01,&a02,&a03,&a04,&a05,&a06,&a07,&a08,&a09,&a10,&a11,&a12);}
      expected output : "0x10334dc480x10334dc490x10334dc4a0x10334dc4c0x10334dc500x10334dc540x10334dc580x10334dc600x10334dc680x10334dc700x10334dc780x10334dc80"
      your output     : "10334dc4810334dc4910334dc4a10334dc4c10334dc5010334dc5410334dc5810334dc6010334dc6810334dc7010334dc7810334dc80"
      expected (nonprintable as hex) : "0x10334dc480x10334dc490x10334dc4a0x10334dc4c0x10334dc500x10334dc540x10334dc580x10334dc600x10334dc680x10334dc700x10334dc780x10334dc80"
      actual   (nonprintable as hex) : "10334dc4810334dc4910334dc4a10334dc4c10334dc5010334dc5410334dc5810334dc6010334dc6810334dc7010334dc7810334dc80"

Test 180 (p_width_fit) : FAILED.
    First line of code: {return test("%70p%70p%70p%70p%70p%70p%70p%70p%70p%70p%70p%70p",&a01,&a02,&a03,&a04,&a05,&a06,&a07,&a08,&a09,&a10,&a11,&a12);      expected output : "                                                           0x10334dc48                                                           0x10334dc49          "
      your output     : "                                                             10334dc48                                                             10334dc49          "
      expected (nonprintable as hex) : "                                                           0x10334dc48                                                           0x10334dc49          "
      actual   (nonprintable as hex) : "                                                             10334dc48                                                             10334dc49          "

Test 181 (p_width_nofit) : FAILED.
    First line of code: {return test("%5p%5p%5p%5p%5p%5p%5p%5p%5p%5p%5p%5p",&a01,&a02,&a03,&a04,&a05,&a06,&a07,&a08,&a09,&a10,&a11,&a12);}
      expected output : "0x10334dc480x10334dc490x10334dc4a0x10334dc4c0x10334dc500x10334dc540x10334dc580x10334dc600x10334dc680x10334dc700x10334dc780x10334dc80"
      your output     : "10334dc4810334dc4910334dc4a10334dc4c10334dc5010334dc5410334dc5810334dc6010334dc6810334dc7010334dc7810334dc80"
      expected (nonprintable as hex) : "0x10334dc480x10334dc490x10334dc4a0x10334dc4c0x10334dc500x10334dc540x10334dc580x10334dc600x10334dc680x10334dc700x10334dc780x10334dc80"
      actual   (nonprintable as hex) : "10334dc4810334dc4910334dc4a10334dc4c10334dc5010334dc5410334dc5810334dc6010334dc6810334dc7010334dc7810334dc80"

Test 182 (p_width_16) : FAILED.
    First line of code: {return test("%16p%16p%16p%16p%16p%16p%16p%16p%16p%16p%16p%16p",&a01,&a02,&a03,&a04,&a05,&a06,&a07,&a08,&a09,&a10,&a11,&a12);      expected output : "     0x10334dc48     0x10334dc49     0x10334dc4a     0x10334dc4c     0x10334dc50     0x10334dc54     0x10334dc58     0x10334dc60     0x10334dc68     0"
      your output     : "       10334dc48       10334dc49       10334dc4a       10334dc4c       10334dc50       10334dc54       10334dc58       10334dc60       10334dc68      "
      expected (nonprintable as hex) : "     0x10334dc48     0x10334dc49     0x10334dc4a     0x10334dc4c     0x10334dc50     0x10334dc54     0x10334dc58     0x10334dc60     0x10334dc68     0"
      actual   (nonprintable as hex) : "       10334dc48       10334dc49       10334dc4a       10334dc4c       10334dc50       10334dc54       10334dc58       10334dc60       10334dc68      "

Test 183 (p_width_8) : FAILED.
    First line of code: {return test("%8p%8p%8p%8p%8p%8p%8p%8p%8p%8p%8p%8p",&a01,&a02,&a03,&a04,&a05,&a06,&a07,&a08,&a09,&a10,&a11,&a12);}
      expected output : "0x10334dc480x10334dc490x10334dc4a0x10334dc4c0x10334dc500x10334dc540x10334dc580x10334dc600x10334dc680x10334dc700x10334dc780x10334dc80"
      your output     : "10334dc4810334dc4910334dc4a10334dc4c10334dc5010334dc5410334dc5810334dc6010334dc6810334dc7010334dc7810334dc80"
      expected (nonprintable as hex) : "0x10334dc480x10334dc490x10334dc4a0x10334dc4c0x10334dc500x10334dc540x10334dc580x10334dc600x10334dc680x10334dc700x10334dc780x10334dc80"
      actual   (nonprintable as hex) : "10334dc4810334dc4910334dc4a10334dc4c10334dc5010334dc5410334dc5810334dc6010334dc6810334dc7010334dc7810334dc80"

Test 184 (p_width_32) : FAILED.
    First line of code: {return test("%32p%32p%32p%32p%32p%32p%32p%32p%32p%32p%32p%32p",&a01,&a02,&a03,&a04,&a05,&a06,&a07,&a08,&a09,&a10,&a11,&a12);      expected output : "                     0x10334dc48                     0x10334dc49                     0x10334dc4a                     0x10334dc4c                     0"
      your output     : "                       10334dc48                       10334dc49                       10334dc4a                       10334dc4c                      "
      expected (nonprintable as hex) : "                     0x10334dc48                     0x10334dc49                     0x10334dc4a                     0x10334dc4c                     0"
      actual   (nonprintable as hex) : "                       10334dc48                       10334dc49                       10334dc4a                       10334dc4c                      "

Test 185 (p_width_fit_lj) : FAILED.
    First line of code: {return test("%-70p%-70p%-70p%-70p%-70p%-70p%-70p%-70p%-70p%-70p%-70p%-70p",&a01,&a02,&a03,&a04,&a05,&a06,&a07,&a08,&a09,&a10      expected output : "0x10334dc48                                                           0x10334dc49                                                           0x10334dc4"
      your output     : "10334dc48                                                             10334dc49                                                             10334dc4a "
      expected (nonprintable as hex) : "0x10334dc48                                                           0x10334dc49                                                           0x10334dc4"
      actual   (nonprintable as hex) : "10334dc48                                                             10334dc49                                                             10334dc4a "

Test 186 (p_width_nofit_lj) : FAILED.
    First line of code: {return test("%-5p%-5p%-5p%-5p%-5p%-5p%-5p%-5p%-5p%-5p%-5p%-5p",&a01,&a02,&a03,&a04,&a05,&a06,&a07,&a08,&a09,&a10,&a11,&a12);      expected output : "0x10334dc480x10334dc490x10334dc4a0x10334dc4c0x10334dc500x10334dc540x10334dc580x10334dc600x10334dc680x10334dc700x10334dc780x10334dc80"
      your output     : "10334dc4810334dc4910334dc4a10334dc4c10334dc5010334dc5410334dc5810334dc6010334dc6810334dc7010334dc7810334dc80"
      expected (nonprintable as hex) : "0x10334dc480x10334dc490x10334dc4a0x10334dc4c0x10334dc500x10334dc540x10334dc580x10334dc600x10334dc680x10334dc700x10334dc780x10334dc80"
      actual   (nonprintable as hex) : "10334dc4810334dc4910334dc4a10334dc4c10334dc5010334dc5410334dc5810334dc6010334dc6810334dc7010334dc7810334dc80"

Test 187 (p_width_16_lj) : FAILED.
    First line of code: {return test("%-16p%-16p%-16p%-16p%-16p%-16p%-16p%-16p%-16p%-16p%-16p%-16p",&a01,&a02,&a03,&a04,&a05,&a06,&a07,&a08,&a09,&a10      expected output : "0x10334dc48     0x10334dc49     0x10334dc4a     0x10334dc4c     0x10334dc50     0x10334dc54     0x10334dc58     0x10334dc60     0x10334dc68     0x1033"
      your output     : "10334dc48       10334dc49       10334dc4a       10334dc4c       10334dc50       10334dc54       10334dc58       10334dc60       10334dc68       10334d"
      expected (nonprintable as hex) : "0x10334dc48     0x10334dc49     0x10334dc4a     0x10334dc4c     0x10334dc50     0x10334dc54     0x10334dc58     0x10334dc60     0x10334dc68     0x1033"
      actual   (nonprintable as hex) : "10334dc48       10334dc49       10334dc4a       10334dc4c       10334dc50       10334dc54       10334dc58       10334dc60       10334dc68       10334d"

Test 188 (p_width_8_lj) : FAILED.
    First line of code: {return test("%-8p%-8p%-8p%-8p%-8p%-8p%-8p%-8p%-8p%-8p%-8p%-8p",&a01,&a02,&a03,&a04,&a05,&a06,&a07,&a08,&a09,&a10,&a11,&a12);      expected output : "0x10334dc480x10334dc490x10334dc4a0x10334dc4c0x10334dc500x10334dc540x10334dc580x10334dc600x10334dc680x10334dc700x10334dc780x10334dc80"
      your output     : "10334dc4810334dc4910334dc4a10334dc4c10334dc5010334dc5410334dc5810334dc6010334dc6810334dc7010334dc7810334dc80"
      expected (nonprintable as hex) : "0x10334dc480x10334dc490x10334dc4a0x10334dc4c0x10334dc500x10334dc540x10334dc580x10334dc600x10334dc680x10334dc700x10334dc780x10334dc80"
      actual   (nonprintable as hex) : "10334dc4810334dc4910334dc4a10334dc4c10334dc5010334dc5410334dc5810334dc6010334dc6810334dc7010334dc7810334dc80"

Test 189 (p_width_32_lj) : FAILED.
    First line of code: {return test("%-32p%-32p%-32p%-32p%-32p%-32p%-32p%-32p%-32p%-32p%-32p%-32p",&a01,&a02,&a03,&a04,&a05,&a06,&a07,&a08,&a09,&a10      expected output : "0x10334dc48                     0x10334dc49                     0x10334dc4a                     0x10334dc4c                     0x10334dc50           "
      your output     : "10334dc48                       10334dc49                       10334dc4a                       10334dc4c                       10334dc50             "
      expected (nonprintable as hex) : "0x10334dc48                     0x10334dc49                     0x10334dc4a                     0x10334dc4c                     0x10334dc50           "
      actual   (nonprintable as hex) : "10334dc48                       10334dc49                       10334dc4a                       10334dc4c                       10334dc50             "

Test 479 (new2019_star_1) : FAILED.
    First line of code: {return test("%*s", 32, "abc");}
    SEGFAULT

Test 480 (new2019_star_2) : FAILED.
    First line of code: {return test("%-*s", 32, "abc");}
    SEGFAULT

Test 481 (new2019_star_3) : FAILED.
    First line of code: {return test("%*s", 3, "hello");}
    SEGFAULT

Test 482 (new2019_star_4) : FAILED.
    First line of code: {return test("%.*s", 3, "hello");}
    SEGFAULT

Test 483 (new2019_star_5) : FAILED.
    First line of code: {return test("%.*s", 0, "hello");}
    SEGFAULT

Test 484 (new2019_star_6) : FAILED.
    First line of code: {return test("%-*.*s", 7, 3, "yolo");}
    SEGFAULT

Test 485 (new2019_star_7) : FAILED.
    First line of code: {return test("%*i", 4, 94827);}
    SEGFAULT

Test 486 (new2019_star_8) : FAILED.
    First line of code: {return test("%*i", 14, 94827);}
    SEGFAULT

Test 487 (new2019_star_9) : FAILED.
    First line of code: {return test("%.*i", 6, -3);}
    SEGFAULT

Test 488 (new2019_star_10) : FAILED.
    First line of code: {return test("%0*i", 7, -54);}
    SEGFAULT

Test 489 (new2019_negstar_1) : FAILED.
    First line of code: {return test("%*s", -32, "abc");}
    SEGFAULT

Test 490 (new2019_negstar_2) : FAILED.
    First line of code: {return test("%-*s", -32, "abc");}
    SEGFAULT

Test 491 (new2019_negstar_3) : FAILED.
    First line of code: {return test("%*s", -3, "hello");}
    SEGFAULT

Test 492 (new2019_negstar_4) : FAILED.
    First line of code: {return test("%.*s", -3, "hello");}
    SEGFAULT

Test 493 (new2019_negstar_5) : FAILED.
    First line of code: {return test("%-*.*s", -7, -3, "yolo");}
    SEGFAULT

Test 494 (new2019_negstar_6) : FAILED.
    First line of code: {return test("%*i", -4, 94827);}
    SEGFAULT

Test 495 (new2019_negstar_7) : FAILED.
    First line of code: {return test("%*i", -14, 94827);}
    SEGFAULT

Test 496 (new2019_negstar_8) : FAILED.
    First line of code: {return test("%.*i", -6, -3);}
    SEGFAULT

Test 497 (new2019_negstar_9) : FAILED.
    First line of code: {return test("%0*i", -7, -54);}
    SEGFAULT

Test 594 (moul_mix_1) : FAILED.
    First line of code: {int r00 = 0; return test("Lalalala, %d%% des gens qui parlent à Ly adorent %s. Ou Presque. %p", 100, "Ly", &r00);}
      expected output : "Lalalala, 100% des gens qui parlent à Ly adorent Ly. Ou Presque. 0x7ffeec9985ac"
      your output     : "Lalalala, 100% des gens qui parlent à Ly adorent Ly. Ou Presque. 7ffeec9985ac"
      expected (nonprintable as hex) : "Lalalala, 100% des gens qui parlent \xc3\xa0 Ly adorent Ly. Ou Presque. 0x7ffeec9985ac"
      actual   (nonprintable as hex) : "Lalalala, 100% des gens qui parlent \xc3\xa0 Ly adorent Ly. Ou Presque. 7ffeec9985ac"

Test 646 (moul_star_1) : FAILED.
    First line of code: {return test("%%-*.3s LYDI == |%-*.3s|
", 5, "LYDI");}
    SEGFAULT

Test 647 (moul_star_2) : FAILED.
    First line of code: {return test("%% *.5i 42 == |% *.5i|
", 4, 42);}
    SEGFAULT

Test 648 (moul_star_3) : FAILED.
    First line of code: {return test("%%*i 42 == |%*i|
", 5, 42);}
    SEGFAULT

Test 649 (moul_star_4) : FAILED.
    First line of code: {return test("%%*i 42 == |%*i|
", 3, 42);}
    SEGFAULT

Test 650 (moul_star_5) : FAILED.
    First line of code: {return test("%%*i 42 == |%*i|
", 2, 42);}
    SEGFAULT

Test 651 (mix_test_0) : FAILED.
    First line of code: {return test(
      expected output : "  235    %    0x10333ceb0    eb    Hello, World!    42  "
      your output     : "  235    %    10333ceb0    eb    Hello, World!    42  "
      expected (nonprintable as hex) : "  235    %    0x10333ceb0    eb    Hello, World!    42  "
      actual   (nonprintable as hex) : "  235    %    10333ceb0    eb    Hello, World!    42  "

Test 652 (mix_test_1) : FAILED.
    First line of code: {return test(
      expected output : "  eb    G    EB    Hello, World!    235    0x10333ceb0  "
      your output     : "  eb    G    EB    Hello, World!    235    10333ceb0  "
      expected (nonprintable as hex) : "  eb    G    EB    Hello, World!    235    0x10333ceb0  "
      actual   (nonprintable as hex) : "  eb    G    EB    Hello, World!    235    10333ceb0  "

Test 653 (mix_test_2) : FAILED.
    First line of code: {return test(
      expected output : "  %    42    EB    0x10333ceb0    G    Hello, World!  "
      your output     : "  %    42    EB    10333ceb0    G    Hello, World!  "
      expected (nonprintable as hex) : "  %    42    EB    0x10333ceb0    G    Hello, World!  "
      actual   (nonprintable as hex) : "  %    42    EB    10333ceb0    G    Hello, World!  "

Test 656 (mix_test_5) : FAILED.
    First line of code: {return test(
      expected output : "  G    EB    42    %    Hello, World!    0x10333ceb0  "
      your output     : "  G    EB    42    %    Hello, World!    10333ceb0  "
      expected (nonprintable as hex) : "  G    EB    42    %    Hello, World!    0x10333ceb0  "
      actual   (nonprintable as hex) : "  G    EB    42    %    Hello, World!    10333ceb0  "

Test 657 (mix_test_6) : FAILED.
    First line of code: {return test(
      expected output : "  0x10333ceb0    eb    42    G    Hello, World!    235  "
      your output     : "  10333ceb0    eb    42    G    Hello, World!    235  "
      expected (nonprintable as hex) : "  0x10333ceb0    eb    42    G    Hello, World!    235  "
      actual   (nonprintable as hex) : "  10333ceb0    eb    42    G    Hello, World!    235  "

Test 659 (mix_test_8) : FAILED.
    First line of code: {return test(
      expected output : "  EB    0x10333ceb0    Hello, World!    %    235    eb  "
      your output     : "  EB    10333ceb0    Hello, World!    %    235    eb  "
      expected (nonprintable as hex) : "  EB    0x10333ceb0    Hello, World!    %    235    eb  "
      actual   (nonprintable as hex) : "  EB    10333ceb0    Hello, World!    %    235    eb  "

Test 661 (mix_test_10) : FAILED.
    First line of code: {return test(
      expected output : "  42    0x10333ceb0    EB    235    Hello, World!    eb  "
      your output     : "  42    10333ceb0    EB    235    Hello, World!    eb  "
      expected (nonprintable as hex) : "  42    0x10333ceb0    EB    235    Hello, World!    eb  "
      actual   (nonprintable as hex) : "  42    10333ceb0    EB    235    Hello, World!    eb  "

Test 662 (mix_test_11) : FAILED.
    First line of code: {return test(
      expected output : "  EB    G    0x10333ceb0    eb    42    235  "
      your output     : "  EB    G    10333ceb0    eb    42    235  "
      expected (nonprintable as hex) : "  EB    G    0x10333ceb0    eb    42    235  "
      actual   (nonprintable as hex) : "  EB    G    10333ceb0    eb    42    235  "

Test 665 (mix_test_14) : FAILED.
    First line of code: {return test(
      expected output : "  Hello, World!    0x10333ceb0    EB    G    42    eb  "
      your output     : "  Hello, World!    10333ceb0    EB    G    42    eb  "
      expected (nonprintable as hex) : "  Hello, World!    0x10333ceb0    EB    G    42    eb  "
      actual   (nonprintable as hex) : "  Hello, World!    10333ceb0    EB    G    42    eb  "

Test 666 (mix_test_15) : FAILED.
    First line of code: {return test(
      expected output : "  235    G    EB    eb    0x10333ceb0    Hello, World!  "
      your output     : "  235    G    EB    eb    10333ceb0    Hello, World!  "
      expected (nonprintable as hex) : "  235    G    EB    eb    0x10333ceb0    Hello, World!  "
      actual   (nonprintable as hex) : "  235    G    EB    eb    10333ceb0    Hello, World!  "

Test 669 (mix_test_18) : FAILED.
    First line of code: {return test(
      expected output : "  eb    Hello, World!    EB    %    0x10333ceb0    42  "
      your output     : "  eb    Hello, World!    EB    %    10333ceb0    42  "
      expected (nonprintable as hex) : "  eb    Hello, World!    EB    %    0x10333ceb0    42  "
      actual   (nonprintable as hex) : "  eb    Hello, World!    EB    %    10333ceb0    42  "

Test 670 (mix_test_19) : FAILED.
    First line of code: {return test(
      expected output : "  %    0x10333ceb0    42    G    eb    EB  "
      your output     : "  %    10333ceb0    42    G    eb    EB  "
      expected (nonprintable as hex) : "  %    0x10333ceb0    42    G    eb    EB  "
      actual   (nonprintable as hex) : "  %    10333ceb0    42    G    eb    EB  "

Test 671 (mix_test_20) : FAILED.
    First line of code: {return test(
      expected output : "  G    Hello, World!    %    235    0x10333ceb0    eb  "
      your output     : "  G    Hello, World!    %    235    10333ceb0    eb  "
      expected (nonprintable as hex) : "  G    Hello, World!    %    235    0x10333ceb0    eb  "
      actual   (nonprintable as hex) : "  G    Hello, World!    %    235    10333ceb0    eb  "

Test 672 (mix_test_21) : FAILED.
    First line of code: {return test(
      expected output : "  G    42    235    Hello, World!    0x10333ceb0    eb  "
      your output     : "  G    42    235    Hello, World!    10333ceb0    eb  "
      expected (nonprintable as hex) : "  G    42    235    Hello, World!    0x10333ceb0    eb  "
      actual   (nonprintable as hex) : "  G    42    235    Hello, World!    10333ceb0    eb  "

Test 674 (mix_test_23) : FAILED.
    First line of code: {return test(
      expected output : "  eb    G    EB    0x10333ceb0    Hello, World!    0x10333ceb0  "
      your output     : "  eb    G    EB    10333ceb0    Hello, World!    10333ceb0  "
      expected (nonprintable as hex) : "  eb    G    EB    0x10333ceb0    Hello, World!    0x10333ceb0  "
      actual   (nonprintable as hex) : "  eb    G    EB    10333ceb0    Hello, World!    10333ceb0  "

Test 675 (mix_test_24) : FAILED.
    First line of code: {return test(
      expected output : "  EB    %    42    Hello, World!    0x10333ceb0    eb  "
      your output     : "  EB    %    42    Hello, World!    10333ceb0    eb  "
      expected (nonprintable as hex) : "  EB    %    42    Hello, World!    0x10333ceb0    eb  "
      actual   (nonprintable as hex) : "  EB    %    42    Hello, World!    10333ceb0    eb  "

Test 676 (mix_test_25) : FAILED.
    First line of code: {return test(
      expected output : "  42    0x10333ceb0    eb    G    EB    0x10333ceb0  "
      your output     : "  42    10333ceb0    eb    G    EB    10333ceb0  "
      expected (nonprintable as hex) : "  42    0x10333ceb0    eb    G    EB    0x10333ceb0  "
      actual   (nonprintable as hex) : "  42    10333ceb0    eb    G    EB    10333ceb0  "

Test 677 (mix_test_26) : FAILED.
    First line of code: {return test(
      expected output : "  EB    G    42    235    eb    0x10333ceb0  "
      your output     : "  EB    G    42    235    eb    10333ceb0  "
      expected (nonprintable as hex) : "  EB    G    42    235    eb    0x10333ceb0  "
      actual   (nonprintable as hex) : "  EB    G    42    235    eb    10333ceb0  "

Test 678 (mix_test_27) : FAILED.
    First line of code: {return test(
      expected output : "  42    235    G    %    EB    0x10333ceb0  "
      your output     : "  42    235    G    %    EB    10333ceb0  "
      expected (nonprintable as hex) : "  42    235    G    %    EB    0x10333ceb0  "
      actual   (nonprintable as hex) : "  42    235    G    %    EB    10333ceb0  "

Test 679 (mix_test_28) : FAILED.
    First line of code: {return test(
      expected output : "  Hello, World!    42    G    0x10333ceb0    eb    235  "
      your output     : "  Hello, World!    42    G    10333ceb0    eb    235  "
      expected (nonprintable as hex) : "  Hello, World!    42    G    0x10333ceb0    eb    235  "
      actual   (nonprintable as hex) : "  Hello, World!    42    G    10333ceb0    eb    235  "

Test 680 (mix_test_29) : FAILED.
    First line of code: {return test(
      expected output : "  0x10333ceb0    %    eb    EB    42    G  "
      your output     : "  10333ceb0    %    eb    EB    42    G  "
      expected (nonprintable as hex) : "  0x10333ceb0    %    eb    EB    42    G  "
      actual   (nonprintable as hex) : "  10333ceb0    %    eb    EB    42    G  "

Test 681 (mix_test_30) : FAILED.
    First line of code: {return test(
      expected output : "  EB    42    Hello, World!    %    235    0x10333ceb0  "
      your output     : "  EB    42    Hello, World!    %    235    10333ceb0  "
      expected (nonprintable as hex) : "  EB    42    Hello, World!    %    235    0x10333ceb0  "
      actual   (nonprintable as hex) : "  EB    42    Hello, World!    %    235    10333ceb0  "

Test 682 (mix_test_31) : FAILED.
    First line of code: {return test(
      expected output : "  %    235    0x10333ceb0    42    EB    G  "
      your output     : "  %    235    10333ceb0    42    EB    G  "
      expected (nonprintable as hex) : "  %    235    0x10333ceb0    42    EB    G  "
      actual   (nonprintable as hex) : "  %    235    10333ceb0    42    EB    G  "

Test 683 (mix_test_32) : FAILED.
    First line of code: {return test(
      expected output : "  eb    EB    0x10333ceb0    Hello, World!    42    G  "
      your output     : "  eb    EB    10333ceb0    Hello, World!    42    G  "
      expected (nonprintable as hex) : "  eb    EB    0x10333ceb0    Hello, World!    42    G  "
      actual   (nonprintable as hex) : "  eb    EB    10333ceb0    Hello, World!    42    G  "

Test 684 (mix_test_33) : FAILED.
    First line of code: {return test(
      expected output : "  G    %    Hello, World!    EB    eb    0x10333ceb0  "
      your output     : "  G    %    Hello, World!    EB    eb    10333ceb0  "
      expected (nonprintable as hex) : "  G    %    Hello, World!    EB    eb    0x10333ceb0  "
      actual   (nonprintable as hex) : "  G    %    Hello, World!    EB    eb    10333ceb0  "

Test 685 (mix_test_34) : FAILED.
    First line of code: {return test(
      expected output : "  eb    EB    0x10333ceb0    Hello, World!    42    235  "
      your output     : "  eb    EB    10333ceb0    Hello, World!    42    235  "
      expected (nonprintable as hex) : "  eb    EB    0x10333ceb0    Hello, World!    42    235  "
      actual   (nonprintable as hex) : "  eb    EB    10333ceb0    Hello, World!    42    235  "

Test 686 (mix_test_35) : FAILED.
    First line of code: {return test(
      expected output : "  0x10333ceb0    235    Hello, World!    EB    G    0x10333ceb0  "
      your output     : "  10333ceb0    235    Hello, World!    EB    G    10333ceb0  "
      expected (nonprintable as hex) : "  0x10333ceb0    235    Hello, World!    EB    G    0x10333ceb0  "
      actual   (nonprintable as hex) : "  10333ceb0    235    Hello, World!    EB    G    10333ceb0  "

Test 687 (mix_test_36) : FAILED.
    First line of code: {return test(
      expected output : "  EB    Hello, World!    eb    0x10333ceb0    %    42  "
      your output     : "  EB    Hello, World!    eb    10333ceb0    %    42  "
      expected (nonprintable as hex) : "  EB    Hello, World!    eb    0x10333ceb0    %    42  "
      actual   (nonprintable as hex) : "  EB    Hello, World!    eb    10333ceb0    %    42  "

Test 688 (mix_test_37) : FAILED.
    First line of code: {return test(
      expected output : "  eb    Hello, World!    %    0x10333ceb0    42    G  "
      your output     : "  eb    Hello, World!    %    10333ceb0    42    G  "
      expected (nonprintable as hex) : "  eb    Hello, World!    %    0x10333ceb0    42    G  "
      actual   (nonprintable as hex) : "  eb    Hello, World!    %    10333ceb0    42    G  "

Test 690 (mix_test_39) : FAILED.
    First line of code: {return test(
      expected output : "  0x10333ceb0    42    eb    %    235    EB  "
      your output     : "  10333ceb0    42    eb    %    235    EB  "
      expected (nonprintable as hex) : "  0x10333ceb0    42    eb    %    235    EB  "
      actual   (nonprintable as hex) : "  10333ceb0    42    eb    %    235    EB  "

Test 691 (mix_test_40) : FAILED.
    First line of code: {return test(
      expected output : "  %    G    EB    0x10333ceb0    235    eb  "
      your output     : "  %    G    EB    10333ceb0    235    eb  "
      expected (nonprintable as hex) : "  %    G    EB    0x10333ceb0    235    eb  "
      actual   (nonprintable as hex) : "  %    G    EB    10333ceb0    235    eb  "

Test 692 (mix_test_41) : FAILED.
    First line of code: {return test(
      expected output : "  235    G    %    0x10333ceb0    42    Hello, World!  "
      your output     : "  235    G    %    10333ceb0    42    Hello, World!  "
      expected (nonprintable as hex) : "  235    G    %    0x10333ceb0    42    Hello, World!  "
      actual   (nonprintable as hex) : "  235    G    %    10333ceb0    42    Hello, World!  "

Test 694 (mix_test_43) : FAILED.
    First line of code: {return test(
      expected output : "  %    42    235    Hello, World!    EB    0x10333ceb0  "
      your output     : "  %    42    235    Hello, World!    EB    10333ceb0  "
      expected (nonprintable as hex) : "  %    42    235    Hello, World!    EB    0x10333ceb0  "
      actual   (nonprintable as hex) : "  %    42    235    Hello, World!    EB    10333ceb0  "

Test 695 (mix_test_44) : FAILED.
    First line of code: {return test(
      expected output : "  Hello, World!    G    EB    %    42    0x10333ceb0  "
      your output     : "  Hello, World!    G    EB    %    42    10333ceb0  "
      expected (nonprintable as hex) : "  Hello, World!    G    EB    %    42    0x10333ceb0  "
      actual   (nonprintable as hex) : "  Hello, World!    G    EB    %    42    10333ceb0  "

Test 697 (mix_test_46) : FAILED.
    First line of code: {return test(
      expected output : "  eb    235    Hello, World!    42    0x10333ceb0    0x10333ceb0  "
      your output     : "  eb    235    Hello, World!    42    10333ceb0    10333ceb0  "
      expected (nonprintable as hex) : "  eb    235    Hello, World!    42    0x10333ceb0    0x10333ceb0  "
      actual   (nonprintable as hex) : "  eb    235    Hello, World!    42    10333ceb0    10333ceb0  "

Test 698 (mix_test_47) : FAILED.
    First line of code: {return test(
      expected output : "  EB    42    Hello, World!    eb    235    0x10333ceb0  "
      your output     : "  EB    42    Hello, World!    eb    235    10333ceb0  "
      expected (nonprintable as hex) : "  EB    42    Hello, World!    eb    235    0x10333ceb0  "
      actual   (nonprintable as hex) : "  EB    42    Hello, World!    eb    235    10333ceb0  "

Test 699 (mix_test_48) : FAILED.
    First line of code: {return test(
      expected output : "  G    42    %    EB    0x10333ceb0    235  "
      your output     : "  G    42    %    EB    10333ceb0    235  "
      expected (nonprintable as hex) : "  G    42    %    EB    0x10333ceb0    235  "
      actual   (nonprintable as hex) : "  G    42    %    EB    10333ceb0    235  "

Test 701 (mix_test_50) : FAILED.
    First line of code: {return test(
      expected output : "  %    0x10333ceb0    EB    42    Hello, World!    eb  "
      your output     : "  %    10333ceb0    EB    42    Hello, World!    eb  "
      expected (nonprintable as hex) : "  %    0x10333ceb0    EB    42    Hello, World!    eb  "
      actual   (nonprintable as hex) : "  %    10333ceb0    EB    42    Hello, World!    eb  "

Test 702 (mix_test_51) : FAILED.
    First line of code: {return test(
      expected output : "  42    eb    0x10333ceb0    G    235    EB  "
      your output     : "  42    eb    10333ceb0    G    235    EB  "
      expected (nonprintable as hex) : "  42    eb    0x10333ceb0    G    235    EB  "
      actual   (nonprintable as hex) : "  42    eb    10333ceb0    G    235    EB  "

Test 704 (mix_test_53) : FAILED.
    First line of code: {return test(
      expected output : "  eb    G    235    EB    0x10333ceb0    0x10333ceb0  "
      your output     : "  eb    G    235    EB    10333ceb0    10333ceb0  "
      expected (nonprintable as hex) : "  eb    G    235    EB    0x10333ceb0    0x10333ceb0  "
      actual   (nonprintable as hex) : "  eb    G    235    EB    10333ceb0    10333ceb0  "

Test 705 (mix_test_54) : FAILED.
    First line of code: {return test(
      expected output : "  0x10333ceb0    235    G    Hello, World!    42    0x10333ceb0  "
      your output     : "  10333ceb0    235    G    Hello, World!    42    10333ceb0  "
      expected (nonprintable as hex) : "  0x10333ceb0    235    G    Hello, World!    42    0x10333ceb0  "
      actual   (nonprintable as hex) : "  10333ceb0    235    G    Hello, World!    42    10333ceb0  "

Test 706 (mix_test_55) : FAILED.
    First line of code: {return test(
      expected output : "  eb    0x10333ceb0    Hello, World!    235    %    G  "
      your output     : "  eb    10333ceb0    Hello, World!    235    %    G  "
      expected (nonprintable as hex) : "  eb    0x10333ceb0    Hello, World!    235    %    G  "
      actual   (nonprintable as hex) : "  eb    10333ceb0    Hello, World!    235    %    G  "

Test 707 (mix_test_56) : FAILED.
    First line of code: {return test(
      expected output : "  %    42    EB    0x10333ceb0    235    Hello, World!  "
      your output     : "  %    42    EB    10333ceb0    235    Hello, World!  "
      expected (nonprintable as hex) : "  %    42    EB    0x10333ceb0    235    Hello, World!  "
      actual   (nonprintable as hex) : "  %    42    EB    10333ceb0    235    Hello, World!  "

Test 709 (mix_test_58) : FAILED.
    First line of code: {return test(
      expected output : "  G    42    235    eb    Hello, World!    0x10333ceb0  "
      your output     : "  G    42    235    eb    Hello, World!    10333ceb0  "
      expected (nonprintable as hex) : "  G    42    235    eb    Hello, World!    0x10333ceb0  "
      actual   (nonprintable as hex) : "  G    42    235    eb    Hello, World!    10333ceb0  "

Test 710 (mix_test_59) : FAILED.
    First line of code: {return test(
      expected output : "  G    42    Hello, World!    235    eb    0x10333ceb0  "
      your output     : "  G    42    Hello, World!    235    eb    10333ceb0  "
      expected (nonprintable as hex) : "  G    42    Hello, World!    235    eb    0x10333ceb0  "
      actual   (nonprintable as hex) : "  G    42    Hello, World!    235    eb    10333ceb0  "

Test 713 (mix_test_62) : FAILED.
    First line of code: {return test(
      expected output : "  %    G    42    0x10333ceb0    Hello, World!    EB  "
      your output     : "  %    G    42    10333ceb0    Hello, World!    EB  "
      expected (nonprintable as hex) : "  %    G    42    0x10333ceb0    Hello, World!    EB  "
      actual   (nonprintable as hex) : "  %    G    42    10333ceb0    Hello, World!    EB  "

Test 716 (mix_test_65) : FAILED.
    First line of code: {return test(
      expected output : "  G    %    42    0x10333ceb0    235    EB  "
      your output     : "  G    %    42    10333ceb0    235    EB  "
      expected (nonprintable as hex) : "  G    %    42    0x10333ceb0    235    EB  "
      actual   (nonprintable as hex) : "  G    %    42    10333ceb0    235    EB  "

Test 717 (mix_test_66) : FAILED.
    First line of code: {return test(
      expected output : "  42    G    %    235    EB    0x10333ceb0  "
      your output     : "  42    G    %    235    EB    10333ceb0  "
      expected (nonprintable as hex) : "  42    G    %    235    EB    0x10333ceb0  "
      actual   (nonprintable as hex) : "  42    G    %    235    EB    10333ceb0  "

Test 718 (mix_test_67) : FAILED.
    First line of code: {return test(
      expected output : "  Hello, World!    42    eb    235    G    0x10333ceb0  "
      your output     : "  Hello, World!    42    eb    235    G    10333ceb0  "
      expected (nonprintable as hex) : "  Hello, World!    42    eb    235    G    0x10333ceb0  "
      actual   (nonprintable as hex) : "  Hello, World!    42    eb    235    G    10333ceb0  "

Test 719 (mix_test_68) : FAILED.
    First line of code: {return test(
      expected output : "  Hello, World!    eb    G    0x10333ceb0    235    EB  "
      your output     : "  Hello, World!    eb    G    10333ceb0    235    EB  "
      expected (nonprintable as hex) : "  Hello, World!    eb    G    0x10333ceb0    235    EB  "
      actual   (nonprintable as hex) : "  Hello, World!    eb    G    10333ceb0    235    EB  "

Test 720 (mix_test_69) : FAILED.
    First line of code: {return test(
      expected output : "  %    Hello, World!    0x10333ceb0    42    EB    G  "
      your output     : "  %    Hello, World!    10333ceb0    42    EB    G  "
      expected (nonprintable as hex) : "  %    Hello, World!    0x10333ceb0    42    EB    G  "
      actual   (nonprintable as hex) : "  %    Hello, World!    10333ceb0    42    EB    G  "

Test 722 (mix_test_71) : FAILED.
    First line of code: {return test(
      expected output : "  Hello, World!    42    EB    G    %    0x10333ceb0  "
      your output     : "  Hello, World!    42    EB    G    %    10333ceb0  "
      expected (nonprintable as hex) : "  Hello, World!    42    EB    G    %    0x10333ceb0  "
      actual   (nonprintable as hex) : "  Hello, World!    42    EB    G    %    10333ceb0  "

Test 723 (mix_test_72) : FAILED.
    First line of code: {return test(
      expected output : "  eb    0x10333ceb0    G    Hello, World!    EB    235  "
      your output     : "  eb    10333ceb0    G    Hello, World!    EB    235  "
      expected (nonprintable as hex) : "  eb    0x10333ceb0    G    Hello, World!    EB    235  "
      actual   (nonprintable as hex) : "  eb    10333ceb0    G    Hello, World!    EB    235  "

Test 724 (mix_test_73) : FAILED.
    First line of code: {return test(
      expected output : "  %    EB    235    eb    0x10333ceb0    G  "
      your output     : "  %    EB    235    eb    10333ceb0    G  "
      expected (nonprintable as hex) : "  %    EB    235    eb    0x10333ceb0    G  "
      actual   (nonprintable as hex) : "  %    EB    235    eb    10333ceb0    G  "

Test 725 (mix_test_74) : FAILED.
    First line of code: {return test(
      expected output : "  0x10333ceb0    G    Hello, World!    235    42    eb  "
      your output     : "  10333ceb0    G    Hello, World!    235    42    eb  "
      expected (nonprintable as hex) : "  0x10333ceb0    G    Hello, World!    235    42    eb  "
      actual   (nonprintable as hex) : "  10333ceb0    G    Hello, World!    235    42    eb  "

Test 726 (mix_test_75) : FAILED.
    First line of code: {return test(
      expected output : "  42    G    %    0x10333ceb0    235    eb  "
      your output     : "  42    G    %    10333ceb0    235    eb  "
      expected (nonprintable as hex) : "  42    G    %    0x10333ceb0    235    eb  "
      actual   (nonprintable as hex) : "  42    G    %    10333ceb0    235    eb  "

Test 727 (mix_test_76) : FAILED.
    First line of code: {return test(
      expected output : "  EB    %    235    G    0x10333ceb0    Hello, World!  "
      your output     : "  EB    %    235    G    10333ceb0    Hello, World!  "
      expected (nonprintable as hex) : "  EB    %    235    G    0x10333ceb0    Hello, World!  "
      actual   (nonprintable as hex) : "  EB    %    235    G    10333ceb0    Hello, World!  "

Test 728 (mix_test_77) : FAILED.
    First line of code: {return test(
      expected output : "  EB    42    G    235    0x10333ceb0    Hello, World!  "
      your output     : "  EB    42    G    235    10333ceb0    Hello, World!  "
      expected (nonprintable as hex) : "  EB    42    G    235    0x10333ceb0    Hello, World!  "
      actual   (nonprintable as hex) : "  EB    42    G    235    10333ceb0    Hello, World!  "

Test 729 (mix_test_78) : FAILED.
    First line of code: {return test(
      expected output : "  0x10333ceb0    %    G    EB    235    42  "
      your output     : "  10333ceb0    %    G    EB    235    42  "
      expected (nonprintable as hex) : "  0x10333ceb0    %    G    EB    235    42  "
      actual   (nonprintable as hex) : "  10333ceb0    %    G    EB    235    42  "

Test 730 (mix_test_79) : FAILED.
    First line of code: {return test(
      expected output : "  Hello, World!    G    42    %    0x10333ceb0    EB  "
      your output     : "  Hello, World!    G    42    %    10333ceb0    EB  "
      expected (nonprintable as hex) : "  Hello, World!    G    42    %    0x10333ceb0    EB  "
      actual   (nonprintable as hex) : "  Hello, World!    G    42    %    10333ceb0    EB  "

Test 731 (mix_test_80) : FAILED.
    First line of code: {return test(
      expected output : "  0x10333ceb0    %    G    235    Hello, World!    EB  "
      your output     : "  10333ceb0    %    G    235    Hello, World!    EB  "
      expected (nonprintable as hex) : "  0x10333ceb0    %    G    235    Hello, World!    EB  "
      actual   (nonprintable as hex) : "  10333ceb0    %    G    235    Hello, World!    EB  "

Test 735 (mix_test_84) : FAILED.
    First line of code: {return test(
      expected output : "  0x10333ceb0    eb    G    Hello, World!    235    0x10333ceb0  "
      your output     : "  10333ceb0    eb    G    Hello, World!    235    10333ceb0  "
      expected (nonprintable as hex) : "  0x10333ceb0    eb    G    Hello, World!    235    0x10333ceb0  "
      actual   (nonprintable as hex) : "  10333ceb0    eb    G    Hello, World!    235    10333ceb0  "

Test 736 (mix_test_85) : FAILED.
    First line of code: {return test(
      expected output : "  235    0x10333ceb0    G    EB    Hello, World!    0x10333ceb0  "
      your output     : "  235    10333ceb0    G    EB    Hello, World!    10333ceb0  "
      expected (nonprintable as hex) : "  235    0x10333ceb0    G    EB    Hello, World!    0x10333ceb0  "
      actual   (nonprintable as hex) : "  235    10333ceb0    G    EB    Hello, World!    10333ceb0  "

Test 737 (mix_test_86) : FAILED.
    First line of code: {return test(
      expected output : "  0x10333ceb0    G    235    EB    Hello, World!    0x10333ceb0  "
      your output     : "  10333ceb0    G    235    EB    Hello, World!    10333ceb0  "
      expected (nonprintable as hex) : "  0x10333ceb0    G    235    EB    Hello, World!    0x10333ceb0  "
      actual   (nonprintable as hex) : "  10333ceb0    G    235    EB    Hello, World!    10333ceb0  "

Test 738 (mix_test_87) : FAILED.
    First line of code: {return test(
      expected output : "  42    235    EB    0x10333ceb0    G    0x10333ceb0  "
      your output     : "  42    235    EB    10333ceb0    G    10333ceb0  "
      expected (nonprintable as hex) : "  42    235    EB    0x10333ceb0    G    0x10333ceb0  "
      actual   (nonprintable as hex) : "  42    235    EB    10333ceb0    G    10333ceb0  "

Test 739 (mix_test_88) : FAILED.
    First line of code: {return test(
      expected output : "  42    G    0x10333ceb0    %    EB    235  "
      your output     : "  42    G    10333ceb0    %    EB    235  "
      expected (nonprintable as hex) : "  42    G    0x10333ceb0    %    EB    235  "
      actual   (nonprintable as hex) : "  42    G    10333ceb0    %    EB    235  "

Test 740 (mix_test_89) : FAILED.
    First line of code: {return test(
      expected output : "  Hello, World!    G    42    eb    0x10333ceb0    235  "
      your output     : "  Hello, World!    G    42    eb    10333ceb0    235  "
      expected (nonprintable as hex) : "  Hello, World!    G    42    eb    0x10333ceb0    235  "
      actual   (nonprintable as hex) : "  Hello, World!    G    42    eb    10333ceb0    235  "

Test 741 (mix_test_90) : FAILED.
    First line of code: {return test(
      expected output : "  235    Hello, World!    eb    0x10333ceb0    42    G  "
      your output     : "  235    Hello, World!    eb    10333ceb0    42    G  "
      expected (nonprintable as hex) : "  235    Hello, World!    eb    0x10333ceb0    42    G  "
      actual   (nonprintable as hex) : "  235    Hello, World!    eb    10333ceb0    42    G  "

Test 742 (mix_test_91) : FAILED.
    First line of code: {return test(
      expected output : "  235    0x10333ceb0    EB    G    %    eb  "
      your output     : "  235    10333ceb0    EB    G    %    eb  "
      expected (nonprintable as hex) : "  235    0x10333ceb0    EB    G    %    eb  "
      actual   (nonprintable as hex) : "  235    10333ceb0    EB    G    %    eb  "

Test 743 (mix_test_92) : FAILED.
    First line of code: {return test(
      expected output : "  G    0x10333ceb0    EB    eb    %    Hello, World!  "
      your output     : "  G    10333ceb0    EB    eb    %    Hello, World!  "
      expected (nonprintable as hex) : "  G    0x10333ceb0    EB    eb    %    Hello, World!  "
      actual   (nonprintable as hex) : "  G    10333ceb0    EB    eb    %    Hello, World!  "

Test 744 (mix_test_93) : FAILED.
    First line of code: {return test(
      expected output : "  eb    G    Hello, World!    0x10333ceb0    235    42  "
      your output     : "  eb    G    Hello, World!    10333ceb0    235    42  "
      expected (nonprintable as hex) : "  eb    G    Hello, World!    0x10333ceb0    235    42  "
      actual   (nonprintable as hex) : "  eb    G    Hello, World!    10333ceb0    235    42  "

Test 745 (mix_test_94) : FAILED.
    First line of code: {return test(
      expected output : "  EB    0x10333ceb0    G    %    235    42  "
      your output     : "  EB    10333ceb0    G    %    235    42  "
      expected (nonprintable as hex) : "  EB    0x10333ceb0    G    %    235    42  "
      actual   (nonprintable as hex) : "  EB    10333ceb0    G    %    235    42  "

Test 746 (mix_test_95) : FAILED.
    First line of code: {return test(
      expected output : "  %    42    eb    0x10333ceb0    G    Hello, World!  "
      your output     : "  %    42    eb    10333ceb0    G    Hello, World!  "
      expected (nonprintable as hex) : "  %    42    eb    0x10333ceb0    G    Hello, World!  "
      actual   (nonprintable as hex) : "  %    42    eb    10333ceb0    G    Hello, World!  "

Test 747 (mix_test_96) : FAILED.
    First line of code: {return test(
      expected output : "  EB    0x10333ceb0    G    Hello, World!    42    235  "
      your output     : "  EB    10333ceb0    G    Hello, World!    42    235  "
      expected (nonprintable as hex) : "  EB    0x10333ceb0    G    Hello, World!    42    235  "
      actual   (nonprintable as hex) : "  EB    10333ceb0    G    Hello, World!    42    235  "

Test 748 (mix_test_97) : FAILED.
    First line of code: {return test(
      expected output : "  235    42    0x10333ceb0    eb    Hello, World!    EB  "
      your output     : "  235    42    10333ceb0    eb    Hello, World!    EB  "
      expected (nonprintable as hex) : "  235    42    0x10333ceb0    eb    Hello, World!    EB  "
      actual   (nonprintable as hex) : "  235    42    10333ceb0    eb    Hello, World!    EB  "

Test 749 (mix_test_98) : FAILED.
    First line of code: {return test(
      expected output : "  42    Hello, World!    %    0x10333ceb0    EB    G  "
      your output     : "  42    Hello, World!    %    10333ceb0    EB    G  "
      expected (nonprintable as hex) : "  42    Hello, World!    %    0x10333ceb0    EB    G  "
      actual   (nonprintable as hex) : "  42    Hello, World!    %    10333ceb0    EB    G  "

Test 750 (mix_test_99) : FAILED.
    First line of code: {return test(
      expected output : "  EB    0x10333ceb0    G    235    eb    42  "
      your output     : "  EB    10333ceb0    G    235    eb    42  "
      expected (nonprintable as hex) : "  EB    0x10333ceb0    G    235    eb    42  "
      actual   (nonprintable as hex) : "  EB    10333ceb0    G    235    eb    42  "

Test 756 (mix_successive_20) : FAILED.
    First line of code: {return ( test("%p", &mx_i) + test("%s", mx_s));}
      expected output : "0x10333ceb0Hello, World!"
      your output     : "10333ceb0Hello, World!"
      expected (nonprintable as hex) : "0x10333ceb0Hello, World!"
      actual   (nonprintable as hex) : "10333ceb0Hello, World!"

Test 768 (mix_successive_61) : FAILED.
    First line of code: {return ( test("%p", &mx_i) + test("%c", mx_c));}
      expected output : "0x10333ceb0G"
      your output     : "10333ceb0G"
      expected (nonprintable as hex) : "0x10333ceb0G"
      actual   (nonprintable as hex) : "10333ceb0G"

Test 4186 (d_neg_prec_star_01) : FAILED.
    First line of code: {return test("%.*d", -3, 12345);}
    SEGFAULT

Test 4187 (d_neg_prec_star_02) : FAILED.
    First line of code: {return test("%.*d", -1, 12345);}
    SEGFAULT

Test 4188 (d_neg_prec_star_03) : FAILED.
    First line of code: {return test("%.*d", -1, 0);}
    SEGFAULT

Test 4189 (u_neg_prec_star_01) : FAILED.
    First line of code: {return test("%.*u", -3, 12345);}
    SEGFAULT

Test 4190 (u_neg_prec_star_02) : FAILED.
    First line of code: {return test("%.*u", -1, 12345);}
    SEGFAULT

Test 4191 (u_neg_prec_star_03) : FAILED.
    First line of code: {return test("%.*u", -1, 0);}
    SEGFAULT

Test 4192 (notintsubject_o_neg_prec_star_01) : FAILED.
    First line of code: {return test("%.*o", -3, 12345);}
    SEGFAULT

Test 4193 (notintsubject_o_neg_prec_star_02) : FAILED.
    First line of code: {return test("%.*o", -1, 12345);}
    SEGFAULT

Test 4194 (notintsubject_o_neg_prec_star_03) : FAILED.
    First line of code: {return test("%.*o", -1, 0);}
    SEGFAULT

Test 4195 (x_neg_prec_star_01) : FAILED.
    First line of code: {return test("%.*x", -3, 12345);}
    SEGFAULT

Test 4196 (x_neg_prec_star_02) : FAILED.
    First line of code: {return test("%.*x", -1, 12345);}
    SEGFAULT

Test 4197 (x_neg_prec_star_03) : FAILED.
    First line of code: {return test("%.*x", -1, 0);}
    SEGFAULT

Test 4198 (X_neg_prec_star_01) : FAILED.
    First line of code: {return test("%.*X", -3, 12345);}
    SEGFAULT

Test 4199 (X_neg_prec_star_02) : FAILED.
    First line of code: {return test("%.*X", -1, 12345);}
    SEGFAULT

Test 4200 (X_neg_prec_star_03) : FAILED.
    First line of code: {return test("%.*X", -1, 0);}
    SEGFAULT

Test 4201 (s_neg_prec_star_01) : FAILED.
    First line of code: {return test("%.*s", -3, 0);}
    SEGFAULT

Test 4202 (s_neg_prec_star_02) : FAILED.
    First line of code: {return test("%.*s", -1, 0);}
    SEGFAULT

Test 4203 (p_neg_prec_star_01) : FAILED.
    First line of code: {return test("%.*p", -3, s_hello);}
    SEGFAULT

Test 4204 (p_neg_prec_star_02) : FAILED.
    First line of code: {return test("%.*p", -1, s_hello);}
    SEGFAULT

Test 4205 (p_neg_prec_star_03) : FAILED.
    First line of code: {return test("%.*p", -3, 0);}
    SEGFAULT

Test 4206 (p_neg_prec_star_04) : FAILED.
    First line of code: {return test("%.*p", -1, 0);}
    SEGFAULT

\nTest Summary:
================ PFT Run: Sun Aug 23 20:15:28 ================
  Running test 0 to end
  Running in fork mode with timeout enabled
==============================================================
Test    0:  nospec_no_specifier_test                   [PASS]
Test    1:  nospec_empty_string                        [PASS]
Test    2:  nospec_some_escaped_chars                  [PASS]
Test    3:  nospec_successive_5_5                      [PASS]
Test    4:  nospec_successive_2_9                      [PASS]
Test    5:  nospec_successive_8_3                      [PASS]
Test    6:  pct_basic                                  [PASS]
Test    7:  pct_5w                                     [SEGFAULT]
Test    8:  pct_5wlj                                   [SEGFAULT]
Test    9:  pct_5wzp                                   [SEGFAULT]
Test   10:  pct_5wljzp                                 [SEGFAULT]
Test   16:  c_allprintable_combined                    [PASS]
Test   17:  c_1_31_combined                            [PASS]
Test   18:  c_128_255_combined                         [PASS]
Test   19:  c_allprintable_width                       [PASS]
Test   20:  c_1_31_width                               [PASS]
Test   21:  c_128_255_width                            [PASS]
Test   22:  c_allprintable_width_lj                    [PASS]
Test   23:  c_1_31_width_lj                            [PASS]
Test   24:  c_128_255_width_lj                         [PASS]
Test   25:  c_nullterm_basic                           [PASS]
Test   26:  c_nullterm_5w                              [PASS]
Test   27:  c_nullterm_5wlj                            [FAIL]
Test   28:  s_basic_string_expansion                   [PASS]
Test   29:  s_only_string_expansion                    [PASS]
Test   30:  s_two_string_expansions                    [PASS]
Test   31:  s_two_string_expansions2                   [PASS]
Test   32:  s_empty_string_expansion                   [PASS]
Test   33:  s_full_then_empty_string                   [PASS]
Test   34:  s_empty_then_full_string                   [PASS]
Test   35:  s_three_strings                            [PASS]
Test   36:  s_space_padded_field_width                 [PASS]
Test   37:  s_space_padded_field_width2                [PASS]
Test   38:  s_space_padded_over_field_width            [PASS]
Test   39:  s_space_padded_field_width_lj              [PASS]
Test   40:  s_space_padded_field_width2_lj             [PASS]
Test   41:  s_space_padded_over_field_width_lj         [PASS]
Test   42:  s_string_prec_notrunc                      [PASS]
Test   43:  s_string_prec_trunc                        [PASS]
Test   44:  s_string_prec_default                      [FAIL]
Test   45:  s_string_prec_zero                         [FAIL]
Test   46:  s_two_strings_prec_2trunc                  [PASS]
Test   47:  s_two_strings_prec_1trunc_a                [PASS]
Test   48:  s_two_strings_prec_1trunc_b                [PASS]
Test   49:  s_two_strings_prec_0trunc                  [PASS]
Test   50:  s_string_prec_width_notrunc                [PASS]
Test   51:  s_string_prec_width_trunc                  [PASS]
Test   52:  s_string_prec_width_notrunc_lj             [PASS]
Test   53:  s_string_prec_width_trunc_lj               [PASS]
Test   54:  s_two_s_prec_width_2fit_0trunc             [PASS]
Test   55:  s_two_s_prec_width_1fit_a_0trunc           [PASS]
Test   56:  s_two_s_prec_width_1fit_b_0trunc           [PASS]
Test   57:  s_two_s_prec_width_0fit_0trunc             [PASS]
Test   58:  s_two_s_prec_width_2fit_1trunc_a           [PASS]
Test   59:  s_two_s_prec_width_1fit_a_1trunc_a         [PASS]
Test   60:  s_two_s_prec_width_1fit_b_1trunc_a         [PASS]
Test   61:  s_two_s_prec_width_0fit_1trunc_a           [PASS]
Test   62:  s_two_s_prec_width_2fit_1trunc_b           [PASS]
Test   63:  s_two_s_prec_width_1fit_a_1trunc_b         [PASS]
Test   64:  s_two_s_prec_width_1fit_b_1trunc_b         [PASS]
Test   65:  s_two_s_prec_width_0fit_1trunc_b           [PASS]
Test   66:  s_two_s_prec_width_2fit_2trunc             [PASS]
Test   67:  s_two_s_prec_width_1fit_a_2trunc           [PASS]
Test   68:  s_two_s_prec_width_1fit_b_2trunc           [PASS]
Test   69:  s_two_s_prec_width_0fit_2trunc             [PASS]
Test   70:  s_two_s_prec_width_2trunc                  [PASS]
Test   71:  s_two_strings_lj_and_rj                    [PASS]
Test   72:  s_two_strings_rj_and_lj                    [PASS]
Test   73:  s_null_basic_string_expansion              [PASS]
Test   74:  s_null_only_string_expansion               [PASS]
Test   75:  s_null_space_padded_field_width            [PASS]
Test   76:  s_null_space_padded_over_field_width       [PASS]
Test   77:  s_null_space_padded_field_width_lj         [PASS]
Test   78:  s_null_space_padded_field_width2_lj        [PASS]
Test   79:  s_null_space_padded_over_field_width_lj    [PASS]
Test   80:  s_null_string_prec_notrunc                 [PASS]
Test   81:  s_null_string_prec_trunc                   [PASS]
Test   82:  s_null_string_prec_default                 [FAIL]
Test   83:  s_null_string_prec_zero                    [FAIL]
Test   84:  s_basic_s_hidden                           [PASS]
Test   85:  s_width_3_s_hidden                         [PASS]
Test   86:  s_width_9_s_hidden                         [PASS]
Test   87:  s_prec_no_width_s_hidden                   [FAIL]
Test   88:  s_prec_9_no_width_s_hidden                 [PASS]
Test   89:  s_prec_03_no_width_s_hidden                [PASS]
Test   90:  s_prec_09_no_width_s_hidden                [PASS]
Test   91:  s_prec_03_no_width_s_null                  [PASS]
Test   92:  s_prec_09_no_width_s_null                  [PASS]
Test   93:  s_prec_00_no_width_s_nullchar              [PASS]
Test   94:  s_prec_01_no_width_s_nullchar              [PASS]
Test   95:  s_prec_03_no_width_s_nullchar              [PASS]
Test   96:  s_prec_09_no_width_s_nullchar              [PASS]
Test   97:  s_prec_0_width_3_s_hidden                  [FAIL]
Test   98:  s_prec_0_width_10_s_hidden                 [FAIL]
Test   99:  s_prec_0_width_3_s_null                    [FAIL]
Test  100:  s_prec_0_width_10_s_null                   [FAIL]
Test  101:  s_prec_0_width_1_s_nullchar                [PASS]
Test  102:  s_prec_0_width_2_s_nullchar                [PASS]
Test  103:  s_prec_0_width_9_s_nullchar                [PASS]
Test  104:  s_prec_0_lj_width_3_s_hidden               [FAIL]
Test  105:  s_prec_0_lj_width_8_s_hidden               [FAIL]
Test  106:  s_prec_0_lj_width_3_s_null                 [FAIL]
Test  107:  s_prec_0_lj_width_8_s_null                 [FAIL]
Test  108:  s_prec_0_lj_width_1_s_nullchar             [PASS]
Test  109:  s_prec_0_lj_width_2_s_nullchar             [PASS]
Test  110:  s_prec_0_lj_width_6_s_nullchar             [PASS]
Test  111:  s_prec_1_width_3_s_hidden                  [PASS]
Test  112:  s_prec_1_width_10_s_hidden                 [PASS]
Test  113:  s_prec_1_width_3_s_null                    [PASS]
Test  114:  s_prec_1_width_9_s_null                    [PASS]
Test  115:  s_prec_1_lj_width_3_s_hidden               [PASS]
Test  116:  s_prec_1_lj_width_10_s_hidden              [PASS]
Test  117:  s_prec_1_lj_width_3_s_null                 [PASS]
Test  118:  s_prec_1_lj_width_9_s_null                 [PASS]
Test  119:  s_prec_1_lj_width_3_s_nullchar             [PASS]
Test  120:  s_prec_1_lj_width_6_s_nullchar             [PASS]
Test  121:  s_prec_perfect_width_3_s_hidden            [PASS]
Test  122:  s_prec_perfect_width_20_s_hidden           [PASS]
Test  123:  s_prec_perfect_width_3_s_null              [PASS]
Test  124:  s_prec_perfect_width_20_s_null             [PASS]
Test  125:  s_prec_perfect_width_3_s_nullchar          [PASS]
Test  126:  s_prec_perfect_width_6_s_nullchar          [PASS]
Test  127:  s_prec_perfect_lj_width_3_s_hidden         [PASS]
Test  128:  s_prec_perfect_lj_width_20_s_hidden        [PASS]
Test  129:  s_prec_8_lj_width_3_s_hidden               [PASS]
Test  130:  s_prec_8_lj_width_10_s_hidden              [PASS]
Test  131:  s_prec_8_lj_width_3_s_null                 [PASS]
Test  132:  s_prec_8_lj_width_10_s_null                [PASS]
Test  133:  s_prec_00_lj_s_hidden_trunc                [FAIL]
Test  134:  s_prec_09_lj_s_hidden_notrunc              [PASS]
Test  173:  p_null                                     [FAIL]
Test  178:  p_ftfc_5w_throwswarning                    [FAIL]
Test  179:  p_basic                                    [FAIL]
Test  180:  p_width_fit                                [FAIL]
Test  181:  p_width_nofit                              [FAIL]
Test  182:  p_width_16                                 [FAIL]
Test  183:  p_width_8                                  [FAIL]
Test  184:  p_width_32                                 [FAIL]
Test  185:  p_width_fit_lj                             [FAIL]
Test  186:  p_width_nofit_lj                           [FAIL]
Test  187:  p_width_16_lj                              [FAIL]
Test  188:  p_width_8_lj                               [FAIL]
Test  189:  p_width_32_lj                              [FAIL]
Test  190:  d_basic_pos                                [PASS]
Test  191:  d_basic_neg                                [PASS]
Test  192:  d_basic_zero                               [PASS]
Test  193:  d_basic_onlypos                            [PASS]
Test  194:  d_basic_onlyneg                            [PASS]
Test  195:  d_basic_onlyzero                           [PASS]
Test  196:  d_intmax                                   [PASS]
Test  197:  d_intmin                                   [PASS]
Test  198:  d_width_pos_fits                           [PASS]
Test  199:  d_width_neg_fits                           [PASS]
Test  200:  d_width_zero_fits                          [PASS]
Test  201:  d_width_pos_exactfit                       [PASS]
Test  202:  d_width_neg_exactfit                       [PASS]
Test  203:  d_width_pos_nofit                          [PASS]
Test  204:  d_width_neg_nofit                          [PASS]
Test  205:  d_width_pos_fits_lj                        [PASS]
Test  206:  d_width_neg_fits_lj                        [PASS]
Test  207:  d_width_zero_fits_lj                       [PASS]
Test  208:  d_width_pos_exactfit_lj                    [PASS]
Test  209:  d_width_neg_exactfit_lj                    [PASS]
Test  210:  d_width_pos_nofit_lj                       [PASS]
Test  211:  d_width_neg_nofit_lj                       [PASS]
Test  212:  d_prec_fits_pos                            [PASS]
Test  213:  d_prec_fits_neg                            [PASS]
Test  214:  d_prec_fits_zero                           [PASS]
Test  215:  d_prec_exactfit_pos                        [PASS]
Test  216:  d_prec_exactfit_neg                        [PASS]
Test  217:  d_prec_nofit_pos                           [PASS]
Test  218:  d_prec_nofit_neg                           [PASS]
Test  219:  d_zp_pos_fits                              [PASS]
Test  220:  d_zp_neg_fits                              [PASS]
Test  221:  d_zp_zero_fits                             [PASS]
Test  222:  d_zp_pos_exactfit                          [PASS]
Test  223:  d_zp_neg_exactfit                          [PASS]
Test  224:  d_zp_neg_minus1fit                         [PASS]
Test  225:  d_prec_width_fit_fit_pos                   [PASS]
Test  226:  d_prec_width_fit_fit_neg                   [PASS]
Test  227:  d_prec_width_fit_fit_zero                  [PASS]
Test  228:  d_prec_width_nofit_fit_pos                 [PASS]
Test  229:  d_prec_width_nofit_fit_neg                 [PASS]
Test  230:  d_prec_width_fit_nofit_pos                 [PASS]
Test  231:  d_prec_width_fit_nofit_neg                 [PASS]
Test  232:  d_prec_width_nofit_nofit_pos               [PASS]
Test  233:  d_prec_width_nofit_nofit_neg               [PASS]
Test  234:  d_prec_width_fit_fit_pos_lj                [PASS]
Test  235:  d_prec_width_fit_fit_neg_lj                [PASS]
Test  236:  d_prec_width_fit_fit_zero_lj               [PASS]
Test  237:  d_prec_width_nofit_fit_pos_lj              [PASS]
Test  238:  d_prec_width_nofit_fit_neg_lj              [PASS]
Test  239:  d_prec_width_fit_nofit_pos_lj              [PASS]
Test  240:  d_prec_width_fit_nofit_neg_lj              [PASS]
Test  241:  d_prec_width_nofit_nofit_pos_lj            [PASS]
Test  242:  d_prec_width_nofit_nofit_neg_lj            [PASS]
Test  243:  d_prec_width_ff_pos_zp                     [PASS]
Test  244:  d_prec_width_ff_neg_zp                     [PASS]
Test  245:  d_prec_width_ff_zero_zp                    [PASS]
Test  246:  d_prec_width_nf_pos_zp                     [PASS]
Test  247:  d_prec_width_nf_neg_zp                     [PASS]
Test  248:  d_prec_width_fn_pos_zp                     [PASS]
Test  249:  d_prec_width_fn_neg_zp                     [PASS]
Test  250:  d_prec_width_nn_pos_zp                     [PASS]
Test  251:  d_prec_width_nn_neg_zp                     [PASS]
Test  252:  d_prec_width_ff_pos_lj_zp_ignoreflag       [PASS]
Test  253:  d_prec_width_ff_neg_ljzp_ignoreflag        [PASS]
Test  254:  d_prec_width_ff_zero_ljzp_ignoreflag       [PASS]
Test  255:  d_prec_width_nf_pos_ljzp_ignoreflag        [PASS]
Test  256:  d_prec_width_nf_neg_ljzp_ignoreflag        [PASS]
Test  257:  d_prec_width_fn_pos_ljzp_ignoreflag        [PASS]
Test  258:  d_prec_width_fn_neg_ljzp_ignoreflag        [PASS]
Test  259:  d_prec_width_nn_pos_ljzp_ignoreflag        [PASS]
Test  260:  d_prec_width_nn_neg_ljzp_ignoreflag        [PASS]
Test  261:  d_prec0val0_basic                          [PASS]
Test  262:  d_prec0val0_implicit                       [PASS]
Test  263:  d_prec0val0_w                              [PASS]
Test  264:  d_prec0val0_w_impl                         [PASS]
Test  265:  d_prec0val0_wlj                            [PASS]
Test  266:  d_prec0val0_wlj_impl                       [PASS]
Test  267:  i_basic_pos                                [PASS]
Test  268:  i_basic_neg                                [PASS]
Test  269:  i_basic_zero                               [PASS]
Test  270:  i_basic_onlypos                            [PASS]
Test  271:  i_basic_onlyneg                            [PASS]
Test  272:  i_basic_onlyzero                           [PASS]
Test  273:  i_intmax                                   [PASS]
Test  274:  i_intmin                                   [PASS]
Test  275:  i_width_pos_fits                           [PASS]
Test  276:  i_width_neg_fits                           [PASS]
Test  277:  i_width_zero_fits                          [PASS]
Test  278:  i_width_pos_exactfit                       [PASS]
Test  279:  i_width_neg_exactfit                       [PASS]
Test  280:  i_width_pos_nofit                          [PASS]
Test  281:  i_width_neg_nofit                          [PASS]
Test  282:  i_width_pos_fits_lj                        [PASS]
Test  283:  i_width_neg_fits_lj                        [PASS]
Test  284:  i_width_zero_fits_lj                       [PASS]
Test  285:  i_width_pos_exactfit_lj                    [PASS]
Test  286:  i_width_neg_exactfit_lj                    [PASS]
Test  287:  i_width_pos_nofit_lj                       [PASS]
Test  288:  i_width_neg_nofit_lj                       [PASS]
Test  289:  i_prec_fits_pos                            [PASS]
Test  290:  i_prec_fits_neg                            [PASS]
Test  291:  i_prec_fits_zero                           [PASS]
Test  292:  i_prec_exactfit_pos                        [PASS]
Test  293:  i_prec_exactfit_neg                        [PASS]
Test  294:  i_prec_nofit_pos                           [PASS]
Test  295:  i_prec_nofit_neg                           [PASS]
Test  296:  i_zp_pos_fits                              [PASS]
Test  297:  i_zp_neg_fits                              [PASS]
Test  298:  i_zp_zero_fits                             [PASS]
Test  299:  i_zp_pos_exactfit                          [PASS]
Test  300:  i_zp_neg_exactfit                          [PASS]
Test  301:  i_zp_neg_minus1fit                         [PASS]
Test  302:  i_prec_width_fit_fit_pos                   [PASS]
Test  303:  i_prec_width_fit_fit_neg                   [PASS]
Test  304:  i_prec_width_fit_fit_zero                  [PASS]
Test  305:  i_prec_width_nofit_fit_pos                 [PASS]
Test  306:  i_prec_width_nofit_fit_neg                 [PASS]
Test  307:  i_prec_width_fit_nofit_pos                 [PASS]
Test  308:  i_prec_width_fit_nofit_neg                 [PASS]
Test  309:  i_prec_width_nofit_nofit_pos               [PASS]
Test  310:  i_prec_width_nofit_nofit_neg               [PASS]
Test  311:  i_prec_width_fit_fit_pos_lj                [PASS]
Test  312:  i_prec_width_fit_fit_neg_lj                [PASS]
Test  313:  i_prec_width_fit_fit_zero_lj               [PASS]
Test  314:  i_prec_width_nofit_fit_pos_lj              [PASS]
Test  315:  i_prec_width_nofit_fit_neg_lj              [PASS]
Test  316:  i_prec_width_fit_nofit_pos_lj              [PASS]
Test  317:  i_prec_width_fit_nofit_neg_lj              [PASS]
Test  318:  i_prec_width_nofit_nofit_pos_lj            [PASS]
Test  319:  i_prec_width_nofit_nofit_neg_lj            [PASS]
Test  320:  i_prec_width_ff_pos_zp                     [PASS]
Test  321:  i_prec_width_ff_neg_zp                     [PASS]
Test  322:  i_prec_width_ff_zero_zp                    [PASS]
Test  323:  i_prec_width_nf_pos_zp                     [PASS]
Test  324:  i_prec_width_nf_neg_zp                     [PASS]
Test  325:  i_prec_width_fn_pos_zp                     [PASS]
Test  326:  i_prec_width_fn_neg_zp                     [PASS]
Test  327:  i_prec_width_nn_pos_zp                     [PASS]
Test  328:  i_prec_width_nn_neg_zp                     [PASS]
Test  329:  i_prec_width_ff_pos_lj_zp_ignoreflag       [PASS]
Test  330:  i_prec_width_ff_neg_ljzp_ignoreflag        [PASS]
Test  331:  i_prec_width_ff_zero_ljzp_ignoreflag       [PASS]
Test  332:  i_prec_width_nf_pos_ljzp_ignoreflag        [PASS]
Test  333:  i_prec_width_nf_neg_ljzp_ignoreflag        [PASS]
Test  334:  i_prec_width_fn_pos_ljzp_ignoreflag        [PASS]
Test  335:  i_prec_width_fn_neg_ljzp_ignoreflag        [PASS]
Test  336:  i_prec_width_nn_pos_ljzp_ignoreflag        [PASS]
Test  337:  i_prec_width_nn_neg_ljzp_ignoreflag        [PASS]
Test  338:  i_prec0val0_basic                          [PASS]
Test  339:  i_prec0val0_implicit                       [PASS]
Test  340:  i_prec0val0_w                              [PASS]
Test  341:  i_prec0val0_w_impl                         [PASS]
Test  342:  i_prec0val0_wlj                            [PASS]
Test  343:  i_prec0val0_wlj_impl                       [PASS]
Test  344:  u_basic_pos                                [PASS]
Test  345:  u_basic_zero                               [PASS]
Test  346:  u_basic_onlypos                            [PASS]
Test  347:  u_uintmax                                  [PASS]
Test  348:  u_width_pos_fits                           [PASS]
Test  349:  u_width_zero_fits                          [PASS]
Test  350:  u_width_pos_exactfit                       [PASS]
Test  351:  u_width_pos_nofit                          [PASS]
Test  352:  u_width_pos_fits_lj                        [PASS]
Test  353:  u_width_zero_fits_lj                       [PASS]
Test  354:  u_width_pos_exactfit_lj                    [PASS]
Test  355:  u_width_pos_nofit_lj                       [PASS]
Test  356:  u_prec_fits_pos                            [PASS]
Test  357:  u_prec_fits_zero                           [PASS]
Test  358:  u_prec_exactfit_pos                        [PASS]
Test  359:  u_prec_nofit_pos                           [PASS]
Test  360:  u_zp_pos_fits                              [PASS]
Test  361:  u_zp_zero_fits                             [PASS]
Test  362:  u_zp_pos_exactfit                          [PASS]
Test  363:  u_prec_width_fit_fit_pos                   [PASS]
Test  364:  u_prec_width_fit_fit_zero                  [PASS]
Test  365:  u_prec_width_nofit_fit_pos                 [PASS]
Test  366:  u_prec_width_fit_nofit_pos                 [PASS]
Test  367:  u_prec_width_nofit_nofit_pos               [PASS]
Test  368:  u_prec_width_fit_fit_pos_lj                [PASS]
Test  369:  u_prec_width_fit_fit_zero_lj               [PASS]
Test  370:  u_prec_width_nofit_fit_pos_lj              [PASS]
Test  371:  u_prec_width_fit_nofit_pos_lj              [PASS]
Test  372:  u_prec_width_nofit_nofit_pos_lj            [PASS]
Test  373:  u_prec_width_ff_pos_zp                     [PASS]
Test  374:  u_prec_width_ff_zero_zp                    [PASS]
Test  375:  u_prec_width_nf_pos_zp                     [PASS]
Test  376:  u_prec_width_fn_pos_zp                     [PASS]
Test  377:  u_prec_width_nn_pos_zp                     [PASS]
Test  378:  u_prec_width_ff_pos_ljzp_ignoreflag        [PASS]
Test  379:  u_prec_width_ff_zero_ljzp_ignoreflag       [PASS]
Test  380:  u_prec_width_nf_pos_ljzp_ignoreflag        [PASS]
Test  381:  u_prec_width_fn_pos_ljzp_ignoreflag        [PASS]
Test  382:  u_prec_width_nn_pos_ljzp_ignoreflag        [PASS]
Test  383:  u_prec0val0_basic                          [PASS]
Test  384:  u_prec0val0_implicit                       [PASS]
Test  385:  u_prec0val0_w                              [PASS]
Test  386:  u_prec0val0_w_impl                         [PASS]
Test  387:  u_prec0val0_wlj                            [PASS]
Test  388:  u_prec0val0_wlj_impl                       [PASS]
Test  389:  x_basic_pos                                [PASS]
Test  390:  x_basic_zero                               [PASS]
Test  391:  x_basic_onlypos                            [PASS]
Test  392:  x_hexlmax                                  [PASS]
Test  393:  x_width_pos_fits                           [PASS]
Test  394:  x_width_zero_fits                          [PASS]
Test  395:  x_width_pos_exactfit                       [PASS]
Test  396:  x_width_pos_nofit                          [PASS]
Test  397:  x_width_pos_fits_lj                        [PASS]
Test  398:  x_width_zero_fits_lj                       [PASS]
Test  399:  x_width_pos_exactfit_lj                    [PASS]
Test  400:  x_width_pos_nofit_lj                       [PASS]
Test  401:  x_prec_fits_pos                            [PASS]
Test  402:  x_prec_fits_zero                           [PASS]
Test  403:  x_prec_exactfit_pos                        [PASS]
Test  404:  x_prec_nofit_pos                           [PASS]
Test  405:  x_zp_pos_fits                              [PASS]
Test  406:  x_zp_zero_fits                             [PASS]
Test  407:  x_zp_pos_exactfit                          [PASS]
Test  408:  x_prec_width_fit_fit_pos                   [PASS]
Test  409:  x_prec_width_fit_fit_zero                  [PASS]
Test  410:  x_prec_width_nofit_fit_pos                 [PASS]
Test  411:  x_prec_width_fit_nofit_pos                 [PASS]
Test  412:  x_prec_width_nofit_nofit_pos               [PASS]
Test  413:  x_prec_width_fit_fit_pos_lj                [PASS]
Test  414:  x_prec_width_fit_fit_zero_lj               [PASS]
Test  415:  x_prec_width_nofit_fit_pos_lj              [PASS]
Test  416:  x_prec_width_fit_nofit_pos_lj              [PASS]
Test  417:  x_prec_width_nofit_nofit_pos_lj            [PASS]
Test  418:  x_prec_width_ff_pos_zp                     [PASS]
Test  419:  x_prec_width_ff_zero_zp                    [PASS]
Test  420:  x_prec_width_nf_pos_zp                     [PASS]
Test  421:  x_prec_width_fn_pos_zp                     [PASS]
Test  422:  x_prec_width_nn_pos_zp                     [PASS]
Test  423:  x_prec_width_ff_pos_ljzp_ignoreflag        [PASS]
Test  424:  x_prec_width_ff_zero_ljzp_ignoreflag       [PASS]
Test  425:  x_prec_width_nf_pos_ljzp_ignoreflag        [PASS]
Test  426:  x_prec_width_fn_pos_ljzp_ignoreflag        [PASS]
Test  427:  x_prec_width_nn_pos_ljzp_ignoreflag        [PASS]
Test  428:  x_prec0val0_basic                          [PASS]
Test  429:  x_prec0val0_implicit                       [PASS]
Test  430:  x_prec0val0_w                              [PASS]
Test  431:  x_prec0val0_w_impl                         [PASS]
Test  432:  x_prec0val0_wlj                            [PASS]
Test  433:  x_prec0val0_wlj_impl                       [PASS]
Test  434:  X_basic_hexu_pos                           [PASS]
Test  435:  X_basic_hexu_zero                          [PASS]
Test  436:  X_basic_hexu_onlypos                       [PASS]
Test  437:  X_hexumax                                  [PASS]
Test  438:  X_width_pos_fits                           [PASS]
Test  439:  X_width_zero_fits                          [PASS]
Test  440:  X_width_pos_exactfit                       [PASS]
Test  441:  X_width_pos_nofit                          [PASS]
Test  442:  X_width_pos_fits_lj                        [PASS]
Test  443:  X_width_zero_fits_lj                       [PASS]
Test  444:  X_width_pos_exactfit_lj                    [PASS]
Test  445:  X_width_pos_nofit_lj                       [PASS]
Test  446:  X_prec_fits_pos                            [PASS]
Test  447:  X_prec_fits_zero                           [PASS]
Test  448:  X_prec_exactfit_pos                        [PASS]
Test  449:  X_prec_nofit_pos                           [PASS]
Test  450:  X_zp_pos_fits                              [PASS]
Test  451:  X_zp_zero_fits                             [PASS]
Test  452:  X_zp_pos_exactfit                          [PASS]
Test  453:  X_prec_width_fit_fit_pos                   [PASS]
Test  454:  X_prec_width_fit_fit_zero                  [PASS]
Test  455:  X_prec_width_nofit_fit_pos                 [PASS]
Test  456:  X_prec_width_fit_nofit_pos                 [PASS]
Test  457:  X_prec_width_nofit_nofit_pos               [PASS]
Test  458:  X_prec_width_fit_fit_pos_lj                [PASS]
Test  459:  X_prec_width_fit_fit_zero_lj               [PASS]
Test  460:  X_prec_width_nofit_fit_pos_lj              [PASS]
Test  461:  X_prec_width_fit_nofit_pos_lj              [PASS]
Test  462:  X_prec_width_nofit_nofit_pos_lj            [PASS]
Test  463:  X_prec_width_ff_pos_zp                     [PASS]
Test  464:  X_prec_width_ff_zero_zp                    [PASS]
Test  465:  X_prec_width_nf_pos_zp                     [PASS]
Test  466:  X_prec_width_fn_pos_zp                     [PASS]
Test  467:  X_prec_width_nn_pos_zp                     [PASS]
Test  468:  X_prec_width_ff_pos_ljzp_ignoreflag        [PASS]
Test  469:  X_prec_width_ff_zero_ljzp_ignoreflag       [PASS]
Test  470:  X_prec_width_nf_pos_ljzp_ignoreflag        [PASS]
Test  471:  X_prec_width_fn_pos_ljzp_ignoreflag        [PASS]
Test  472:  X_prec_width_nn_pos_ljzp_ignoreflag        [PASS]
Test  473:  X_prec0val0_basic                          [PASS]
Test  474:  X_prec0val0_implicit                       [PASS]
Test  475:  X_prec0val0_w                              [PASS]
Test  476:  X_prec0val0_w_impl                         [PASS]
Test  477:  X_prec0val0_wlj                            [PASS]
Test  478:  X_prec0val0_wlj_impl                       [PASS]
Test  479:  new2019_star_1                             [SEGFAULT]
Test  480:  new2019_star_2                             [SEGFAULT]
Test  481:  new2019_star_3                             [SEGFAULT]
Test  482:  new2019_star_4                             [SEGFAULT]
Test  483:  new2019_star_5                             [SEGFAULT]
Test  484:  new2019_star_6                             [SEGFAULT]
Test  485:  new2019_star_7                             [SEGFAULT]
Test  486:  new2019_star_8                             [SEGFAULT]
Test  487:  new2019_star_9                             [SEGFAULT]
Test  488:  new2019_star_10                            [SEGFAULT]
Test  489:  new2019_negstar_1                          [SEGFAULT]
Test  490:  new2019_negstar_2                          [SEGFAULT]
Test  491:  new2019_negstar_3                          [SEGFAULT]
Test  492:  new2019_negstar_4                          [SEGFAULT]
Test  493:  new2019_negstar_5                          [SEGFAULT]
Test  494:  new2019_negstar_6                          [SEGFAULT]
Test  495:  new2019_negstar_7                          [SEGFAULT]
Test  496:  new2019_negstar_8                          [SEGFAULT]
Test  497:  new2019_negstar_9                          [SEGFAULT]
Test  548:  moul_c_1                                   [PASS]
Test  549:  moul_c_2                                   [PASS]
Test  550:  moul_c_3                                   [PASS]
Test  551:  moul_c_4                                   [PASS]
Test  552:  moul_c_5                                   [PASS]
Test  553:  moul_c_5b                                  [PASS]
Test  554:  moul_c_6                                   [PASS]
Test  555:  moul_c_7                                   [PASS]
Test  556:  moul_c_8                                   [PASS]
Test  557:  moul_c_9                                   [PASS]
Test  558:  moul_c_10                                  [PASS]
Test  559:  moul_c_11                                  [PASS]
Test  560:  moul_c_12                                  [PASS]
Test  561:  moul_c_13                                  [PASS]
Test  562:  moul_c_14                                  [PASS]
Test  563:  moul_c_15                                  [PASS]
Test  564:  moul_c_16                                  [PASS]
Test  565:  moul_c_17                                  [PASS]
Test  566:  moul_c_18                                  [PASS]
Test  567:  moul_c_19                                  [PASS]
Test  568:  moul_c_20                                  [PASS]
Test  569:  moul_c_21                                  [PASS]
Test  570:  moul_c_22                                  [PASS]
Test  571:  moul_c_23                                  [PASS]
Test  572:  moul_c_24                                  [PASS]
Test  573:  moul_c_25                                  [PASS]
Test  574:  moul_c_26                                  [PASS]
Test  575:  moul_c_27                                  [PASS]
Test  576:  moul_c_28                                  [PASS]
Test  577:  moul_s_1                                   [PASS]
Test  578:  moul_s_2                                   [PASS]
Test  579:  moul_s_3                                   [PASS]
Test  580:  moul_s_4                                   [PASS]
Test  581:  moul_s_5_this_ones_a_doozy                 [PASS]
Test  582:  moul_d_1                                   [PASS]
Test  583:  moul_d_2                                   [PASS]
Test  584:  moul_d_3                                   [PASS]
Test  585:  moul_d_4                                   [PASS]
Test  586:  moul_d_5                                   [PASS]
Test  587:  moul_d_6                                   [PASS]
Test  588:  moul_d_7                                   [PASS]
Test  589:  moul_d_8                                   [PASS]
Test  590:  moul_d_9                                   [PASS]
Test  591:  moul_d_10                                  [PASS]
Test  592:  moul_d_11                                  [PASS]
Test  593:  moul_d_12                                  [PASS]
Test  594:  moul_mix_1                                 [FAIL]
Test  595:  moul_i_1                                   [PASS]
Test  596:  moul_i_2                                   [PASS]
Test  597:  moul_i_3                                   [PASS]
Test  598:  moul_i_4                                   [PASS]
Test  599:  moul_i_5                                   [PASS]
Test  600:  moul_i_6                                   [PASS]
Test  601:  moul_i_7                                   [PASS]
Test  602:  moul_i_8                                   [PASS]
Test  603:  moul_i_9                                   [PASS]
Test  604:  moul_i_10                                  [PASS]
Test  605:  moul_i_11                                  [PASS]
Test  606:  moul_i_12                                  [PASS]
Test  607:  moul_u_1                                   [PASS]
Test  608:  moul_u_2                                   [PASS]
Test  609:  moul_u_3                                   [PASS]
Test  610:  moul_u_4                                   [PASS]
Test  611:  moul_u_5                                   [PASS]
Test  612:  moul_u_6                                   [PASS]
Test  613:  moul_u_7                                   [PASS]
Test  614:  moul_u_8                                   [PASS]
Test  615:  moul_u_9                                   [PASS]
Test  616:  moul_u_10                                  [PASS]
Test  617:  moul_u_11                                  [PASS]
Test  618:  moul_u_12                                  [PASS]
Test  619:  moul_x_1                                   [PASS]
Test  620:  moul_x_2                                   [PASS]
Test  621:  moul_x_3                                   [PASS]
Test  622:  moul_x_4                                   [PASS]
Test  623:  moul_x_5                                   [PASS]
Test  624:  moul_x_6                                   [PASS]
Test  625:  moul_x_7                                   [PASS]
Test  626:  moul_x_8                                   [PASS]
Test  627:  moul_x_9                                   [PASS]
Test  628:  moul_x_10                                  [PASS]
Test  629:  moul_x_11                                  [PASS]
Test  630:  moul_x_12                                  [PASS]
Test  631:  moul_prec_1                                [PASS]
Test  632:  moul_prec_3                                [PASS]
Test  633:  moul_prec_4                                [PASS]
Test  634:  moul_prec_5                                [PASS]
Test  635:  moul_zeropad_1                             [PASS]
Test  636:  moul_zeropad_2                             [PASS]
Test  637:  moul_zeropad_3                             [PASS]
Test  638:  moul_zeropad_4                             [PASS]
Test  639:  moul_leftjusty_1                           [PASS]
Test  640:  moul_leftjusty_2                           [PASS]
Test  641:  moul_leftjusty_3                           [PASS]
Test  642:  moul_leftjusty_4                           [PASS]
Test  643:  moul_leftjusty_5                           [PASS]
Test  644:  moul_leftjusty_6                           [PASS]
Test  645:  moul_leftjusty_7                           [PASS]
Test  646:  moul_star_1                                [SEGFAULT]
Test  647:  moul_star_2                                [SEGFAULT]
Test  648:  moul_star_3                                [SEGFAULT]
Test  649:  moul_star_4                                [SEGFAULT]
Test  650:  moul_star_5                                [SEGFAULT]
Test  651:  mix_test_0                                 [FAIL]
Test  652:  mix_test_1                                 [FAIL]
Test  653:  mix_test_2                                 [FAIL]
Test  654:  mix_test_3                                 [PASS]
Test  655:  mix_test_4                                 [PASS]
Test  656:  mix_test_5                                 [FAIL]
Test  657:  mix_test_6                                 [FAIL]
Test  658:  mix_test_7                                 [PASS]
Test  659:  mix_test_8                                 [FAIL]
Test  660:  mix_test_9                                 [PASS]
Test  661:  mix_test_10                                [FAIL]
Test  662:  mix_test_11                                [FAIL]
Test  663:  mix_test_12                                [PASS]
Test  664:  mix_test_13                                [PASS]
Test  665:  mix_test_14                                [FAIL]
Test  666:  mix_test_15                                [FAIL]
Test  667:  mix_test_16                                [PASS]
Test  668:  mix_test_17                                [PASS]
Test  669:  mix_test_18                                [FAIL]
Test  670:  mix_test_19                                [FAIL]
Test  671:  mix_test_20                                [FAIL]
Test  672:  mix_test_21                                [FAIL]
Test  673:  mix_test_22                                [PASS]
Test  674:  mix_test_23                                [FAIL]
Test  675:  mix_test_24                                [FAIL]
Test  676:  mix_test_25                                [FAIL]
Test  677:  mix_test_26                                [FAIL]
Test  678:  mix_test_27                                [FAIL]
Test  679:  mix_test_28                                [FAIL]
Test  680:  mix_test_29                                [FAIL]
Test  681:  mix_test_30                                [FAIL]
Test  682:  mix_test_31                                [FAIL]
Test  683:  mix_test_32                                [FAIL]
Test  684:  mix_test_33                                [FAIL]
Test  685:  mix_test_34                                [FAIL]
Test  686:  mix_test_35                                [FAIL]
Test  687:  mix_test_36                                [FAIL]
Test  688:  mix_test_37                                [FAIL]
Test  689:  mix_test_38                                [PASS]
Test  690:  mix_test_39                                [FAIL]
Test  691:  mix_test_40                                [FAIL]
Test  692:  mix_test_41                                [FAIL]
Test  693:  mix_test_42                                [PASS]
Test  694:  mix_test_43                                [FAIL]
Test  695:  mix_test_44                                [FAIL]
Test  696:  mix_test_45                                [PASS]
Test  697:  mix_test_46                                [FAIL]
Test  698:  mix_test_47                                [FAIL]
Test  699:  mix_test_48                                [FAIL]
Test  700:  mix_test_49                                [PASS]
Test  701:  mix_test_50                                [FAIL]
Test  702:  mix_test_51                                [FAIL]
Test  703:  mix_test_52                                [PASS]
Test  704:  mix_test_53                                [FAIL]
Test  705:  mix_test_54                                [FAIL]
Test  706:  mix_test_55                                [FAIL]
Test  707:  mix_test_56                                [FAIL]
Test  708:  mix_test_57                                [PASS]
Test  709:  mix_test_58                                [FAIL]
Test  710:  mix_test_59                                [FAIL]
Test  711:  mix_test_60                                [PASS]
Test  712:  mix_test_61                                [PASS]
Test  713:  mix_test_62                                [FAIL]
Test  714:  mix_test_63                                [PASS]
Test  715:  mix_test_64                                [PASS]
Test  716:  mix_test_65                                [FAIL]
Test  717:  mix_test_66                                [FAIL]
Test  718:  mix_test_67                                [FAIL]
Test  719:  mix_test_68                                [FAIL]
Test  720:  mix_test_69                                [FAIL]
Test  721:  mix_test_70                                [PASS]
Test  722:  mix_test_71                                [FAIL]
Test  723:  mix_test_72                                [FAIL]
Test  724:  mix_test_73                                [FAIL]
Test  725:  mix_test_74                                [FAIL]
Test  726:  mix_test_75                                [FAIL]
Test  727:  mix_test_76                                [FAIL]
Test  728:  mix_test_77                                [FAIL]
Test  729:  mix_test_78                                [FAIL]
Test  730:  mix_test_79                                [FAIL]
Test  731:  mix_test_80                                [FAIL]
Test  732:  mix_test_81                                [PASS]
Test  733:  mix_test_82                                [PASS]
Test  734:  mix_test_83                                [PASS]
Test  735:  mix_test_84                                [FAIL]
Test  736:  mix_test_85                                [FAIL]
Test  737:  mix_test_86                                [FAIL]
Test  738:  mix_test_87                                [FAIL]
Test  739:  mix_test_88                                [FAIL]
Test  740:  mix_test_89                                [FAIL]
Test  741:  mix_test_90                                [FAIL]
Test  742:  mix_test_91                                [FAIL]
Test  743:  mix_test_92                                [FAIL]
Test  744:  mix_test_93                                [FAIL]
Test  745:  mix_test_94                                [FAIL]
Test  746:  mix_test_95                                [FAIL]
Test  747:  mix_test_96                                [FAIL]
Test  748:  mix_test_97                                [FAIL]
Test  749:  mix_test_98                                [FAIL]
Test  750:  mix_test_99                                [FAIL]
Test  751:  mix_successive_0                           [PASS]
Test  752:  mix_successive_4                           [PASS]
Test  753:  mix_successive_6                           [PASS]
Test  754:  mix_successive_10                          [PASS]
Test  755:  mix_successive_16                          [PASS]
Test  756:  mix_successive_20                          [FAIL]
Test  757:  mix_successive_21                          [PASS]
Test  758:  mix_successive_28                          [PASS]
Test  759:  mix_successive_30                          [PASS]
Test  760:  mix_successive_31                          [PASS]
Test  761:  mix_successive_32                          [PASS]
Test  762:  mix_successive_39                          [PASS]
Test  763:  mix_successive_40                          [PASS]
Test  764:  mix_successive_42                          [PASS]
Test  765:  mix_successive_43                          [PASS]
Test  766:  mix_successive_45                          [PASS]
Test  767:  mix_successive_46                          [PASS]
Test  768:  mix_successive_61                          [FAIL]
Test  769:  mix_successive_64                          [PASS]
Test 4186:  d_neg_prec_star_01                         [SEGFAULT]
Test 4187:  d_neg_prec_star_02                         [SEGFAULT]
Test 4188:  d_neg_prec_star_03                         [SEGFAULT]
Test 4189:  u_neg_prec_star_01                         [SEGFAULT]
Test 4190:  u_neg_prec_star_02                         [SEGFAULT]
Test 4191:  u_neg_prec_star_03                         [SEGFAULT]
Test 4192:  notintsubject_o_neg_prec_star_01           [SEGFAULT]
Test 4193:  notintsubject_o_neg_prec_star_02           [SEGFAULT]
Test 4194:  notintsubject_o_neg_prec_star_03           [SEGFAULT]
Test 4195:  x_neg_prec_star_01                         [SEGFAULT]
Test 4196:  x_neg_prec_star_02                         [SEGFAULT]
Test 4197:  x_neg_prec_star_03                         [SEGFAULT]
Test 4198:  X_neg_prec_star_01                         [SEGFAULT]
Test 4199:  X_neg_prec_star_02                         [SEGFAULT]
Test 4200:  X_neg_prec_star_03                         [SEGFAULT]
Test 4201:  s_neg_prec_star_01                         [SEGFAULT]
Test 4202:  s_neg_prec_star_02                         [SEGFAULT]
Test 4203:  p_neg_prec_star_01                         [SEGFAULT]
Test 4204:  p_neg_prec_star_02                         [SEGFAULT]
Test 4205:  p_neg_prec_star_03                         [SEGFAULT]
Test 4206:  p_neg_prec_star_04                         [SEGFAULT]
Tests completed. 537/694 tests passed.
See .pft_results.txt for details.
\n
==========================
  Disabled Tests
==========================

11: int nocrash_notrequired_nullspec_basic(void){return test("%");}
12: int nocrash_notrequired_nullspec_5w(void){return test("%5");}
13: int nocrash_notrequired_nullspec_5wzp(void){return test("%05");}
14: int nocrash_notrequired_nullspec_5wzplj(void){return test("%-05");}
15: int nocrash_notrequired_nullspec_5wlj(void){return test("%-5");}
135: int notrequired_s_undefbehav_4_flags_diff_order_1(void){return test("%+- 06.06s", s_hidden);}
136: int notrequired_s_undefbehav_4_flags_diff_order_2(void){return test("% 0+-6.06s", s_hidden);}
137: int notrequired_s_undefbehav_4_flags_diff_order_3(void){return test("%0 +-6.06s", s_hidden);}
138: int notrequired_s_undefbehav_4_flags_diff_order_4(void){return test("%+-0 6.06s", s_hidden);}
139: int notrequired_s_undefbehav_4_flags_diff_order_5(void){return test("%-+ 06.06s", s_hidden);}
140: int notrequired_s_undefbehav_4_flags_diff_order_6(void){return test("% -+06.06s", s_hidden);}
141: int notrequired_s_undefbehav_4_flags_sp_padded_diff_order_1(void){return test("%+- 07.06s", s_hidden);}
142: int notrequired_s_undefbehav_4_flags_sp_padded_diff_order_2(void){return test("% 0+-8.06s", s_hidden);}
143: int notrequired_s_undefbehav_4_flags_sp_padded_diff_order_3(void){return test("%0 +-9.06s", s_hidden);}
144: int notrequired_s_undefbehav_4_flags_sp_padded_diff_order_4(void){return test("%+-0 10.06s", s_hidden);}
145: int notrequired_s_undefbehav_4_flags_sp_padded_diff_order_5(void){return test("%-+ 011.06s", s_hidden);}
146: int notrequired_s_undefbehav_4_flags_sp_padded_diff_order_6(void){return test("% -+012.06s", s_hidden);}
147: int notrequired_s_undefbehav_4_flags_as_lj_sp_zero_trunc(void){return test("%+- 06.04s", s_hidden);}
148: int notrequired_s_undefbehav_4_flags_sp_zero_as_lj_trunc(void){return test("% 0+-6.04s", s_hidden);}
149: int notrequired_s_undefbehav_4_flags_zero_sp_as_lj_trunc(void){return test("%0 +-6.04s", s_hidden);}
150: int notrequired_s_undefbehav_4_flags_as_lj_zero_sp_trunc(void){return test("%+-0 6.04s", s_hidden);}
151: int notrequired_s_undefbehav_4_flags_lj_as_sp_zero_trunc(void){return test("%-+ 06.04s", s_hidden);}
152: int notrequired_s_undefbehav_4_flags_sp_zero_lj_as_trunc(void){return test("% 0-+6.04s", s_hidden);}
153: int notrequired_s_undefbehav_4_flags_as_lj_sp_zero__pads(void){return test("%+- 06.09s", s_hidden);}
154: int notrequired_s_undefbehav_4_flags_sp_zero_as_lj__pads(void){return test("% 0+-6.09s", s_hidden);}
155: int notrequired_s_undefbehav_4_flags_zero_sp_as_lj__pads(void){return test("%0 +-6.09s", s_hidden);}
156: int notrequired_s_undefbehav_4_flags_as_lj_zero_sp__pads(void){return test("%+-0 6.09s", s_hidden);}
157: int notrequired_s_undefbehav_4_flags_lj_as_sp_zero__pads(void){return test("%-+ 06.09s", s_hidden);}
158: int notrequired_s_undefbehav_4_flags_sp_zero_lj_as__pads(void){return test("% 0-+6.09s", s_hidden);}
159: int notrequired_s_undefbehav_0_2zero(void){return test("%00s", s_hidden);}
160: int notrequired_s_undefbehav_0_3zero(void){return test("%000s", s_hidden);}
161: int notrequired_s_undefbehav_0_4zero(void){return test("%0000s", s_hidden);}
162: int notrequired_s_undefbehav_0_lj_2zero(void){return test("%-00s", s_hidden);}
163: int notrequired_s_undefbehav_0_zero_lj_zero(void){return test("%0-0s", s_hidden);}
164: int notrequired_s_undefbehav_0_2zero_lj(void){return test("%00-s", s_hidden);}
165: int notrequired_s_undefbehav_0_width_3(void){return test("%03s", s_hidden);}
166: int notrequired_s_undefbehav_0_width_9(void){return test("%09s", s_hidden);}
167: int notrequired_s_undefbehav_as_0_width_3(void){return test("%+03s", s_hidden);}
168: int notrequired_s_undefbehav_as_0_width_9(void){return test("%+09s", s_hidden);}
169: int notrequired_s_undefbehav_lj_0_width_3(void){return test("%-03s", s_hidden);}
170: int notrequired_s_undefbehav_lj_0_width_9(void){return test("%-09s", s_hidden);}
171: int notrequired_s_undefbehav_as_sp_width_3(void){return test("%+ 3s", s_hidden);}
172: int notrequired_s_undefbehav_as_sp_width_6(void){return test("%+ 6s", s_hidden);}
174: int notrequired_p_ftfc_literal_9w_prec2_undefbehav(void){return test("%9.2p\n", 1234);}
175: int notrequired_p_ftfc_literal_2w_prec9_undefbehav(void){return test("%2.9p\n", 1234);}
176: int notrequired_p_ftfc_zero_prec5_undefbehav(void){return test("%.5p", 0);}
177: int notrequired_p_ftfc_zero_prec0_undefbehav(void){return test("%.0p", 0);}
498: int nocrash_notrequired_noarg_1(void){return test("%1$"); }
499: int nocrash_notrequired_noarg_2(void){return test("%0"); }
500: int nocrash_notrequired_noarg_3(void){return test("% "); }
501: int nocrash_notrequired_noarg_5(void){return test("%-"); }
502: int nocrash_notrequired_noarg_6(void){return test("%+"); }
503: int nocrash_notrequired_noarg_9(void){return test("%23"); }
504: int nocrash_notrequired_noarg_10(void){return test("%."); }
505: int nocrash_notrequired_noarg_16(void){return test("%p"); }
506: int nocrash_notrequired_noarg_17(void){return test("%d"); }
507: int nocrash_notrequired_noarg_19(void){return test("%u"); }
508: int nocrash_notrequired_noarg_20(void){return test("%x"); }
509: int nocrash_notrequired_noarg_21(void){return test("%X"); }
510: int nocrash_notrequired_noarg_22(void){return test("%f"); }
511: int nocrash_notrequired_noarg_24(void){return test("%c"); }
512: int nocrash_notrequired_noarg_25(void){return test("%o"); }
513: int nocrash_notrequired_nullarg_1(void){return test("%1$s", NULL); }
514: int nocrash_notrequired_nullarg_2(void){return test("%0s", NULL); }
515: int nocrash_notrequired_nullarg_3(void){return test("% s", NULL); }
516: int nocrash_notrequired_nullarg_5(void){return test("%-s", NULL); }
517: int nocrash_notrequired_nullarg_6(void){return test("%+s", NULL); }
518: int nocrash_notrequired_nullarg_9(void){return test("%23s", NULL); }
519: int nocrash_notrequired_nullarg_10(void){return test("%.s", NULL); }
520: int nocrash_notrequired_nullarg_16(void){return test("%p", NULL); }
521: int nocrash_notrequired_nullarg_17(void){return test("%d", NULL); }
522: int nocrash_notrequired_nullarg_18(void){return test("%b", NULL); }
523: int nocrash_notrequired_nullarg_19(void){return test("%u", NULL); }
524: int nocrash_notrequired_nullarg_20(void){return test("%x", NULL); }
525: int nocrash_notrequired_nullarg_21(void){return test("%X", NULL); }
526: int nocrash_notrequired_nullarg_22(void){return test("%f", NULL); }
527: int nocrash_notrequired_nullarg_23(void){return test("%s", NULL); }
528: int nocrash_notrequired_nullarg_24(void){return test("%c", NULL); }
529: int nocrash_notrequired_nullarg_25(void){return test("%o", NULL); }
530: int nocrash_notrequired_dupflag_d_ljljw(void){return test("%--5d", 42);}
531: int nocrash_notrequired_c_prec_1(void){return test("%.4c", 'a');}
532: int nocrash_notrequired_c_prec_2(void){return test("%.c", 'a');}
533: int nocrash_notrequired_c_zp_1(void){return test("%05c", 'a');}
534: int nocrash_notrequired_c_zp_2(void){return test("%0c", 'a');}
535: int nocrash_notrequired_c_lj_nowidth(void){return test("%-c", 'a');}
536: int nocrash_notrequired_s_zp_1(void){return test("%05s", "hello");}
537: int nocrash_notrequired_s_zp_2(void){return test("%0s", "hello");}
538: int nocrash_notrequired_s_lj_nowidth(void){return test("%-s", "hello");}
539: int nocrash_notrequired_p_prec_1(void){return test("%.4p", &ncm_p);}
540: int nocrash_notrequired_p_prec_2(void){return test("%.p", &ncm_p);}
541: int nocrash_notrequired_p_zp_1(void){return test("%05p", &ncm_p);}
542: int nocrash_notrequired_p_zp_2(void){return test("%0p", &ncm_p);}
543: int nocrash_notrequired_p_lj_nowidth(void){return test("%-p", &ncm_p);}
544: int nocrash_notrequired_i_lj_nowidth(void){return test("%-i", 42);}
545: int nocrash_notrequired_u_lj_nowidth(void){return test("%-u", 42);}
546: int nocrash_notrequired_x_lj_nowidth(void){return test("%-x", 42);}
547: int nocrash_notrequired_f_lj_nowidth(void){return test("%-f", 42.5);}
770: int bonus_as_d_pos(void){return test("%+d", 5);}
771: int bonus_as_d_neg(void){return test("%+d", -7);}
772: int bonus_as_d_intmax(void){return test("%+d", 2147483647);}
773: int bonus_as_d_prec_pos(void){return test("%+.7d", 234);}
774: int bonus_as_d_prec_neg(void){return test("%+.7d", -446);}
775: int bonus_as_d_prec_pos_nofit(void){return test("%+.3d", 3723);}
776: int bonus_as_d_width_pos(void){return test("%+5d", 35);}
777: int bonus_as_d_width_zero(void){return test("%+7d", 0);}
778: int bonus_as_d_width_intmax(void){return test("%+24d", 2147483647);}
779: int bonus_as_d_zp_fits(void){return test("%+05d", 432);}
780: int bonus_as_d_zp_zero(void){return test("%+04d", 0);}
781: int bonus_as_d_prec0val0(void){return test("%+.0d", 0);}
782: int bonus_as_d_prec0val0_impl(void){return test("%+.d", 0);}
783: int bonus_as_d_prec_width_fit_fit_pos(void){return test("%+8.5d", 34);}
784: int bonus_as_d_prec_width_fit_fit_neg(void){return test("%+10.5d", -216);}
785: int bonus_as_d_prec_width_fit_fit_zero(void){return test("%+8.5d", 0);}
786: int bonus_as_d_prec_width_nofit_fit_pos(void){return test("%+8.3d", 8375);}
787: int bonus_as_d_prec_width_nofit_fit_neg(void){return test("%+8.3d", -8473);}
788: int bonus_as_d_prec_width_fit_nofit_pos(void){return test("%+3.7d", 3267);}
789: int bonus_as_d_prec_width_fit_nofit_neg(void){return test("%+3.7d", -2375);}
790: int bonus_as_d_prec_width_nofit_nofit_pos(void){return test("%+3.3d", 6983);}
791: int bonus_as_d_prec_width_nofit_nofit_neg(void){return test("%+3.3d", -8462);}
792: int bonus_as_d_prec_width_fit_fit_pos_ljas(void){return test("%+-8.5d", 34);}
793: int bonus_as_d_prec_width_fit_fit_neg_ljas(void){return test("%+-10.5d", -216);}
794: int bonus_as_d_prec_width_fit_fit_zero_ljas(void){return test("%+-8.5d", 0);}
795: int bonus_as_d_prec_width_nofit_fit_pos_ljas(void){return test("%+-8.3d", 8375);}
796: int bonus_as_d_prec_width_nofit_fit_neg_ljas(void){return test("%+-8.3d", -8473);}
797: int bonus_as_d_prec_width_fit_nofit_pos_ljas(void){return test("%+-3.7d", 3267);}
798: int bonus_as_d_prec_width_fit_nofit_neg_ljas(void){return test("%+-3.7d", -2375);}
799: int bonus_as_d_prec_width_nofit_nofit_pos_ljas(void){return test("%+-3.3d", 6983);}
800: int bonus_as_d_prec_width_nofit_nofit_neg_ljas(void){return test("%+-3.3d", -8462);}
801: int bonus_as_d_prec_width_ff_pos_zp(void){return test("%0+8.5d", 34);}
802: int bonus_as_d_prec_width_ff_neg_zp(void){return test("%0+10.5d", -216);}
803: int bonus_as_d_prec_width_ff_zero_zp(void){return test("%0+8.5d", 0);}
804: int bonus_as_d_prec_width_nf_pos_zp(void){return test("%0+8.3d", 8375);}
805: int bonus_as_d_prec_width_nf_neg_zp(void){return test("%0+8.3d", -8473);}
806: int bonus_as_d_prec_width_fn_pos_zp(void){return test("%0+3.7d", 3267);}
807: int bonus_as_d_prec_width_fn_neg_zp(void){return test("%0+3.7d", -2375);}
808: int bonus_as_d_prec_width_nn_pos_zp(void){return test("%0+3.3d", 6983);}
809: int bonus_as_d_prec_width_nn_neg_zp(void){return test("%0+3.3d", -8462);}
810: int bonus_as_d_prec_width_ff_pos_ljaszp_ignoreflag(void){return test("%0+-8.5d", 34);}
811: int bonus_as_d_prec_width_ff_neg_ljaszp_ignoreflag(void){return test("%0+-10.5d", -216);}
812: int bonus_as_d_prec_width_ff_zero_ljaszp_ignoreflag(void){return test("%0+-8.5d", 0);}
813: int bonus_as_d_prec_width_nf_pos_ljaszp_ignoreflag(void){return test("%0+-8.3d", 8375);}
814: int bonus_as_d_prec_width_nf_neg_ljaszp_ignoreflag(void){return test("%0+-8.3d", -8473);}
815: int bonus_as_d_prec_width_fn_pos_ljaszp_ignoreflag(void){return test("%0+-3.7d", 3267);}
816: int bonus_as_d_prec_width_fn_neg_ljaszp_ignoreflag(void){return test("%0+-3.7d", -2375);}
817: int bonus_as_d_prec_width_nn_pos_ljaszp_ignoreflag(void){return test("%0+-3.3d", 6983);}
818: int bonus_as_d_prec_width_nn_neg_ljaszp_ignoreflag(void){return test("%0+-3.3d", -8462);}
819: int bonus_as_i_pos(void){return test("%+i", 5);}
820: int bonus_as_i_neg(void){return test("%+i", -7);}
821: int bonus_as_i_intmax(void){return test("%+i", 2147483647);}
822: int bonus_as_i_zp_fits(void){return test("%+05i", 432);}
823: int bonus_as_i_zp_zero(void){return test("%+04i", 0);}
824: int bonus_as_i_width_pos(void){return test("%+5i", 35);}
825: int bonus_as_i_width_zero(void){return test("%+7i", 0);}
826: int bonus_as_i_width_intmax(void){return test("%+24i", 2147483647);}
827: int bonus_as_i_prec_pos(void){return test("%+.7i", 234);}
828: int bonus_as_i_prec_neg(void){return test("%+.7i", -446);}
829: int bonus_as_i_prec_pos_nofit(void){return test("%+.3i", 3723);}
830: int bonus_as_i_prec0val0(void){return test("%+.0i", 0);}
831: int bonus_as_i_prec0val0_impl(void){return test("%+.i", 0);}
832: int bonus_as_i_prec0val0_was(void){return test("%+5.0i", 0);}
833: int bonus_as_i_prec0val0_was_impl(void){return test("%+5.i", 0);}
834: int bonus_as_i_prec0val0_waslj(void){return test("%+-5.0i", 0);}
835: int bonus_as_i_prec0val0_waslj_impl(void){return test("%+-5.i", 0);}
836: int bonus_as_i_prec_width_fit_fit_pos(void){return test("%+8.5i", 34);}
837: int bonus_as_i_prec_width_fit_fit_neg(void){return test("%+10.5i", -216);}
838: int bonus_as_i_prec_width_fit_fit_zero(void){return test("%+8.5i", 0);}
839: int bonus_as_i_prec_width_nofit_fit_pos(void){return test("%+8.3i", 8375);}
840: int bonus_as_i_prec_width_nofit_fit_neg(void){return test("%+8.3i", -8473);}
841: int bonus_as_i_prec_width_fit_nofit_pos(void){return test("%+3.7i", 3267);}
842: int bonus_as_i_prec_width_fit_nofit_neg(void){return test("%+3.7i", -2375);}
843: int bonus_as_i_prec_width_nofit_nofit_pos(void){return test("%+3.3i", 6983);}
844: int bonus_as_i_prec_width_nofit_nofit_neg(void){return test("%+3.3i", -8462);}
845: int bonus_as_i_prec_width_ff_pos_zp(void){return test("%0+8.5i", 34);}
846: int bonus_as_i_prec_width_ff_neg_zp(void){return test("%0+10.5i", -216);}
847: int bonus_as_i_prec_width_ff_zero_zp(void){return test("%0+8.5i", 0);}
848: int bonus_as_i_prec_width_nf_pos_zp(void){return test("%0+8.3i", 8375);}
849: int bonus_as_i_prec_width_nf_neg_zp(void){return test("%0+8.3i", -8473);}
850: int bonus_as_i_prec_width_fn_pos_zp(void){return test("%0+3.7i", 3267);}
851: int bonus_as_i_prec_width_fn_neg_zp(void){return test("%0+3.7i", -2375);}
852: int bonus_as_i_prec_width_nn_pos_zp(void){return test("%0+3.3i", 6983);}
853: int bonus_as_i_prec_width_nn_neg_zp(void){return test("%0+3.3i", -8462);}
854: int bonus_as_i_prec_width_fit_fit_pos_ljas(void){return test("%+-8.5i", 34);}
855: int bonus_as_i_prec_width_fit_fit_neg_ljas(void){return test("%+-10.5i", -216);}
856: int bonus_as_i_prec_width_fit_fit_zero_ljas(void){return test("%+-8.5i", 0);}
857: int bonus_as_i_prec_width_nofit_fit_pos_ljas(void){return test("%+-8.3i", 8375);}
858: int bonus_as_i_prec_width_nofit_fit_neg_ljas(void){return test("%+-8.3i", -8473);}
859: int bonus_as_i_prec_width_fit_nofit_pos_ljas(void){return test("%+-3.7i", 3267);}
860: int bonus_as_i_prec_width_fit_nofit_neg_ljas(void){return test("%+-3.7i", -2375);}
861: int bonus_as_i_prec_width_nofit_nofit_pos_ljas(void){return test("%+-3.3i", 6983);}
862: int bonus_as_i_prec_width_nofit_nofit_neg_ljas(void){return test("%+-3.3i", -8462);}
863: int bonus_as_i_prec_width_ff_pos_ljaszp_ignoreflag(void){return test("%0+-8.5i", 34);}
864: int bonus_as_i_prec_width_ff_neg_ljaszp_ignoreflag(void){return test("%0+-10.5i", -216);}
865: int bonus_as_i_prec_width_ff_zero_ljaszp_ignoreflag(void){return test("%0+-8.5i", 0);}
866: int bonus_as_i_prec_width_nf_pos_ljaszp_ignoreflag(void){return test("%0+-8.3i", 8375);}
867: int bonus_as_i_prec_width_nf_neg_ljaszp_ignoreflag(void){return test("%0+-8.3i", -8473);}
868: int bonus_as_i_prec_width_fn_pos_ljaszp_ignoreflag(void){return test("%0+-3.7i", 3267);}
869: int bonus_as_i_prec_width_fn_neg_ljaszp_ignoreflag(void){return test("%0+-3.7i", -2375);}
870: int bonus_as_i_prec_width_nn_pos_ljaszp_ignoreflag(void){return test("%0+-3.3i", 6983);}
871: int bonus_as_i_prec_width_nn_neg_ljaszp_ignoreflag(void){return test("%0+-3.3i", -8462);}
872: int nocrash_notrequired_bonus_as_dupflag_d(void){return test("%++d", 42);}
873: int nocrash_notrequired_bonus_as_dupflag_d_ljasljw(void){return test("%-+-5d", 42);}
874: int nocrash_notrequired_bonus_as_c_1(void){return test("%+c", 'a');}
875: int nocrash_notrequired_bonus_as_c_2(void){return test("%+c", -42);}
876: int nocrash_notrequired_bonus_as_s_1(void){return test("%+s", "hello");}
877: int nocrash_notrequired_bonus_as_p_1(void){return test("%+p", &ncm_p);}
878: int nocrash_notrequired_bonus_as_p_2(void){return test("%+p", &ncm_p);}
879: int nocrash_notrequired_bonus_as_u(void){return test("%+u", 42);}
880: int nocrash_notrequired_bonus_as_x(void){return test("%+x", 42);}
881: int nocrash_notrequired_bonus_as_X(void){return test("%+X", 42);}
882: int bonus_sp_d_basic_i_pos(void){return test("this % d number", 17);}
883: int bonus_sp_d_basic_i_neg(void){return test("this % d number", -267);}
884: int bonus_sp_d_basic_i_zero(void){return test("this % d number", 0);}
885: int bonus_sp_d_basic_i_onlypos(void){return test("% d", 3);}
886: int bonus_sp_d_basic_i_onlyneg(void){return test("% d", -1);}
887: int bonus_sp_d_basic_i_onlyzero(void){return test("% d", 0);}
888: int bonus_sp_d_basic_i_pos_d(void){return test("this % d number", 17);}
889: int bonus_sp_d_basic_i_neg_d(void){return test("this % d number", -267);}
890: int bonus_sp_d_basic_i_zero_d(void){return test("this % d number", 0);}
891: int bonus_sp_d_intmax(void){return test("% d", 2147483647);}
892: int bonus_sp_d_intmin(void){return test("% d", (int)(-2147483678));}
893: int bonus_sp_d_width_pos_fits(void){return test("% 7d", 33);}
894: int bonus_sp_d_width_neg_fits(void){return test("% 7d", -14);}
895: int bonus_sp_d_width_zero_fits(void){return test("% 3d", 0);}
896: int bonus_sp_d_width_pos_exactfit(void){return test("% 5d", 52625);}
897: int bonus_sp_d_width_neg_exactfit(void){return test("% 5d", -2562);}
898: int bonus_sp_d_width_pos_nofit(void){return test("% 4d", 94827);}
899: int bonus_sp_d_width_neg_nofit(void){return test("% 4d", -2464);}
900: int bonus_sp_d_width_pos_fits_lj(void){return test("% -7d", 33);}
901: int bonus_sp_d_width_neg_fits_lj(void){return test("% -7d", -14);}
902: int bonus_sp_d_width_zero_fits_lj(void){return test("% -3d", 0);}
903: int bonus_sp_d_width_pos_exactfit_lj(void){return test("% -5d", 52625);}
904: int bonus_sp_d_width_neg_exactfit_lj(void){return test("% -5d", -2562);}
905: int bonus_sp_d_width_pos_nofit_lj(void){return test("% -4d", 94827);}
906: int bonus_sp_d_width_neg_nofit_lj(void){return test("% -4d", -2464);}
907: int bonus_sp_d_prec_fits_pos(void){return test("% .5d", 2);}
908: int bonus_sp_d_prec_fits_neg(void){return test("% .6d", -3);}
909: int bonus_sp_d_prec_fits_zero(void){return test("% .3d", 0);}
910: int bonus_sp_d_prec_exactfit_pos(void){return test("% .4d", 5263);}
911: int bonus_sp_d_prec_exactfit_neg(void){return test("% .4d", -2372);}
912: int bonus_sp_d_prec_nofit_pos(void){return test("% .3d", 13862);}
913: int bonus_sp_d_prec_nofit_neg(void){return test("% .3d",-23646);}
914: int bonus_sp_d_zpsp_pos_fits(void){return test("% 05d", 43);}
915: int bonus_sp_d_zpsp_neg_fits(void){return test("% 07d", -54);}
916: int bonus_sp_d_zpsp_zero_fits(void){return test("% 03d", 0);}
917: int bonus_sp_d_zpsp_pos_exactfit(void){return test("% 03d", 634);}
918: int bonus_sp_d_zpsp_neg_exactfit(void){return test("% 04d", -532);}
919: int bonus_sp_d_zpsp_neg_minus1fit(void){return test("% 04d", -4825);}
920: int bonus_sp_d_prec_width_fit_fit_pos(void){return test("% 8.5d", 34);}
921: int bonus_sp_d_prec_width_fit_fit_neg(void){return test("% 10.5d", -216);}
922: int bonus_sp_d_prec_width_fit_fit_zero(void){return test("% 8.5d", 0);}
923: int bonus_sp_d_prec_width_nofit_fit_pos(void){return test("% 8.3d", 8375);}
924: int bonus_sp_d_prec_width_nofit_fit_neg(void){return test("% 8.3d", -8473);}
925: int bonus_sp_d_prec_width_fit_nofit_pos(void){return test("% 3.7d", 3267);}
926: int bonus_sp_d_prec_width_fit_nofit_neg(void){return test("% 3.7d", -2375);}
927: int bonus_sp_d_prec_width_nofit_nofit_pos(void){return test("% 3.3d", 6983);}
928: int bonus_sp_d_prec_width_nofit_nofit_neg(void){return test("% 3.3d", -8462);}
929: int bonus_sp_d_prec_width_fit_fit_pos_lj(void){return test("% -8.5d", 34);}
930: int bonus_sp_d_prec_width_fit_fit_neg_lj(void){return test("% -10.5d", -216);}
931: int bonus_sp_d_prec_width_fit_fit_zero_lj(void){return test("% -8.5d", 0);}
932: int bonus_sp_d_prec_width_nofit_fit_pos_lj(void){return test("% -8.3d", 8375);}
933: int bonus_sp_d_prec_width_nofit_fit_neg_lj(void){return test("% -8.3d", -8473);}
934: int bonus_sp_d_prec_width_fit_nofit_pos_lj(void){return test("% -3.7d", 3267);}
935: int bonus_sp_d_prec_width_fit_nofit_neg_lj(void){return test("% -3.7d", -2375);}
936: int bonus_sp_d_prec_width_nofit_nofit_pos_lj(void){return test("% -3.3d", 6983);}
937: int bonus_sp_d_prec_width_nofit_nofit_neg_lj(void){return test("% -3.3d", -8462);}
938: int bonus_sp_d_prec_width_ff_pos_zp(void){return test("% 08.5d", 34);}
939: int bonus_sp_d_prec_width_ff_neg_zp(void){return test("% 010.5d", -216);}
940: int bonus_sp_d_prec_width_ff_zero_zp(void){return test("% 08.5d", 0);}
941: int bonus_sp_d_prec_width_nf_pos_zp(void){return test("% 08.3d", 8375);}
942: int bonus_sp_d_prec_width_nf_neg_zp(void){return test("% 08.3d", -8473);}
943: int bonus_sp_d_prec_width_fn_pos_zp(void){return test("% 03.7d", 3267);}
944: int bonus_sp_d_prec_width_fn_neg_zp(void){return test("% 03.7d", -2375);}
945: int bonus_sp_d_prec_width_nn_pos_zp(void){return test("% 03.3d", 6983);}
946: int bonus_sp_d_prec_width_nn_neg_zp(void){return test("% 03.3d", -8462);}
947: int bonus_sp_d_prec_width_ff_pos_ljzpsp_ignoreflag(void){return test("% 0-8.5d", 34);}
948: int bonus_sp_d_prec_width_ff_neg_ljzpsp_ignoreflag(void){return test("% 0-10.5d", -216);}
949: int bonus_sp_d_prec_width_ff_zero_ljzpsp_ignoreflag(void){return test("% 0-8.5d", 0);}
950: int bonus_sp_d_prec_width_nf_pos_ljzpsp_ignoreflag(void){return test("% 0-8.3d", 8375);}
951: int bonus_sp_d_prec_width_nf_neg_ljzpsp_ignoreflag(void){return test("% 0-8.3d", -8473);}
952: int bonus_sp_d_prec_width_fn_pos_ljzpsp_ignoreflag(void){return test("% 0-3.7d", 3267);}
953: int bonus_sp_d_prec_width_fn_neg_ljzpsp_ignoreflag(void){return test("% 0-3.7d", -2375);}
954: int bonus_sp_d_prec_width_nn_pos_ljzpsp_ignoreflag(void){return test("% 0-3.3d", 6983);}
955: int bonus_sp_d_prec_width_nn_neg_ljzpsp_ignoreflag(void){return test("% 0-3.3d", -8462);}
956: int bonus_sp_i_basic_i_pos(void){return test("this % i number", 17);}
957: int bonus_sp_i_basic_i_neg(void){return test("this % i number", -267);}
958: int bonus_sp_i_basic_i_zero(void){return test("this % i number", 0);}
959: int bonus_sp_i_basic_i_onlypos(void){return test("% i", 3);}
960: int bonus_sp_i_basic_i_onlyneg(void){return test("% i", -1);}
961: int bonus_sp_i_basic_i_onlyzero(void){return test("% i", 0);}
962: int bonus_sp_i_basic_i_pos_d(void){return test("this % d number", 17);}
963: int bonus_sp_i_basic_i_neg_d(void){return test("this % d number", -267);}
964: int bonus_sp_i_basic_i_zero_d(void){return test("this % d number", 0);}
965: int bonus_sp_i_intmax(void){return test("% i", 2147483647);}
966: int bonus_sp_i_intmin(void){return test("% i", (int)(-2147483678));}
967: int bonus_sp_i_width_pos_fits(void){return test("% 7i", 33);}
968: int bonus_sp_i_width_neg_fits(void){return test("% 7i", -14);}
969: int bonus_sp_i_width_zero_fits(void){return test("% 3i", 0);}
970: int bonus_sp_i_width_pos_exactfit(void){return test("% 5i", 52625);}
971: int bonus_sp_i_width_neg_exactfit(void){return test("% 5i", -2562);}
972: int bonus_sp_i_width_pos_nofit(void){return test("% 4i", 94827);}
973: int bonus_sp_i_width_neg_nofit(void){return test("% 4i", -2464);}
974: int bonus_sp_i_width_pos_fits_lj(void){return test("% -7i", 33);}
975: int bonus_sp_i_width_neg_fits_lj(void){return test("% -7i", -14);}
976: int bonus_sp_i_width_zero_fits_lj(void){return test("% -3i", 0);}
977: int bonus_sp_i_width_pos_exactfit_lj(void){return test("% -5i", 52625);}
978: int bonus_sp_i_width_neg_exactfit_lj(void){return test("% -5i", -2562);}
979: int bonus_sp_i_width_pos_nofit_lj(void){return test("% -4i", 94827);}
980: int bonus_sp_i_width_neg_nofit_lj(void){return test("% -4i", -2464);}
981: int bonus_sp_i_prec_fits_pos(void){return test("% .5i", 2);}
982: int bonus_sp_i_prec_fits_neg(void){return test("% .6i", -3);}
983: int bonus_sp_i_prec_fits_zero(void){return test("% .3i", 0);}
984: int bonus_sp_i_prec_exactfit_pos(void){return test("% .4i", 5263);}
985: int bonus_sp_i_prec_exactfit_neg(void){return test("% .4i", -2372);}
986: int bonus_sp_i_prec_nofit_pos(void){return test("% .3i", 13862);}
987: int bonus_sp_i_prec_nofit_neg(void){return test("% .3i",-23646);}
988: int bonus_sp_i_zpsp_pos_fits(void){return test("% 05i", 43);}
989: int bonus_sp_i_zpsp_neg_fits(void){return test("% 07i", -54);}
990: int bonus_sp_i_zpsp_zero_fits(void){return test("% 03i", 0);}
991: int bonus_sp_i_zpsp_pos_exactfit(void){return test("% 03i", 634);}
992: int bonus_sp_i_zpsp_neg_exactfit(void){return test("% 04i", -532);}
993: int bonus_sp_i_zpsp_neg_minus1fit(void){return test("% 04i", -4825);}
994: int bonus_sp_i_prec_width_fit_fit_pos(void){return test("% 8.5i", 34);}
995: int bonus_sp_i_prec_width_fit_fit_neg(void){return test("% 10.5i", -216);}
996: int bonus_sp_i_prec_width_fit_fit_zero(void){return test("% 8.5i", 0);}
997: int bonus_sp_i_prec_width_nofit_fit_pos(void){return test("% 8.3i", 8375);}
998: int bonus_sp_i_prec_width_nofit_fit_neg(void){return test("% 8.3i", -8473);}
999: int bonus_sp_i_prec_width_fit_nofit_pos(void){return test("% 3.7i", 3267);}
1000: int bonus_sp_i_prec_width_fit_nofit_neg(void){return test("% 3.7i", -2375);}
1001: int bonus_sp_i_prec_width_nofit_nofit_pos(void){return test("% 3.3i", 6983);}
1002: int bonus_sp_i_prec_width_nofit_nofit_neg(void){return test("% 3.3i", -8462);}
1003: int bonus_sp_i_prec_width_fit_fit_pos_lj(void){return test("% -8.5i", 34);}
1004: int bonus_sp_i_prec_width_fit_fit_neg_lj(void){return test("% -10.5i", -216);}
1005: int bonus_sp_i_prec_width_fit_fit_zero_lj(void){return test("% -8.5i", 0);}
1006: int bonus_sp_i_prec_width_nofit_fit_pos_lj(void){return test("% -8.3i", 8375);}
1007: int bonus_sp_i_prec_width_nofit_fit_neg_lj(void){return test("% -8.3i", -8473);}
1008: int bonus_sp_i_prec_width_fit_nofit_pos_lj(void){return test("% -3.7i", 3267);}
1009: int bonus_sp_i_prec_width_fit_nofit_neg_lj(void){return test("% -3.7i", -2375);}
1010: int bonus_sp_i_prec_width_nofit_nofit_pos_lj(void){return test("% -3.3i", 6983);}
1011: int bonus_sp_i_prec_width_nofit_nofit_neg_lj(void){return test("% -3.3i", -8462);}
1012: int bonus_sp_i_prec_width_ff_pos_zp(void){return test("% 08.5i", 34);}
1013: int bonus_sp_i_prec_width_ff_neg_zp(void){return test("% 010.5i", -216);}
1014: int bonus_sp_i_prec_width_ff_zero_zp(void){return test("% 08.5i", 0);}
1015: int bonus_sp_i_prec_width_nf_pos_zp(void){return test("% 08.3i", 8375);}
1016: int bonus_sp_i_prec_width_nf_neg_zp(void){return test("% 08.3i", -8473);}
1017: int bonus_sp_i_prec_width_fn_pos_zp(void){return test("% 03.7i", 3267);}
1018: int bonus_sp_i_prec_width_fn_neg_zp(void){return test("% 03.7i", -2375);}
1019: int bonus_sp_i_prec_width_nn_pos_zp(void){return test("% 03.3i", 6983);}
1020: int bonus_sp_i_prec_width_nn_neg_zp(void){return test("% 03.3i", -8462);}
1021: int bonus_sp_i_prec_width_ff_pos_ljzpsp_ignoreflag(void){return test("% 0-8.5i", 34);}
1022: int bonus_sp_i_prec_width_ff_neg_ljzpsp_ignoreflag(void){return test("% 0-10.5i", -216);}
1023: int bonus_sp_i_prec_width_ff_zero_ljzpsp_ignoreflag(void){return test("% 0-8.5i", 0);}
1024: int bonus_sp_i_prec_width_nf_pos_ljzpsp_ignoreflag(void){return test("% 0-8.3i", 8375);}
1025: int bonus_sp_i_prec_width_nf_neg_ljzpsp_ignoreflag(void){return test("% 0-8.3i", -8473);}
1026: int bonus_sp_i_prec_width_fn_pos_ljzpsp_ignoreflag(void){return test("% 0-3.7i", 3267);}
1027: int bonus_sp_i_prec_width_fn_neg_ljzpsp_ignoreflag(void){return test("% 0-3.7i", -2375);}
1028: int bonus_sp_i_prec_width_nn_pos_ljzpsp_ignoreflag(void){return test("% 0-3.3i", 6983);}
1029: int bonus_sp_i_prec_width_nn_neg_ljzpsp_ignoreflag(void){return test("% 0-3.3i", -8462);}
1030: int nocrash_notrequired_bonus_sp_dupflag_d(void){return test("%  d", 42);}
1031: int nocrash_notrequired_bonus_sp_c_1(void){return test("% c", 'a');}
1032: int nocrash_notrequired_bonus_sp_c_2(void){return test("% c", -42);}
1033: int nocrash_notrequired_bonus_sp_s_1(void){return test("% s", "hello");}
1034: int nocrash_notrequired_bonus_sp_p_1(void){return test("% p", &ncm_p);}
1035: int nocrash_notrequired_bonus_sp_p_2(void){return test("% p", &ncm_p);}
1036: int nocrash_notrequired_bonus_sp_u(void){return test("% u", 42);}
1037: int nocrash_notrequired_bonus_sp_x(void){return test("% x", 42);}
1038: int nocrash_notrequired_bonus_sp_X(void){return test("% X", 42);}
1039: int bonus_af_x_basic_pos(void){return test("this %#x number", 17);}
1040: int bonus_af_x_basic_zero(void){return test("this %#x number", 0);}
1041: int bonus_af_x_basic_onlypos(void){return test("%#x", 3);}
1042: int bonus_af_x_hexlmax(void){return test("%#x", 4294967295u);}
1043: int bonus_af_x_width_pos_fits(void){return test("%#7x", 33);}
1044: int bonus_af_x_width_zero_fits(void){return test("%#3x", 0);}
1045: int bonus_af_x_width_pos_exactfit(void){return test("%#5x", 52625);}
1046: int bonus_af_x_width_pos_nofit(void){return test("%#2x", 94827);}
1047: int bonus_af_x_width_pos_fits_lj(void){return test("%#-7x", 33);}
1048: int bonus_af_x_width_zero_fits_lj(void){return test("%#-3x", 0);}
1049: int bonus_af_x_width_pos_exactfit_lj(void){return test("%#-5x", 52625);}
1050: int bonus_af_x_width_pos_nofit_lj(void){return test("%#-4x", 9648627);}
1051: int bonus_af_x_prec_fits_pos(void){return test("%#.5x", 21);}
1052: int bonus_af_x_prec_fits_zero(void){return test("%#.3x", 0);}
1053: int bonus_af_x_prec_exactfit_pos(void){return test("%#.4x", 5263);}
1054: int bonus_af_x_prec_nofit_pos(void){return test("%#.3x", 938862);}
1055: int bonus_af_x_prec0val0(void){return test("%#.0x", 0);}
1056: int bonus_af_x_prec0val0_impl(void){return test("%#.x", 0);}
1057: int bonus_af_x_prec0val0_waf(void){return test("%#5.0x", 0);}
1058: int bonus_af_x_prec0val0_waf_impl(void){return test("%#5.x", 0);}
1059: int bonus_af_x_prec0val0_waflj(void){return test("%#-5.0x", 0);}
1060: int bonus_af_x_prec0val0_waflj_impl(void){return test("%#-5.x", 0);}
1061: int bonus_af_x_zp_pos_fits(void){return test("%#05x", 43);}
1062: int bonus_af_x_zp_zero_fits(void){return test("%#03x", 0);}
1063: int bonus_af_x_zp_pos_exactfit(void){return test("%#03x", 698334);}
1064: int bonus_af_x_prec_width_fit_fit_pos(void){return test("%#8.5x", 34);}
1065: int bonus_af_x_prec_width_fit_fit_zero(void){return test("%#8.5x", 0);}
1066: int bonus_af_x_prec_width_nofit_fit_pos(void){return test("%#8.3x", 8375);}
1067: int bonus_af_x_prec_width_fit_nofit_pos(void){return test("%#2.7x", 3267);}
1068: int bonus_af_x_prec_width_nofit_nofit_pos(void){return test("%#3.3x", 6983);}
1069: int bonus_af_x_prec_width_fit_fit_pos_lj(void){return test("%#-8.5x", 34);}
1070: int bonus_af_x_prec_width_fit_fit_zero_lj(void){return test("%#-8.5x", 0);}
1071: int bonus_af_x_prec_width_nofit_fit_pos_lj(void){return test("%#-8.3x", 8375);}
1072: int bonus_af_x_prec_width_fit_nofit_pos_lj(void){return test("%#-2.7x", 3267);}
1073: int bonus_af_x_prec_width_nofit_nofit_pos_lj(void){return test("%#-3.3x", 6983);}
1074: int bonus_af_x_prec_width_ff_pos_zp(void){return test("%#08.5x", 34);}
1075: int bonus_af_x_prec_width_ff_zero_zp(void){return test("%#08.5x", 0);}
1076: int bonus_af_x_prec_width_nf_pos_zp(void){return test("%#08.3x", 8375);}
1077: int bonus_af_x_prec_width_fn_pos_zp(void){return test("%#02.7x", 3267);}
1078: int bonus_af_x_prec_width_nn_pos_zp(void){return test("%#03.3x", 6983);}
1079: int bonus_af_x_prec_width_ff_pos_ljzpaf_ignoreflag(void){return test("%#0-8.5x", 34);}
1080: int bonus_af_x_prec_width_ff_zero_ljzpaf_ignoreflag(void){return test("%#0-8.5x", 0);}
1081: int bonus_af_x_prec_width_nf_pos_ljzpaf_ignoreflag(void){return test("%#0-8.3x", 8375);}
1082: int bonus_af_x_prec_width_fn_pos_ljzpaf_ignoreflag(void){return test("%#0-2.7x", 3267);}
1083: int bonus_af_x_prec_width_nn_pos_ljzpaf_ignoreflag(void){return test("%#0-3.3x", 6983);}
1084: int bonus_af_X_basic_hexu_pos(void){return test("this %#X number", 17);}
1085: int bonus_af_X_basic_hexu_zero(void){return test("this %#X number", 0);}
1086: int bonus_af_X_basic_hexu_onlypos(void){return test("%#X", 3);}
1087: int bonus_af_X_hexumax(void){return test("%#X", 4294967295u);}
1088: int bonus_af_X_width_pos_fits(void){return test("%#7X", 33);}
1089: int bonus_af_X_width_zero_fits(void){return test("%#3X", 0);}
1090: int bonus_af_X_width_pos_exactfit(void){return test("%#7X", 52625);}
1091: int bonus_af_X_width_pos_nofit(void){return test("%#2X", 94827);}
1092: int bonus_af_X_width_pos_fits_lj(void){return test("%#-7X", 33);}
1093: int bonus_af_X_width_zero_fits_lj(void){return test("%#-3X", 0);}
1094: int bonus_af_X_width_pos_exactfit_lj(void){return test("%#-7X", 52625);}
1095: int bonus_af_X_width_pos_nofit_lj(void){return test("%#-4X", 9648627);}
1096: int bonus_af_X_prec_fits_pos(void){return test("%#.5X", 21);}
1097: int bonus_af_X_prec_fits_zero(void){return test("%#.3X", 0);}
1098: int bonus_af_X_prec_exactfit_pos(void){return test("%#.4X", 5263);}
1099: int bonus_af_X_prec_nofit_pos(void){return test("%#.3X", 938862);}
1100: int bonus_af_X_prec0val0(void){return test("%#.0X", 0);}
1101: int bonus_af_X_prec0val0_impl(void){return test("%#.X", 0);}
1102: int bonus_af_X_prec0val0_waf(void){return test("%#5.0X", 0);}
1103: int bonus_af_X_prec0val0_waf_impl(void){return test("%#5.X", 0);}
1104: int bonus_af_X_prec0val0_waflj(void){return test("%#-5.0X", 0);}
1105: int bonus_af_X_prec0val0_waflj_impl(void){return test("%#-5.X", 0);}
1106: int bonus_af_X_zp_pos_fits(void){return test("%#05X", 43);}
1107: int bonus_af_X_zp_zero_fits(void){return test("%#03X", 0);}
1108: int bonus_af_X_zp_pos_exactfit(void){return test("%#03X", 698334);}
1109: int bonus_af_X_prec_width_fit_fit_pos(void){return test("%#8.5X", 34);}
1110: int bonus_af_X_prec_width_fit_fit_zero(void){return test("%#8.5X", 0);}
1111: int bonus_af_X_prec_width_nofit_fit_pos(void){return test("%#8.3X", 8375);}
1112: int bonus_af_X_prec_width_fit_nofit_pos(void){return test("%#2.7X", 3267);}
1113: int bonus_af_X_prec_width_nofit_nofit_pos(void){return test("%#3.3X", 6983);}
1114: int bonus_af_X_prec_width_fit_fit_pos_lj(void){return test("%#-8.5X", 34);}
1115: int bonus_af_X_prec_width_fit_fit_zero_lj(void){return test("%#-8.5X", 0);}
1116: int bonus_af_X_prec_width_nofit_fit_pos_lj(void){return test("%#-8.3X", 8375);}
1117: int bonus_af_X_prec_width_fit_nofit_pos_lj(void){return test("%#-2.7X", 3267);}
1118: int bonus_af_X_prec_width_nofit_nofit_pos_lj(void){return test("%#-3.3X", 6983);}
1119: int bonus_af_X_prec_width_ff_pos_zp(void){return test("%#08.5X", 34);}
1120: int bonus_af_X_prec_width_ff_zero_zp(void){return test("%#08.5X", 0);}
1121: int bonus_af_X_prec_width_nf_pos_zp(void){return test("%#08.3X", 8375);}
1122: int bonus_af_X_prec_width_fn_pos_zp(void){return test("%#02.7X", 3267);}
1123: int bonus_af_X_prec_width_nn_pos_zp(void){return test("%#03.3X", 6983);}
1124: int bonus_af_X_prec_width_ff_pos_ljzpaf_ignoreflag(void){return test("%#0-8.5X", 34);}
1125: int bonus_af_X_prec_width_ff_zero_ljzpaf_ignoreflag(void){return test("%#0-8.5X", 0);}
1126: int bonus_af_X_prec_width_nf_pos_ljzpaf_ignoreflag(void){return test("%#0-8.3X", 8375);}
1127: int bonus_af_X_prec_width_fn_pos_ljzpaf_ignoreflag(void){return test("%#0-2.7X", 3267);}
1128: int bonus_af_X_prec_width_nn_pos_ljzpaf_ignoreflag(void){return test("%#0-3.3X", 6983);}
1129: int nocrash_notrequired_bonus_af_noarg_4(void){return test("%#"); }
1130: int nocrash_notrequired_bonus_af_nullarg_4(void){return test("%#s", NULL); }
1131: int nocrash_notrequired_bonus_af_dupflag_x(void){return test("%##x", 42);}
1132: int nocrash_notrequired_bonus_af_dupflag_xasasljw(void){return test("%#++#-5x", 42);}
1133: int nocrash_notrequired_bonus_af_c(void){return test("%#c", 'a');}
1134: int nocrash_notrequired_bonus_af_s(void){return test("%#s", "hello");}
1135: int nocrash_notrequired_bonus_af_p(void){return test("%#p", &ncm_p);}
1136: int nocrash_notrequired_bonus_af_d(void){return test("%#d", 42);}
1137: int nocrash_notrequired_bonus_af_i(void){return test("%#i", 42);}
1138: int nocrash_notrequired_bonus_af_u(void){return test("%#u", 42);}
1139: int bonus_assp_d_pos_ignoreflag(void){return test("% +d", 5);}
1140: int bonus_assp_d_neg_ignoreflag(void){return test("% +d", -7);}
1141: int bonus_assp_d_intmax_ignoreflag(void){return test("% +d", 2147483647);}
1142: int bonus_assp_d_width_pos_ignoreflag(void){return test("% +5d", 35);}
1143: int bonus_assp_d_width_zero_ignoreflag(void){return test("% +7d", 0);}
1144: int bonus_assp_d_width_intmax_ignoreflag(void){return test("% +24d", 2147483647);}
1145: int bonus_assp_d_prec_pos_ignoreflag(void){return test("% +.7d", 234);}
1146: int bonus_assp_d_prec_neg_ignoreflag(void){return test("% +.7d", -446);}
1147: int bonus_assp_d_prec_pos_nofit_ignoreflag(void){return test("% +.3d", 3723);}
1148: int bonus_assp_d_zpassp_as_fits_ignoreflag(void){return test("% +05d", 432);}
1149: int bonus_assp_d_zpassp_zero_ignoreflag(void){return test("% +04d", 0);}
1150: int bonus_assp_d_prec_width_fit_fit_pos_ignoreflag(void){return test("% +8.5d", 34);}
1151: int bonus_assp_d_prec_width_fit_fit_neg_ignoreflag(void){return test("% +10.5d", -216);}
1152: int bonus_assp_d_prec_width_fit_fit_zero_ignoreflag(void){return test("% +8.5d", 0);}
1153: int bonus_assp_d_prec_width_nofit_fit_pos_ignoreflag(void){return test("% +8.3d", 8375);}
1154: int bonus_assp_d_prec_width_nofit_fit_neg_ignoreflag(void){return test("% +8.3d", -8473);}
1155: int bonus_assp_d_prec_width_fit_nofit_pos_ignoreflag(void){return test("% +3.7d", 3267);}
1156: int bonus_assp_d_prec_width_fit_nofit_neg_ignoreflag(void){return test("% +3.7d", -2375);}
1157: int bonus_assp_d_prec_width_nofit_nofit_pos_ignoreflag(void){return test("% +3.3d", 6983);}
1158: int bonus_assp_d_prec_width_nofit_nofit_neg_ignoreflag(void){return test("% +3.3d", -8462);}
1159: int bonus_assp_d_prec0val0_was(void){return test("%+5.0d", 0);}
1160: int bonus_assp_d_prec0val0_was_impl(void){return test("%+5.d", 0);}
1161: int bonus_assp_d_prec0val0_waslj(void){return test("%+-5.0d", 0);}
1162: int bonus_assp_d_prec0val0_waslj_impl(void){return test("%+-5.d", 0);}
1163: int bonus_assp_d_prec_width_fit_fit_pos_lj_ignoreflag(void){return test("% +-8.5d", 34);}
1164: int bonus_assp_d_prec_width_fit_fit_neg_lj_ignoreflag(void){return test("% +-10.5d", -216);}
1165: int bonus_assp_d_prec_width_fit_fit_zero_lj_ignoreflag(void){return test("% +-8.5d", 0);}
1166: int bonus_assp_d_prec_width_nofit_fit_pos_lj_ignoreflag(void){return test("% +-8.3d", 8375);}
1167: int bonus_assp_d_prec_width_nofit_fit_neg_lj_ignoreflag(void){return test("% +-8.3d", -8473);}
1168: int bonus_assp_d_prec_width_fit_nofit_pos_lj_ignoreflag(void){return test("% +-3.7d", 3267);}
1169: int bonus_assp_d_prec_width_fit_nofit_neg_lj_ignoreflag(void){return test("% +-3.7d", -2375);}
1170: int bonus_assp_d_prec_width_nofit_nofit_pos_lj_ignoreflag(void){return test("% +-3.3d", 6983);}
1171: int bonus_assp_d_prec_width_nofit_nofit_neg_lj_ignoreflag(void){return test("% +-3.3d", -8462);}
1172: int bonus_assp_d_prec_width_ff_pos_aszpsp_ignoreflag(void){return test("% 0+8.5d", 34);}
1173: int bonus_assp_d_prec_width_ff_neg_aszpsp_ignoreflag(void){return test("% 0+10.5d", -216);}
1174: int bonus_assp_d_prec_width_ff_zero_aszpsp_ignoreflag(void){return test("% 0+8.5d", 0);}
1175: int bonus_assp_d_prec_width_nf_pos_aszpsp_ignoreflag(void){return test("% 0+8.3d", 8375);}
1176: int bonus_assp_d_prec_width_nf_neg_aszpsp_ignoreflag(void){return test("% 0+8.3d", -8473);}
1177: int bonus_assp_d_prec_width_fn_pos_aszpsp_ignoreflag(void){return test("% 0+3.7d", 3267);}
1178: int bonus_assp_d_prec_width_fn_neg_aszpsp_ignoreflag(void){return test("% 0+3.7d", -2375);}
1179: int bonus_assp_d_prec_width_nn_pos_aszpsp_ignoreflag(void){return test("% 0+3.3d", 6983);}
1180: int bonus_assp_d_prec_width_nn_neg_aszpsp_ignoreflag(void){return test("% 0+3.3d", -8462);}
1181: int bonus_assp_d_prec_width_ff_pos_ljaszpsp_ignoreflag(void){return test("% 0+-8.5d", 34);}
1182: int bonus_assp_d_prec_width_ff_neg_ljaszpsp_ignoreflag(void){return test("% 0+-10.5d", -216);}
1183: int bonus_assp_d_prec_width_ff_zero_ljaszpsp_ignoreflag(void){return test("% 0+-8.5d", 0);}
1184: int bonus_assp_d_prec_width_nf_pos_ljaszpsp_ignoreflag(void){return test("% 0+-8.3d", 8375);}
1185: int bonus_assp_d_prec_width_nf_neg_ljaszpsp_ignoreflag(void){return test("% 0+-8.3d", -8473);}
1186: int bonus_assp_d_prec_width_fn_pos_ljaszpsp_ignoreflag(void){return test("% 0+-3.7d", 3267);}
1187: int bonus_assp_d_prec_width_fn_neg_ljaszpsp_ignoreflag(void){return test("% 0+-3.7d", -2375);}
1188: int bonus_assp_d_prec_width_nn_pos_ljaszpsp_ignoreflag(void){return test("% 0+-3.3d", 6983);}
1189: int bonus_assp_d_prec_width_nn_neg_ljaszpsp_ignoreflag(void){return test("% 0+-3.3d", -8462);}
1190: int bonus_assp_i_pos_ignoreflag(void){return test("% +i", 5);}
1191: int bonus_assp_i_neg_ignoreflag(void){return test("% +i", -7);}
1192: int bonus_assp_i_intmax_ignoreflag(void){return test("% +i", 2147483647);}
1193: int bonus_assp_i_width_pos_ignoreflag(void){return test("% +5i", 35);}
1194: int bonus_assp_i_width_zero_ignoreflag(void){return test("% +7i", 0);}
1195: int bonus_assp_i_width_intmax_ignoreflag(void){return test("% +24i", 2147483647);}
1196: int bonus_assp_i_prec_pos_ignoreflag(void){return test("% +.7i", 234);}
1197: int bonus_assp_i_prec_neg_ignoreflag(void){return test("% +.7i", -446);}
1198: int bonus_assp_i_prec_pos_nofit_ignoreflag(void){return test("% +.3i", 3723);}
1199: int bonus_assp_i_zpassp_as_fits_ignoreflag(void){return test("% +05i", 432);}
1200: int bonus_assp_i_zpassp_zero_ignoreflag(void){return test("% +04i", 0);}
1201: int bonus_assp_i_prec_width_fit_fit_pos_ignoreflag(void){return test("% +8.5i", 34);}
1202: int bonus_assp_i_prec_width_fit_fit_neg_ignoreflag(void){return test("% +10.5i", -216);}
1203: int bonus_assp_i_prec_width_fit_fit_zero_ignoreflag(void){return test("% +8.5i", 0);}
1204: int bonus_assp_i_prec_width_nofit_fit_pos_ignoreflag(void){return test("% +8.3i", 8375);}
1205: int bonus_assp_i_prec_width_nofit_fit_neg_ignoreflag(void){return test("% +8.3i", -8473);}
1206: int bonus_assp_i_prec_width_fit_nofit_pos_ignoreflag(void){return test("% +3.7i", 3267);}
1207: int bonus_assp_i_prec_width_fit_nofit_neg_ignoreflag(void){return test("% +3.7i", -2375);}
1208: int bonus_assp_i_prec_width_nofit_nofit_pos_ignoreflag(void){return test("% +3.3i", 6983);}
1209: int bonus_assp_i_prec_width_nofit_nofit_neg_ignoreflag(void){return test("% +3.3i", -8462);}
1210: int bonus_assp_i_prec_width_fit_fit_pos_lj_ignoreflag(void){return test("% +-8.5i", 34);}
1211: int bonus_assp_i_prec_width_fit_fit_neg_lj_ignoreflag(void){return test("% +-10.5i", -216);}
1212: int bonus_assp_i_prec_width_fit_fit_zero_lj_ignoreflag(void){return test("% +-8.5i", 0);}
1213: int bonus_assp_i_prec_width_nofit_fit_pos_lj_ignoreflag(void){return test("% +-8.3i", 8375);}
1214: int bonus_assp_i_prec_width_nofit_fit_neg_lj_ignoreflag(void){return test("% +-8.3i", -8473);}
1215: int bonus_assp_i_prec_width_fit_nofit_pos_lj_ignoreflag(void){return test("% +-3.7i", 3267);}
1216: int bonus_assp_i_prec_width_fit_nofit_neg_lj_ignoreflag(void){return test("% +-3.7i", -2375);}
1217: int bonus_assp_i_prec_width_nofit_nofit_pos_lj_ignoreflag(void){return test("% +-3.3i", 6983);}
1218: int bonus_assp_i_prec_width_nofit_nofit_neg_lj_ignoreflag(void){return test("% +-3.3i", -8462);}
1219: int bonus_assp_i_prec_width_ff_pos_aszpsp_ignoreflag(void){return test("% 0+8.5i", 34);}
1220: int bonus_assp_i_prec_width_ff_neg_aszpsp_ignoreflag(void){return test("% 0+10.5i", -216);}
1221: int bonus_assp_i_prec_width_ff_zero_aszpsp_ignoreflag(void){return test("% 0+8.5i", 0);}
1222: int bonus_assp_i_prec_width_nf_pos_aszpsp_ignoreflag(void){return test("% 0+8.3i", 8375);}
1223: int bonus_assp_i_prec_width_nf_neg_aszpsp_ignoreflag(void){return test("% 0+8.3i", -8473);}
1224: int bonus_assp_i_prec_width_fn_pos_aszpsp_ignoreflag(void){return test("% 0+3.7i", 3267);}
1225: int bonus_assp_i_prec_width_fn_neg_aszpsp_ignoreflag(void){return test("% 0+3.7i", -2375);}
1226: int bonus_assp_i_prec_width_nn_pos_aszpsp_ignoreflag(void){return test("% 0+3.3i", 6983);}
1227: int bonus_assp_i_prec_width_nn_neg_aszpsp_ignoreflag(void){return test("% 0+3.3i", -8462);}
1228: int bonus_assp_i_prec_width_ff_pos_ljaszpsp_ignoreflag(void){return test("% 0+-8.5i", 34);}
1229: int bonus_assp_i_prec_width_ff_neg_ljaszpsp_ignoreflag(void){return test("% 0+-10.5i", -216);}
1230: int bonus_assp_i_prec_width_ff_zero_ljaszpsp_ignoreflag(void){return test("% 0+-8.5i", 0);}
1231: int bonus_assp_i_prec_width_nf_pos_ljaszpsp_ignoreflag(void){return test("% 0+-8.3i", 8375);}
1232: int bonus_assp_i_prec_width_nf_neg_ljaszpsp_ignoreflag(void){return test("% 0+-8.3i", -8473);}
1233: int bonus_assp_i_prec_width_fn_pos_ljaszpsp_ignoreflag(void){return test("% 0+-3.7i", 3267);}
1234: int bonus_assp_i_prec_width_fn_neg_ljaszpsp_ignoreflag(void){return test("% 0+-3.7i", -2375);}
1235: int bonus_assp_i_prec_width_nn_pos_ljaszpsp_ignoreflag(void){return test("% 0+-3.3i", 6983);}
1236: int bonus_assp_i_prec_width_nn_neg_ljaszpsp_ignoreflag(void){return test("% 0+-3.3i", -8462);}
1237: int nocrash_notrequired_bonus_assp_dupflag_d_spassp(void){return test("% + d", 42);}
1238: int bonus_length_d_hh_pos_casted(void){return test("%hhd", (char)45);}
1239: int bonus_length_d_hh_neg_casted(void){return test("%hhd", (char)-45);}
1240: int bonus_length_d_h_pos_casted(void){return test("%hd", (short)385);}
1241: int bonus_length_d_h_neg_casted(void){return test("%hd", (short)-385);}
1242: int bonus_length_d_ll_pos_casted(void){return test("%lld", (long long)43);}
1243: int bonus_length_d_ll_neg_casted(void){return test("%lld", (long long)-43);}
1244: int bonus_length_d_l_pos_casted(void){return test("%ld", (long)32);}
1245: int bonus_length_d_l_neg_casted(void){return test("%ld", (long)-32);}
1246: int bonus_length_d_hh_pos_ref(void){return test("%hhd", ch_pos_1);}
1247: int bonus_length_d_hh_neg_ref(void){return test("%hhd", ch_neg_1);}
1248: int bonus_length_d_h_pos_ref(void){return test("%hd", sh_pos_1);}
1249: int bonus_length_d_h_neg_ref(void){return test("%hd", sh_neg_1);}
1250: int bonus_length_d_ll_pos_ref_llmax(void){return test("%lld", llmax);}
1251: int bonus_length_d_ll_pos_ref(void){return test("%lld", ll_pos_1);}
1252: int bonus_length_d_ll_neg_ref(void){return test("%lld", ll_neg_1);}
1253: int bonus_length_d_l_pos_ref(void){return test("%ld", l_pos_1);}
1254: int bonus_length_d_l_pos_ref_lmax(void){return test("%ld", lmax);}
1255: int bonus_length_d_l_neg_ref(void){return test("%ld", l_neg_1);}
1256: int bonus_length_d_ll_pos_big(void){return test("%lld", 522337203685470ll);}
1257: int bonus_length_d_ll_neg_big(void){return test("%lld", -522337203685470ll);}
1258: int bonus_length_d_l_pos_big(void){return test("%ld", 22337203685477);}
1259: int bonus_length_d_l_neg_big(void){return test("%ld", -22337203685477);}
1260: int bonus_length_d_l_pos_big_as(void){return test("%+ld", 22337203685477l);}
1261: int bonus_length_d_llmax(void){return test("%lld", 9223372036854775807ll);}
1262: int bonus_length_d_llmin(void){return test("%lld", llmin);}
1263: int bonus_length_d_lmax(void){return test("%ld", 9223372036854775807l);}
1264: int bonus_length_d_lmin(void){return test("%ld", lmin);}
1265: int bonus_length_d_hmax(void){return test("%hd", (short)32767);}
1266: int bonus_length_d_hmin(void){return test("%hd", (short)(-32768));}
1267: int bonus_length_d_hhmax(void){return test("%hhd", (char)127);}
1268: int bonus_length_d_hhmin(void){return test("%hhd", (char)(-128));}
1269: int bonus_length_d_l_pos_big_zp(void){return test("%037ld", 22337203685477l);}
1270: int bonus_length_d_l_neg_big_prec(void){return test("%.37ld", -22337203685477l);}
1271: int bonus_length_d_ll_pos_big_width(void){return test("%37lld", 522337203685470ll);}
1272: int bonus_length_d_ll_neg_big_lj(void){return test("%-37lld", -522337203685470ll);}
1273: int bonus_length_d_follows_i_i(void){return test("[%d] [%d]", i_pos_1, i_pos_1);}
1274: int bonus_length_d_follows_i_l(void){return test("[%d] [%ld]", i_pos_1, l_pos_1);}
1275: int bonus_length_d_follows_i_ll(void){return test("[%d] [%lld]", i_pos_1, ll_pos_1);}
1276: int bonus_length_d_follows_i_h(void){return test("[%d] [%hd]", i_pos_1, sh_pos_1);}
1277: int bonus_length_d_follows_i_hh(void){return test("[%d] [%hhd]", i_pos_1, ch_pos_1);}
1278: int bonus_length_d_ll_hh_ll(void){return test("%lld%hhd%lld", ll_pos_1, ch_neg_1, ll_neg_1);}
1279: int bonus_length_d_h_l_hh(void){return test("%hd%ld%hhd", sh_pos_1, l_neg_1, ch_neg_1);}
1280: int bonus_length_d_l_hh_h(void){return test("%ld%hhd%hd", l_neg_1, ch_pos_1, sh_pos_1);}
1281: int bonus_length_d_n_ll_hh(void){return test("%d%lld%hhd", i_pos_1, ll_neg_1, ch_pos_1);}
1282: int bonus_length_d_ll_n_l(void){return test("%lli%d%ld", ll_neg_1, i_pos_1, l_pos_1);}
1283: int bonus_length_d_hh_pos_casted_sp(void){return test("% hhd", (char)45);}
1284: int bonus_length_d_hh_neg_casted_sp(void){return test("% hhd", (char)-45);}
1285: int bonus_length_d_h_pos_casted_sp(void){return test("% hd", (short)385);}
1286: int bonus_length_d_h_neg_casted_sp(void){return test("% hd", (short)-385);}
1287: int bonus_length_d_l_pos_casted_sp(void){return test("% ld", (long)32);}
1288: int bonus_length_d_l_neg_casted_sp(void){return test("% ld", (long)-32);}
1289: int bonus_length_d_ll_pos_casted_sp(void){return test("% lld", (long long)43);}
1290: int bonus_length_d_ll_neg_casted_sp(void){return test("% lld", (long long)-43);}
1291: int bonus_length_d_hh_pos_ref_sp(void){return test("% hhd", ch_pos_1);}
1292: int bonus_length_d_hh_neg_ref_sp(void){return test("% hhd", ch_neg_1);}
1293: int bonus_length_d_h_pos_ref_sp(void){return test("% hd", sh_pos_1);}
1294: int bonus_length_d_h_neg_ref_sp(void){return test("% hd", sh_neg_1);}
1295: int bonus_length_d_l_pos_ref_sp(void){return test("% ld", l_pos_1);}
1296: int bonus_length_d_l_neg_ref_sp(void){return test("% ld", l_neg_1);}
1297: int bonus_length_d_ll_pos_ref_sp(void){return test("% lld", ll_pos_1);}
1298: int bonus_length_d_ll_neg_ref_sp(void){return test("% lld", ll_neg_1);}
1299: int bonus_length_d_l_pos_big_sp(void){return test("% ld", 22337203685477l);}
1300: int bonus_length_d_l_neg_big_sp(void){return test("% ld", -22337203685477l);}
1301: int bonus_length_d_ll_pos_big_sp(void){return test("% lld", 522337203685470ll);}
1302: int bonus_length_d_ll_neg_big_sp(void){return test("% lld", -522337203685470ll);}
1303: int bonus_length_d_llmax_sp(void){return test("% lld", 9223372036854775807ll);}
1304: int bonus_length_d_llmin_sp(void){return test("% lld", llmin);}
1305: int bonus_length_d_lmax_sp(void){return test("% ld", 9223372036854775807l);}
1306: int bonus_length_d_lmin_sp(void){return test("% ld", lmin);}
1307: int bonus_length_d_hmax_sp(void){return test("% hd", (short)32767);}
1308: int bonus_length_d_hmin_sp(void){return test("% hd", (short)(-32768));}
1309: int bonus_length_d_hhmax_sp(void){return test("% hhd", (char)(127));}
1310: int bonus_length_d_hhmin_sp(void){return test("% hhd", (char)(-128));}
1311: int bonus_length_i_hh_pos_casted(void){return test("%hhi", (char)45);}
1312: int bonus_length_i_hh_neg_casted(void){return test("%hhi", (char)-45);}
1313: int bonus_length_i_h_pos_casted(void){return test("%hi", (short)385);}
1314: int bonus_length_i_h_neg_casted(void){return test("%hi", (short)-385);}
1315: int bonus_length_i_l_pos_casted(void){return test("%li", (long)32);}
1316: int bonus_length_i_l_neg_casted(void){return test("%li", (long)-32);}
1317: int bonus_length_i_ll_pos_casted(void){return test("%lli", (long long)43);}
1318: int bonus_length_i_ll_neg_casted(void){return test("%lli", (long long)-43);}
1319: int bonus_length_i_hh_pos_ref(void){return test("%hhi", ch_pos_1);}
1320: int bonus_length_i_hh_neg_ref(void){return test("%hhi", ch_neg_1);}
1321: int bonus_length_i_h_pos_ref(void){return test("%hi", sh_pos_1);}
1322: int bonus_length_i_h_neg_ref(void){return test("%hi", sh_neg_1);}
1323: int bonus_length_i_l_pos_ref(void){return test("%li", l_pos_1);}
1324: int bonus_length_i_l_pos_ref_lmax(void){return test("%li", lmax);}
1325: int bonus_length_i_ll_pos_ref_llmax(void){return test("%lli", llmax);}
1326: int bonus_length_i_l_neg_ref(void){return test("%li", l_neg_1);}
1327: int bonus_length_i_ll_pos_ref(void){return test("%lli", ll_pos_1);}
1328: int bonus_length_i_ll_neg_ref(void){return test("%lli", ll_neg_1);}
1329: int bonus_length_i_l_pos_big(void){return test("%li", 22337203685477);}
1330: int bonus_length_i_l_neg_big(void){return test("%li", -22337203685477);}
1331: int bonus_length_i_ll_pos_big(void){return test("%lli", 522337203685470ll);}
1332: int bonus_length_i_ll_neg_big(void){return test("%lli", -522337203685470ll);}
1333: int bonus_length_i_llmax(void){return test("%lli", 9223372036854775807ll);}
1334: int bonus_length_i_llmin(void){return test("%lli", llmin);}
1335: int bonus_length_i_lmax(void){return test("%li", 9223372036854775807l);}
1336: int bonus_length_i_lmin(void){return test("%li", lmin);}
1337: int bonus_length_i_hmax(void){return test("%hi", (short)32767);}
1338: int bonus_length_i_hmin(void){return test("%hi", (short)(-32768));}
1339: int bonus_length_i_hhmax(void){return test("%hhi", (char)127);}
1340: int bonus_length_i_hhmin(void){return test("%hhi", (char)(-128));}
1341: int bonus_length_i_l_pos_big_zp(void){return test("%037li", 22337203685477l);}
1342: int bonus_length_i_l_neg_big_prec(void){return test("%.37li", -22337203685477l);}
1343: int bonus_length_i_ll_pos_big_width(void){return test("%37lli", 522337203685470ll);}
1344: int bonus_length_i_ll_neg_big_lj(void){return test("%-37lli", -522337203685470ll);}
1345: int bonus_length_i_follows_i_i(void){return test("[%i] [%i]", i_pos_1, i_pos_1);}
1346: int bonus_length_i_follows_i_l(void){return test("[%i] [%li]", i_pos_1, l_pos_1);}
1347: int bonus_length_i_follows_i_ll(void){return test("[%i] [%lli]", i_pos_1, ll_pos_1);}
1348: int bonus_length_i_follows_i_h(void){return test("[%i] [%hi]", i_pos_1, sh_pos_1);}
1349: int bonus_length_i_follows_i_hh(void){return test("[%i] [%hhi]", i_pos_1, ch_pos_1);}
1350: int bonus_length_i_ll_hh_ll(void){return test("%lli%hhi%lli", ll_pos_1, ch_neg_1, ll_neg_1);}
1351: int bonus_length_i_h_l_hh(void){return test("%hi%li%hhi", sh_pos_1, l_neg_1, ch_neg_1);}
1352: int bonus_length_i_l_hh_h(void){return test("%li%hhi%hi", l_neg_1, ch_pos_1, sh_pos_1);}
1353: int bonus_length_i_n_ll_hh(void){return test("%i%lli%hhi", i_pos_1, ll_neg_1, ch_pos_1);}
1354: int bonus_length_i_ll_n_l(void){return test("%lli%i%li", ll_neg_1, i_pos_1, l_pos_1);}
1355: int bonus_length_i_hh_pos_casted_sp(void){return test("% hhi", (char)45);}
1356: int bonus_length_i_hh_neg_casted_sp(void){return test("% hhi", (char)-45);}
1357: int bonus_length_i_h_pos_casted_sp(void){return test("% hi", (short)385);}
1358: int bonus_length_i_h_neg_casted_sp(void){return test("% hi", (short)-385);}
1359: int bonus_length_i_l_pos_casted_sp(void){return test("% li", (long)32);}
1360: int bonus_length_i_l_neg_casted_sp(void){return test("% li", (long)-32);}
1361: int bonus_length_i_ll_pos_casted_sp(void){return test("% lli", (long long)43);}
1362: int bonus_length_i_ll_neg_casted_sp(void){return test("% lli", (long long)-43);}
1363: int bonus_length_i_hh_pos_ref_sp(void){return test("% hhi", ch_pos_1);}
1364: int bonus_length_i_hh_neg_ref_sp(void){return test("% hhi", ch_neg_1);}
1365: int bonus_length_i_h_pos_ref_sp(void){return test("% hi", sh_pos_1);}
1366: int bonus_length_i_h_neg_ref_sp(void){return test("% hi", sh_neg_1);}
1367: int bonus_length_i_l_pos_ref_sp(void){return test("% li", l_pos_1);}
1368: int bonus_length_i_l_neg_ref_sp(void){return test("% li", l_neg_1);}
1369: int bonus_length_i_ll_pos_ref_sp(void){return test("% lli", ll_pos_1);}
1370: int bonus_length_i_ll_neg_ref_sp(void){return test("% lli", ll_neg_1);}
1371: int bonus_length_i_l_pos_big_sp(void){return test("% li", 22337203685477l);}
1372: int bonus_length_i_l_neg_big_sp(void){return test("% li", -22337203685477l);}
1373: int bonus_length_i_ll_pos_big_sp(void){return test("% lli", 522337203685470ll);}
1374: int bonus_length_i_ll_neg_big_sp(void){return test("% lli", -522337203685470ll);}
1375: int bonus_length_i_llmax_sp(void){return test("% lli", 9223372036854775807ll);}
1376: int bonus_length_i_llmin_sp(void){return test("% lli", llmin);}
1377: int bonus_length_i_lmax_sp(void){return test("% li", 9223372036854775807l);}
1378: int bonus_length_i_lmin_sp(void){return test("% li", lmin);}
1379: int bonus_length_i_hmax_sp(void){return test("% hi", (short)32767);}
1380: int bonus_length_i_hmin_sp(void){return test("% hi", (short)(-32768));}
1381: int bonus_length_i_hhmax_sp(void){return test("% hhi", (char)(127));}
1382: int bonus_length_i_hhmin_sp(void){return test("% hhi", (char)(-128));}
1383: int bonus_length_i_l_pos_big_as(void){return test("%+li", 22337203685477l);}
1384: int bonus_length_u_hh_pos_casted(void){return test("%hhu", (unsigned char)45);}
1385: int bonus_length_u_h_pos_casted(void){return test("%hu", (unsigned short)385);}
1386: int bonus_length_u_l_pos_casted(void){return test("%lu", (unsigned long)32);}
1387: int bonus_length_u_ll_pos_casted(void){return test("%llu", (unsigned long long)43);}
1388: int bonus_length_u_hh_pos_ref(void){return test("%hhu", uch_pos_1);}
1389: int bonus_length_u_h_pos_ref(void){return test("%hu", ush_pos_1);}
1390: int bonus_length_u_l_pos_ref(void){return test("%lu", ul_pos_1);}
1391: int bonus_length_u_ll_pos_ref(void){return test("%llu", ull_pos_1);}
1392: int bonus_length_u_l_pos_big(void){return test("%lu", 22337203685477ul);}
1393: int bonus_length_u_ll_pos_big(void){return test("%llu", 522337203685470ull);}
1394: int bonus_length_u_ullmax(void){return test("%llu", ullmax);}
1395: int bonus_length_u_ulmax(void){return test("%lu", ulmax);}
1396: int bonus_length_u_uhmax(void){return test("%hu", (unsigned short)65535);}
1397: int bonus_length_u_uhhmax(void){return test("%hhu", (unsigned char)255);}
1398: int bonus_length_u_l_pos_big_zp(void){return test("%037lu", 22337203685477ul);}
1399: int bonus_length_u_ll_pos_big_width(void){return test("%37llu", 522337203685470ull);}
1400: int bonus_length_u_ll_hh_ll(void){return test("%llu%hhu%llu", ull_pos_1, uch_pos_1, ull_pos_1);}
1401: int bonus_length_u_h_l_hh(void){return test("%hu%lu%hhu", ush_pos_1, ul_pos_1, uch_pos_1);}
1402: int bonus_length_u_l_hh_h(void){return test("%lu%hhu%hu", ul_pos_1, uch_pos_1, ush_pos_1);}
1403: int bonus_length_u_n_ll_hh(void){return test("%u%llu%hhu", ui_pos_1, ull_pos_1, uch_pos_1);}
1404: int bonus_length_u_ll_n_l(void){return test("%llu%u%lu", ull_pos_1, ui_pos_1, ul_pos_1);}
1405: int bonus_length_x_hh_pos_casted(void){return test("%hhx", (unsigned char)45);}
1406: int bonus_length_x_h_pos_casted(void){return test("%hx", (unsigned short)385);}
1407: int bonus_length_x_l_pos_casted(void){return test("%lx", (unsigned long)32);}
1408: int bonus_length_x_ll_pos_casted(void){return test("%llx", (long long)43);}
1409: int bonus_length_x_hh_pos_ref(void){return test("%hhx", uch_pos_1);}
1410: int bonus_length_x_h_pos_ref(void){return test("%hx", ush_pos_1);}
1411: int bonus_length_x_l_pos_ref(void){return test("%lx", ul_pos_1);}
1412: int bonus_length_x_ll_pos_ref(void){return test("%llx", ull_pos_1);}
1413: int bonus_length_x_l_pos_big(void){return test("%lx", 22337203685477ul);}
1414: int bonus_length_x_ll_pos_big(void){return test("%llx", 522337203685470ull);}
1415: int bonus_length_x_ullmax(void){return test("%llx", ullmax);}
1416: int bonus_length_x_ulmax(void){return test("%lx", ulmax);}
1417: int bonus_length_x_uhmax(void){return test("%hx", (unsigned short)65535);}
1418: int bonus_length_x_uhhmax(void){return test("%hhx", (unsigned char)255);}
1419: int bonus_length_x_l_pos_big_zp(void){return test("%037lx", 22337203685477ul);}
1420: int bonus_length_x_ll_pos_big_width(void){return test("%37llx", 522337203685470ull);}
1421: int bonus_length_x_ll_hh_ll(void){return test("%llu%hhu%llx", ull_pos_1, uch_pos_1, ull_pos_1);}
1422: int bonus_length_x_h_l_hh(void){return test("%hu%lu%hhx", ush_pos_1, ul_pos_1, uch_pos_1);}
1423: int bonus_length_x_l_hh_h(void){return test("%lu%hhu%hx", ul_pos_1, uch_pos_1, ush_pos_1);}
1424: int bonus_length_x_n_ll_hh(void){return test("%u%llu%hhx", ui_pos_1, ull_pos_1, uch_pos_1);}
1425: int bonus_length_x_ll_n_l(void){return test("%llu%u%lx", ull_pos_1, ui_pos_1, ul_pos_1);}
1426: int bonus_length_x_hh_pos_casted_af(void){return test("%#hhx", (unsigned char)45);}
1427: int bonus_length_x_h_pos_casted_af(void){return test("%#hx", (unsigned short)385);}
1428: int bonus_length_x_l_pos_casted_af(void){return test("%#lx", (unsigned long)32);}
1429: int bonus_length_x_ll_pos_casted_af(void){return test("%#llx", (long long)43);}
1430: int bonus_length_x_hh_pos_ref_af(void){return test("%#hhx", uch_pos_1);}
1431: int bonus_length_x_h_pos_ref_af(void){return test("%#hx", ush_pos_1);}
1432: int bonus_length_x_l_pos_ref_af(void){return test("%#lx", ul_pos_1);}
1433: int bonus_length_x_ll_pos_ref_af(void){return test("%#llx", ull_pos_1);}
1434: int bonus_length_x_l_pos_big_af(void){return test("%#lx", 22337203685477lu);}
1435: int bonus_length_x_ll_pos_big_af(void){return test("%#llx", 522337203685470llu);}
1436: int bonus_length_x_ullmax_af(void){return test("%#llx", ullmax);}
1437: int bonus_length_x_ulmax_af(void){return test("%#lx", ulmax);}
1438: int bonus_length_x_uhmax_af(void){return test("%#hx", (unsigned short)65535);}
1439: int bonus_length_x_uhhmax_af(void){return test("%#hhx", (unsigned char)255);}
1440: int bonus_length_x_l_pos_big_zp_af(void){return test("%#037lx", 22337203685477ul);}
1441: int bonus_length_x_ll_pos_big_width_af(void){return test("%#37llx", 522337203685470ull);}
1442: int bonus_length_x_ll_hh_ll_af(void){return test("%llu%hhu%#llx", ull_pos_1, uch_pos_1, ull_pos_1);}
1443: int bonus_length_x_h_l_hh_af(void){return test("%hu%#lx%hhx", ush_pos_1, ul_pos_1, uch_pos_1);}
1444: int bonus_length_x_l_hh_h_af(void){return test("%lu%hhu%#hx", ul_pos_1, uch_pos_1, ush_pos_1);}
1445: int bonus_length_x_n_ll_hh_af(void){return test("%#x%llu%hhx", ui_pos_1, ull_pos_1, uch_pos_1);}
1446: int bonus_length_x_ll_n_l_af(void){return test("%llu%u%#lx", ull_pos_1, ui_pos_1, ul_pos_1);}
1447: int bonus_length_X_hh_pos_casted(void){return test("%hhX", (unsigned char)45);}
1448: int bonus_length_X_h_pos_casted(void){return test("%hX", (unsigned short)385);}
1449: int bonus_length_X_l_pos_casted(void){return test("%lX", (unsigned long)32);}
1450: int bonus_length_X_ll_pos_casted(void){return test("%llX", (long long)43);}
1451: int bonus_length_X_hh_pos_ref(void){return test("%hhX", uch_pos_1);}
1452: int bonus_length_X_h_pos_ref(void){return test("%hX", ush_pos_1);}
1453: int bonus_length_X_l_pos_ref(void){return test("%lX", ul_pos_1);}
1454: int bonus_length_X_ll_pos_ref(void){return test("%llX", ull_pos_1);}
1455: int bonus_length_X_l_pos_big(void){return test("%lX", 22337203685477ul);}
1456: int bonus_length_X_ll_pos_big(void){return test("%llX", 522337203685470ull);}
1457: int bonus_length_X_ullmax(void){return test("%llX", ullmax);}
1458: int bonus_length_X_ulmax(void){return test("%lX", ulmax);}
1459: int bonus_length_X_uhmax(void){return test("%hX", (unsigned short)65535);}
1460: int bonus_length_X_uhhmax(void){return test("%hhX", (unsigned char)255);}
1461: int bonus_length_X_l_pos_big_zp(void){return test("%037lX", 22337203685477ul);}
1462: int bonus_length_X_ll_pos_big_width(void){return test("%37llX", 522337203685470ull);}
1463: int bonus_length_X_ll_hh_ll(void){return test("%llu%hhu%llX", ull_pos_1, uch_pos_1, ull_pos_1);}
1464: int bonus_length_X_h_l_hh(void){return test("%hu%lu%hhX", ush_pos_1, ul_pos_1, uch_pos_1);}
1465: int bonus_length_X_l_hh_h(void){return test("%lu%hhu%hX", ul_pos_1, uch_pos_1, ush_pos_1);}
1466: int bonus_length_X_n_ll_hh(void){return test("%u%llu%hhX", ui_pos_1, ull_pos_1, uch_pos_1);}
1467: int bonus_length_X_ll_n_l(void){return test("%llu%u%lX", ull_pos_1, ui_pos_1, ul_pos_1);}
1468: int bonus_length_X_hh_pos_casted_af(void){return test("%#hhX", (unsigned char)45);}
1469: int bonus_length_X_h_pos_casted_af(void){return test("%#hX", (unsigned short)385);}
1470: int bonus_length_X_l_pos_casted_af(void){return test("%#lX", (unsigned long)32);}
1471: int bonus_length_X_ll_pos_casted_af(void){return test("%#llX", (long long)43);}
1472: int bonus_length_X_hh_pos_ref_af(void){return test("%#hhX", uch_pos_1);}
1473: int bonus_length_X_h_pos_ref_af(void){return test("%#hX", ush_pos_1);}
1474: int bonus_length_X_l_pos_ref_af(void){return test("%#lX", ul_pos_1);}
1475: int bonus_length_X_ll_pos_ref_af(void){return test("%#llX", ull_pos_1);}
1476: int bonus_length_X_l_pos_big_af(void){return test("%#lX", 22337203685477ul);}
1477: int bonus_length_X_ll_pos_big_af(void){return test("%#llX", 522337203685470ull);}
1478: int bonus_length_X_ullmax_af(void){return test("%#llX", ullmax);}
1479: int bonus_length_X_ulmax_af(void){return test("%#lX", ulmax);}
1480: int bonus_length_X_uhmax_af(void){return test("%#hX", (unsigned short)65535);}
1481: int bonus_length_X_uhhmax_af(void){return test("%#hhX", (unsigned char)255);}
1482: int bonus_length_X_l_pos_big_zp_af(void){return test("%#037lX", 22337203685477ul);}
1483: int bonus_length_X_ll_pos_big_width_af(void){return test("%#37llX", 522337203685470ull);}
1484: int bonus_length_X_ll_hh_ll_af(void){return test("%llu%hhu%#llX", ull_pos_1, uch_pos_1, ull_pos_1);}
1485: int bonus_length_X_h_l_hh_af(void){return test("%#hx%lu%#hhX", ush_pos_1, ul_pos_1, uch_pos_1);}
1486: int bonus_length_X_l_hh_h_af(void){return test("%lu%hhu%#hX", ul_pos_1, uch_pos_1, ush_pos_1);}
1487: int bonus_length_X_n_ll_hh_af(void){return test("%#x%llu%#hhX", ui_pos_1, ull_pos_1, uch_pos_1);}
1488: int bonus_length_X_ll_n_l_af(void){return test("%#llx%u%#lX", ull_pos_1, ui_pos_1, ul_pos_1);}
1489: int nocrash_notrequired_bonus_length_noarg_11(void){return test("%hh"); }
1490: int nocrash_notrequired_bonus_length_noarg_12(void){return test("%h"); }
1491: int nocrash_notrequired_bonus_length_noarg_13(void){return test("%ll"); }
1492: int nocrash_notrequired_bonus_length_noarg_14(void){return test("%l"); }
1493: int nocrash_notrequired_bonus_length_nullarg_11(void){return test("%hhs", NULL); }
1494: int nocrash_notrequired_bonus_length_nullarg_12(void){return test("%hs", NULL); }
1495: int nocrash_notrequired_bonus_length_nullarg_13(void){return test("%lls", NULL); }
1496: int nocrash_notrequired_bonus_length_nullarg_14(void){return test("%ls", NULL); }
1497: int nocrash_notrequired_bonus_length_c_hh(void){return test("%hhc", 'a');}
1498: int nocrash_notrequired_bonus_length_c_h(void){return test("%hc", 'a');}
1499: int nocrash_notrequired_bonus_length_c_l(void){return test("%lc", 'a');}
1500: int nocrash_notrequired_bonus_length_c_ll(void){return test("%llc", 'a');}
1501: int nocrash_notrequired_bonus_length_s_hh(void){return test("%hhs", "hello");}
1502: int nocrash_notrequired_bonus_length_s_h(void){return test("%hs", "hello");}
1503: int nocrash_notrequired_bonus_length_s_l(void){return test("%s", "hello");}
1504: int nocrash_notrequired_bonus_length_s_ll(void){return test("%lls", "hello");}
1505: int nocrash_notrequired_bonus_length_p_hh(void){return test("%hhp", &ncm_p);}
1506: int nocrash_notrequired_bonus_length_p_h(void){return test("%hp", &ncm_p);}
1507: int nocrash_notrequired_bonus_length_p_l(void){return test("%lp", &ncm_p);}
1508: int nocrash_notrequired_bonus_length_p_ll(void){return test("%llp", &ncm_p);}
1509: int nocrash_notrequired_bonus_length_d_hhh(void){return test("%hhhd", 42);}
1510: int nocrash_notrequired_bonus_length_d_hhhh(void){return test("%hhhhd", 42);}
1511: int nocrash_notrequired_bonus_length_d_hhl(void){return test("%hhld", 42);}
1512: int nocrash_notrequired_bonus_length_d_hhll(void){return test("%hhlld", 42);}
1513: int nocrash_notrequired_bonus_length_d_llh(void){return test("%llhd", 42);}
1514: int nocrash_notrequired_bonus_length_d_lll(void){return test("%llld", 42);}
1515: int nocrash_notrequired_bonus_length_i_hhh(void){return test("%hhhi", 42);}
1516: int nocrash_notrequired_bonus_length_u_hhh(void){return test("%hhhu", 42);}
1517: int nocrash_notrequired_bonus_length_u_hhhh(void){return test("%hhhhu", 42);}
1518: int nocrash_notrequired_bonus_length_u_hhl(void){return test("%hhlu", 42);}
1519: int nocrash_notrequired_bonus_length_u_hhll(void){return test("%hhllu", 42);}
1520: int nocrash_notrequired_bonus_length_u_llh(void){return test("%llhu", 42);}
1521: int nocrash_notrequired_bonus_length_u_lll(void){return test("%lllu", 42);}
1522: int nocrash_notrequired_bonus_length_x_hhh(void){return test("%hhhx", 42);}
1523: int nocrash_notrequired_bonus_length_x_hhhh(void){return test("%hhhhx", 42);}
1524: int nocrash_notrequired_bonus_length_x_hhl(void){return test("%hhlx", 42);}
1525: int nocrash_notrequired_bonus_length_x_hhll(void){return test("%hhllx", 42);}
1526: int nocrash_notrequired_bonus_length_x_llh(void){return test("%llhx", 42);}
1527: int nocrash_notrequired_bonus_length_x_lll(void){return test("%lllx", 42);}
1528: int nocrash_notrequired_bonus_length_X_hhh(void){return test("%hhhX", 42);}
1529: int nocrash_notrequired_bonus_length_X_llh(void){return test("%llhX", 42);}
1530: int nocrash_notrequired_bonus_length_f_hh(void){return test("%hhf", 42.5);}
1531: int nocrash_notrequired_bonus_length_f_h(void){return test("%hf", 42.5);}
1532: int nocrash_notrequired_bonus_length_f_ll(void){return test("%llf", 42.5);}
1533: int nocrash_notrequired_bonus_length_f_lll(void){return test("%lllf", 42.5);}
1534: int nocrash_notrequired_bonus_length_f_llll(void){return test("%llllf", 42.5);}
1535: int bonus_f_basic_1(void){return test("this %f float", 1.5);}
1536: int bonus_f_basic_fltonly(void){return test("%f", 7.5);}
1537: int bonus_f_basic_zero(void){return test("%f", 0.0);}
1538: int bonus_f_basic_nzero(void){return test("%f", -0.0);}
1539: int bonus_f_basic_whole(void){return test("%f", 1.0);}
1540: int bonus_f_basic_negative(void){return test("%f", -3.85);}
1541: int bonus_f_basic_positive_3_3(void){return test("%f", 573.924);}
1542: int bonus_f_basic_negative_3_3(void){return test("%f", -958.125);}
1543: int bonus_f_basic_positive_smallfpart(void){return test("%f", 23.00041);}
1544: int bonus_f_basic_positive_allsmall(void){return test("%f", 0.000039);}
1545: int bonus_f_basic_negative_smallfpart(void){return test("%f", -7.00036);}
1546: int bonus_f_basic_negative_allsmall(void){return test("%f", -0.00032);}
1547: int bonus_f_basic_limits_allsmall_pos(void){return test("%f", 0.000001);}
1548: int bonus_f_basic_limits_allsmall_neg(void){return test("%f", -0.000001);}
1549: int bonus_f_basic_limits_smallfpart_pos(void){return test("%f", 9873.000001);}
1550: int bonus_f_basic_limits_smallfpart_neg(void){return test("%f", -875.000001);}
1551: int bonus_f_basic_limits_allbig_pos(void){return test("%f", 999.999999);}
1552: int bonus_f_basic_limits_allbig_neg(void){return test("%f", -99.999999);}
1553: int bonus_f_basic_limits_bigfpart_pos(void){return test("%f", 0.999999);}
1554: int bonus_f_basic_limits_bigfpart_neg(void){return test("%f", -0.999999);}
1555: int bonus_f_rndd_pos(void){return test("%f", 23.375094499);}
1556: int bonus_f_rndd_neg(void){return test("%f", -985.765426499);}
1557: int bonus_f_rndu_pos(void){return test("%f", 0.0894255);}
1558: int bonus_f_rndu_neg(void){return test("%f", -56.2012685);}
1559: int bonus_f_rndu_multidigit_pos(void){return test("%f", 43.4399999);}
1560: int bonus_f_rndu_multidigit_neg(void){return test("%f", -5.0299999);}
1561: int bonus_f_rndd_multidigit_pos(void){return test("%f", 43.43999949);}
1562: int bonus_f_rndd_multidigit_neg(void){return test("%f", -5.02999949);}
1563: int bonus_f_rndd_wholnobump_pos(void){return test("%f", 1.99999949);}
1564: int bonus_f_rndd_wholnobump_neg(void){return test("%f", -0.99999949);}
1565: int bonus_f_rndu_bumpwhole_pos(void){return test("%f", 3.9999999);}
1566: int bonus_f_rndu_bumpwhole_neg(void){return test("%f", -5.9999999);}
1567: int bonus_f_prec0_zero(void){return test("%.0f", 0.0);}
1568: int bonus_f_prec0_nzero(void){return test("%.0f", -0.0);}
1569: int bonus_f_prec0_1(void){return test("this %.0f float", 1.6);}
1570: int bonus_f_prec0_fltonly(void){return test("%.0f", 7.4);}
1571: int bonus_f_prec0_whole(void){return test("%.0f", 1.0);}
1572: int bonus_f_prec0_negative(void){return test("%.0f", -3.85);}
1573: int bonus_f_prec0_positive_3_3(void){return test("%.0f", 573.924);}
1574: int bonus_f_prec0_negative_3_3(void){return test("%.0f", -958.125);}
1575: int bonus_f_prec0_positive_smallfpart(void){return test("%.0f", 23.00041);}
1576: int bonus_f_prec0_positive_allsmall(void){return test("%.0f", 0.000039);}
1577: int bonus_f_prec0_negative_smallfpart(void){return test("%.0f", -7.00036);}
1578: int bonus_f_prec0_negative_allsmall(void){return test("%.0f", -0.00032);}
1579: int bonus_f_prec1_zero(void){return test("%.1f", 0.0);}
1580: int bonus_f_prec1_nzero(void){return test("%.1f", -0.0);}
1581: int bonus_f_prec1_1(void){return test("this %.1f float", 1.5);}
1582: int bonus_f_prec1_fltonly(void){return test("%.1f", 7.5);}
1583: int bonus_f_prec1_whole(void){return test("%.1f", 1.0);}
1584: int bonus_f_prec1_negative(void){return test("%.1f", -3.85);}
1585: int bonus_f_prec1_positive_3_3(void){return test("%.1f", 573.924);}
1586: int bonus_f_prec1_negative_3_3(void){return test("%.1f", -958.125);}
1587: int bonus_f_prec1_positive_smallfpart(void){return test("%.1f", 23.00041);}
1588: int bonus_f_prec1_positive_allsmall(void){return test("%.1f", 0.000039);}
1589: int bonus_f_prec1_negative_smallfpart(void){return test("%.1f", -7.00036);}
1590: int bonus_f_prec1_negative_allsmall(void){return test("%.1f", -0.00032);}
1591: int bonus_f_prec3_zero(void){return test("%.3f", 0.0);}
1592: int bonus_f_prec3_nzero(void){return test("%.3f", -0.0);}
1593: int bonus_f_prec3_1(void){return test("this %.3f float", 1.5);}
1594: int bonus_f_prec3_fltonly(void){return test("%.3f", 7.5);}
1595: int bonus_f_prec3_whole(void){return test("%.3f", 1.0);}
1596: int bonus_f_prec3_negative(void){return test("%.3f", -3.85);}
1597: int bonus_f_prec3_positive_3_3(void){return test("%.3f", 573.924);}
1598: int bonus_f_prec3_negative_3_3(void){return test("%.3f", -958.125);}
1599: int bonus_f_prec3_positive_smallfpart(void){return test("%.3f", 23.00041);}
1600: int bonus_f_prec3_positive_allsmall(void){return test("%.3f", 0.000039);}
1601: int bonus_f_prec3_negative_smallfpart(void){return test("%.3f", -7.00036);}
1602: int bonus_f_prec3_negative_allsmall(void){return test("%.3f", -0.00032);}
1603: int bonus_f_prec7_zero(void){return test("%.7f", 0.0);}
1604: int bonus_f_prec7_nzero(void){return test("%.7f", -0.0);}
1605: int bonus_f_prec7_1(void){return test("this %.7f float", 1.5);}
1606: int bonus_f_prec7_fltonly(void){return test("%.7f", 7.5);}
1607: int bonus_f_prec7_whole(void){return test("%.7f", 1.0);}
1608: int bonus_f_prec7_negative(void){return test("%.7f", -3.85);}
1609: int bonus_f_prec7_positive_3_3(void){return test("%.7f", 573.924);}
1610: int bonus_f_prec7_negative_3_3(void){return test("%.7f", -958.125);}
1611: int bonus_f_prec7_positive_smallfpart(void){return test("%.7f", 23.00041);}
1612: int bonus_f_prec7_positive_allsmall(void){return test("%.7f", 0.0000039);}
1613: int bonus_f_prec7_negative_smallfpart(void){return test("%.7f", -7.00036);}
1614: int bonus_f_prec7_negative_allsmall(void){return test("%.7f", -0.000032);}
1615: int bonus_f_prec7_limits_allsmall_pos(void){return test("%.7f", 0.0000001);}
1616: int bonus_f_prec7_limits_allsmall_neg(void){return test("%.7f", -0.0000001);}
1617: int bonus_f_prec7_limits_smallfpart_pos(void){return test("%.7f", 9873.000001);}
1618: int bonus_f_prec7_limits_smallfpart_neg(void){return test("%.7f", -875.000001);}
1619: int bonus_f_prec7_limits_allbig_pos(void){return test("%.7f", 999.9999999);}
1620: int bonus_f_prec7_limits_allbig_neg(void){return test("%.7f", -99.9999999);}
1621: int bonus_f_prec7_limits_bigfpart_pos(void){return test("%.7f", 0.999999);}
1622: int bonus_f_prec7_limits_bigfpart_neg(void){return test("%.7f", -0.999999);}
1623: int bonus_f_rnd_prec7_rndd_pos(void){return test("%.7f", 23.375094499);}
1624: int bonus_f_rnd_prec7_rndd_neg(void){return test("%.7f", -985.765426499);}
1625: int bonus_f_rnd_prec7_rndu_pos(void){return test("%.7f", 0.0894255);}
1626: int bonus_f_rnd_prec7_rndu_neg(void){return test("%.7f", -56.2012685);}
1627: int bonus_f_rnd_prec7_rndu_multidigit_pos(void){return test("%.7f", 43.4399999);}
1628: int bonus_f_rnd_prec7_rndu_multidigit_neg(void){return test("%.7f", -5.0299999);}
1629: int bonus_f_rnd_prec7_rndd_multidigit_pos(void){return test("%.7f", 43.43999949);}
1630: int bonus_f_rnd_prec7_rndd_multidigit_neg(void){return test("%.7f", -5.02999949);}
1631: int bonus_f_rnd_prec7_rndd_wholnobump_pos(void){return test("%.7f", 1.99999949);}
1632: int bonus_f_rnd_prec7_rndd_wholnobump_neg(void){return test("%.7f", -0.99999949);}
1633: int bonus_f_rnd_prec7_rndu_bumpwhole_pos(void){return test("%.7f", 3.9999999);}
1634: int bonus_f_prec8_zero(void){return test("%.8f", 0.0);}
1635: int bonus_f_prec8_nzero(void){return test("%.8f", -0.0);}
1636: int bonus_f_prec8_1(void){return test("this %.8f float", 1.5);}
1637: int bonus_f_prec8_fltonly(void){return test("%.8f", 7.5);}
1638: int bonus_f_prec8_whole(void){return test("%.8f", 1.0);}
1639: int bonus_f_prec8_negative(void){return test("%.8f", -3.85);}
1640: int bonus_f_prec8_positive_3_3(void){return test("%.8f", 573.924);}
1641: int bonus_f_prec8_negative_3_3(void){return test("%.8f", -958.125);}
1642: int bonus_f_prec8_positive_smallfpart(void){return test("%.8f", 23.00041);}
1643: int bonus_f_prec8_positive_allsmall(void){return test("%.8f", 0.00000039);}
1644: int bonus_f_prec8_negative_smallfpart(void){return test("%.8f", -7.00036);}
1645: int bonus_f_prec8_negative_allsmall(void){return test("%.8f", -0.0000032);}
1646: int bonus_f_prec8_limits_allsmall_pos(void){return test("%.8f", 0.00000001);}
1647: int bonus_f_prec8_limits_allsmall_neg(void){return test("%.8f", -0.00000001);}
1648: int bonus_f_prec8_limits_smallfpart_pos(void){return test("%.8f", 9873.000001);}
1649: int bonus_f_prec8_limits_smallfpart_neg(void){return test("%.8f", -875.000001);}
1650: int bonus_f_prec8_limits_allbig_pos(void){return test("%.8f", 999.9999999);}
1651: int bonus_f_prec8_limits_allbig_neg(void){return test("%.8f", -99.99999999);}
1652: int bonus_f_prec8_limits_bigfpart_pos(void){return test("%.8f", 0.999999);}
1653: int bonus_f_prec8_limits_bigfpart_neg(void){return test("%.8f", -0.999999);}
1654: int bonus_f_rnd_prec8_rndd_pos(void){return test("%.8f", 23.375094499);}
1655: int bonus_f_rnd_prec8_rndd_neg(void){return test("%.8f", -985.765426499);}
1656: int bonus_f_rnd_prec8_rndu_pos(void){return test("%.8f", 0.0894255);}
1657: int bonus_f_rnd_prec8_rndu_neg(void){return test("%.8f", -56.2012685);}
1658: int bonus_f_rnd_prec8_rndu_multidigit_pos(void){return test("%.8f", 43.4399999);}
1659: int bonus_f_rnd_prec8_rndu_multidigit_neg(void){return test("%.8f", -5.0299999);}
1660: int bonus_f_rnd_prec8_rndd_multidigit_pos(void){return test("%.8f", 43.43999949);}
1661: int bonus_f_rnd_prec8_rndd_multidigit_neg(void){return test("%.8f", -5.02999949);}
1662: int bonus_f_rnd_prec8_rndd_wholnobump_pos(void){return test("%.8f", 1.99999949);}
1663: int bonus_f_rnd_prec8_rndd_wholnobump_neg(void){return test("%.8f", -0.99999949);}
1664: int bonus_f_rnd_prec8_rndu_bumpwhole_pos(void){return test("%.8f", 3.9999999);}
1665: int bonus_f_prec9_zero(void){return test("%.9f", 0.0);}
1666: int bonus_f_prec9_nzero(void){return test("%.9f", -0.0);}
1667: int bonus_f_stress_prec9_1(void){return test("this %.9f float", 1.5);}
1668: int bonus_f_stress_prec9_fltonly(void){return test("%.9f", 7.5);}
1669: int bonus_f_stress_prec9_whole(void){return test("%.9f", 1.0);}
1670: int bonus_f_stress_prec9_negative(void){return test("%.9f", -3.85);}
1671: int bonus_f_stress_prec9_positive_3_3(void){return test("%.9f", 573.924);}
1672: int bonus_f_stress_prec9_negative_3_3(void){return test("%.9f", -958.125);}
1673: int bonus_f_stress_prec9_positive_smallfpart(void){return test("%.9f", 23.00041);}
1674: int bonus_f_stress_prec9_positive_allsmall(void){return test("%.9f", 0.00000039);}
1675: int bonus_f_stress_prec9_negative_smallfpart(void){return test("%.9f", -7.00036);}
1676: int bonus_f_stress_prec9_negative_allsmall(void){return test("%.9f", -0.0000032);}
1677: int bonus_f_stress_prec9_limits_allsmall_pos(void){return test("%.9f", 0.00000001);}
1678: int bonus_f_stress_prec9_limits_allsmall_neg(void){return test("%.9f", -0.00000001);}
1679: int bonus_f_stress_prec9_limits_smallfpart_pos(void){return test("%.9f", 9873.000001);}
1680: int bonus_f_stress_prec9_limits_smallfpart_neg(void){return test("%.9f", -875.000001);}
1681: int bonus_f_stress_prec9_limits_allbig_pos(void){return test("%.9f", 999.99999999);}
1682: int bonus_f_stress_prec9_limits_allbig_neg(void){return test("%.9f", -99.99999999);}
1683: int bonus_f_stress_prec9_limits_bigfpart_pos(void){return test("%.9f", 0.999999);}
1684: int bonus_f_stress_prec9_limits_bigfpart_neg(void){return test("%.9f", -0.999999);}
1685: int bonus_f_stress_prec9_rndd_pos(void){return test("%.9f", 23.375094499);}
1686: int bonus_f_stress_prec9_rndd_neg(void){return test("%.9f", -985.765426499);}
1687: int bonus_f_stress_prec9_rndu_pos(void){return test("%.9f", 0.0894255);}
1688: int bonus_f_stress_prec9_rndu_neg(void){return test("%.9f", -56.2012685);}
1689: int bonus_f_stress_prec9_rndu_multidigit_pos(void){return test("%.9f", 43.4399999);}
1690: int bonus_f_stress_prec9_rndu_multidigit_neg(void){return test("%.9f", -5.0299999);}
1691: int bonus_f_stress_prec9_rndd_multidigit_pos(void){return test("%.9f", 43.43999949);}
1692: int bonus_f_stress_prec9_rndd_multidigit_neg(void){return test("%.9f", -5.02999949);}
1693: int bonus_f_stress_prec9_rndd_wholnobump_pos(void){return test("%.9f", 1.99999949);}
1694: int bonus_f_stress_prec9_rndd_wholnobump_neg(void){return test("%.9f", -0.99999949);}
1695: int bonus_f_stress_prec9_rndu_bumpwhole_pos(void){return test("%.9f", 3.9999999);}
1696: int bonus_f_prec10_zero(void){return test("%.10f", 0.0);}
1697: int bonus_f_prec10_nzero(void){return test("%.10f", -0.0);}
1698: int bonus_f_stress_prec10_1(void){return test("this %.10f float", 1.5);}
1699: int bonus_f_stress_prec10_fltonly(void){return test("%.10f", 7.5);}
1700: int bonus_f_stress_prec10_whole(void){return test("%.10f", 1.0);}
1701: int bonus_f_stress_prec10_negative(void){return test("%.10f", -3.85);}
1702: int bonus_f_stress_prec10_positive_3_10(void){return test("%.10f", 573.924);}
1703: int bonus_f_stress_prec10_negative_3_10(void){return test("%.10f", -958.125);}
1704: int bonus_f_stress_prec10_pos(void){return test("%.10f", 23.8341375094);}
1705: int bonus_f_stress_prec10_neg(void){return test("%.10f", -985.2459765426);}
1706: int bonus_f_stress_prec10_rndd_pos(void){return test("%.10f", 23.8341375094499);}
1707: int bonus_f_stress_prec10_rndd_neg(void){return test("%.10f", -985.2459765426499);}
1708: int bonus_f_stress_prec10_rndu_pos(void){return test("%.10f", 0.87650894255);}
1709: int bonus_f_stress_prec10_rndu_neg(void){return test("%.10f", -56.47852012685);}
1710: int bonus_f_stress_prec10_positive_smallfpart(void){return test("%.10f", 23.000000041);}
1711: int bonus_f_stress_prec10_positive_allsmall(void){return test("%.10f", 0.0000000039);}
1712: int bonus_f_stress_prec10_negative_smallfpart(void){return test("%.10f", -7.000000036);}
1713: int bonus_f_stress_prec10_negative_allsmall(void){return test("%.10f", -0.000000032);}
1714: int bonus_f_stress_prec10_limits_allsmall_pos(void){return test("%.10f", 0.0000000001);}
1715: int bonus_f_stress_prec10_limits_allsmall_neg(void){return test("%.10f", -0.0000000001);}
1716: int bonus_f_stress_prec10_limits_smallfpart_pos(void){return test("%.10f", 9873.0000000001);}
1717: int bonus_f_stress_prec10_limits_smallfpart_neg(void){return test("%.10f", -875.0000000001);}
1718: int bonus_f_stress_prec10_limits_allbig_pos(void){return test("%.10f", 999.9999999999);}
1719: int bonus_f_stress_prec10_limits_allbig_neg(void){return test("%.10f", -99.9999999999);}
1720: int bonus_f_stress_prec10_limits_bigfpart_pos(void){return test("%.10f", 0.9999999999);}
1721: int bonus_f_stress_prec10_limits_bigfpart_neg(void){return test("%.10f", -0.9999999999);}
1722: int bonus_f_stress_prec11_rndu(void){return test("%.11f",        1.025978541236587568);}
1723: int bonus_f_stress_prec11_rndd(void){return test("%.11f",        1.025978548534310421);}
1724: int bonus_f_stress_prec11_limits_tiny(void){return test("%.11f", 0.000000000010000000);}
1725: int bonus_f_stress_prec11_limits_big(void){return test("%.11f", 99.999999999990000000);}
1726: int bonus_f_stress_prec12_rndu(void){return test("%.12f",        1.025978541236587568);}
1727: int bonus_f_stress_prec12_rndd(void){return test("%.12f",        1.025978548534310421);}
1728: int bonus_f_stress_prec12_limits_tiny(void){return test("%.12f", 0.000000000001000000);}
1729: int bonus_f_stress_prec12_limits_big(void){return test("%.12f", 99.999999999999000000);}
1730: int bonus_f_stress_prec13_rndu(void){return test("%.13f",        1.025978541136587568);}
1731: int bonus_f_stress_prec13_rndd(void){return test("%.13f",        1.025978548534310421);}
1732: int bonus_f_stress_prec13_limits_tiny(void){return test("%.13f", 0.000000000000100000);}
1733: int bonus_f_stress_prec13_limits_big(void){return test("%.13f", 99.999999999999900000);}
1734: int bonus_f_stress_prec14_rndu(void){return test("%.14f",        1.025978541436587568);}
1735: int bonus_f_stress_prec14_rndd(void){return test("%.14f",        1.025978548534310421);}
1736: int bonus_f_stress_prec14_limits_tiny(void){return test("%.14f", 0.000000000000010000);}
1737: int bonus_f_stress_prec14_limits_big(void){return test("%.14f",  9.999999999999990000);}
1738: int bonus_f_stress_prec15_rndu(void){return test("%.15f",        1.025978542436587568);}
1739: int bonus_f_stress_prec15_rndd(void){return test("%.15f",        1.025978548534310421);}
1740: int bonus_f_stress_prec15_limits_tiny(void){return test("%.15f", 0.000000000000001000);}
1741: int bonus_f_stress_prec15_limits_big(void){return test("%.15f",  0.999999999999999000);}
1742: int bonus_notrequired_f_stress_prec16_rndu(void){return test("%.16f",        1.025978542436587568);}
1743: int bonus_notrequired_f_stress_prec16_rndd(void){return test("%.16f",        1.025978548534310421);}
1744: int bonus_notrequired_f_stress_prec16_limits_tiny(void){return test("%.16f", 0.000000000000000100);}
1745: int bonus_notrequired_f_stress_prec16_limits_big(void){return test("%.16f",  0.999999999999999900);}
1746: int bonus_notrequired_f_stress_prec17_rndu(void){return test("%.17f",        1.025978542436587568);}
1747: int bonus_notrequired_f_stress_prec17_rndd(void){return test("%.17f",        1.025978548534310421);}
1748: int bonus_notrequired_f_stress_prec17_limits_tiny(void){return test("%.17f", 0.000000000000000010);}
1749: int bonus_notrequired_f_stress_prec17_limits_big(void){return test("%.17f",  0.999999999999999990);}
1750: int bonus_notrequired_f_stress_prec18_rndu(void){return test("%.18f",        0.125978542436587568);}
1751: int bonus_notrequired_f_stress_prec18_rndd(void){return test("%.18f",        0.125978548534310421);}
1752: int bonus_f_af_prec0_zero(void){return test("%#.0f", 0.0);}
1753: int bonus_f_af_prec0_nzero(void){return test("%#.0f", -0.0);}
1754: int bonus_f_af_prec1_zero(void){return test("%#.1f", 0.0);}
1755: int bonus_f_af_prec1_nzero(void){return test("%#.1f", -0.0);}
1756: int bonus_f_af_prec0p(void){return test("%#.0f", 7.4);}
1757: int bonus_f_af_prec1p(void){return test("%#.1f", 7.3);}
1758: int bonus_f_af_prec0n(void){return test("%#.0f", -7.4);}
1759: int bonus_f_af_prec1n(void){return test("%#.1f", -7.3);}
1760: int bonus_f_as_prec0_zero(void){return test("%+.0f", 0.0);}
1761: int bonus_f_as_prec0_nzero(void){return test("%+.0f", -0.0);}
1762: int bonus_f_as_prec3_zero(void){return test("%+.3f", 0.0);}
1763: int bonus_f_as_prec3_nzero(void){return test("%+.3f", -0.0);}
1764: int bonus_f_as_prec0p_as(void){return test("%+.0f", 7.4);}
1765: int bonus_f_as_prec3p_as(void){return test("%+.3f", 7.3);}
1766: int bonus_f_as_prec0n_as(void){return test("%+.0f", -7.4);}
1767: int bonus_f_as_prec3n_as(void){return test("%+.3f", -7.3);}
1768: int bonus_f_wprec0p_zero(void){return test("%5.0f", 0.0);}
1769: int bonus_f_wprec0p_nzero(void){return test("%5.0f", -0.0);}
1770: int bonus_f_wprec3p_zero(void){return test("%5.3f", 0.0);}
1771: int bonus_f_wprec3p_nzero(void){return test("%5.3f", -0.0);}
1772: int bonus_f_wprec0p(void){return test("%5.0f", 7.3);}
1773: int bonus_f_wprec1p(void){return test("%5.1f", 7.3);}
1774: int bonus_f_wprec3p(void){return test("%5.3f", 7.3);}
1775: int bonus_f_wprec6p(void){return test("%5.6f", 7.3);}
1776: int bonus_f_wprec0n(void){return test("%5.0f", -7.3);}
1777: int bonus_f_wprec1n(void){return test("%5.1f", -7.3);}
1778: int bonus_f_wprec3n(void){return test("%5.3f", -7.3);}
1779: int bonus_f_wprec6n(void){return test("%5.6f", -7.3);}
1780: int bonus_f_wzp_prec0p_zero(void){return test("%05.0f", 0.0);}
1781: int bonus_f_wzp_prec0p_nzero(void){return test("%05.0f", -0.0);}
1782: int bonus_f_wzp_prec3p_zero(void){return test("%05.3f", 0.0);}
1783: int bonus_f_wzp_prec3p_nzero(void){return test("%05.3f", -0.0);}
1784: int bonus_f_wzp_prec0p(void){return test("%05.0f", 7.3);}
1785: int bonus_f_wzp_prec1p(void){return test("%05.1f", 7.3);}
1786: int bonus_f_wzp_prec3p(void){return test("%05.3f", 7.3);}
1787: int bonus_f_wzp_prec6p(void){return test("%05.6f", 7.3);}
1788: int bonus_f_wzp_prec0n(void){return test("%05.0f", -7.3);}
1789: int bonus_f_wzp_prec1n(void){return test("%05.1f", -7.3);}
1790: int bonus_f_wzp_prec3n(void){return test("%05.3f", -7.3);}
1791: int bonus_f_wzp_prec6n(void){return test("%05.6f", -7.3);}
1792: int bonus_f_wlj_prec0p_zero(void){return test("%-5.0f", 0.0);}
1793: int bonus_f_wlj_prec0p_nzero(void){return test("%-5.0f", -0.0);}
1794: int bonus_f_wlj_prec3p_zero(void){return test("%-5.3f", 0.0);}
1795: int bonus_f_wlj_prec3p_nzero(void){return test("%-5.3f", -0.0);}
1796: int bonus_f_wlj_prec0p(void){return test("%-5.0f", 7.3);}
1797: int bonus_f_wlj_prec1p(void){return test("%-5.1f", 7.3);}
1798: int bonus_f_wlj_prec3p(void){return test("%-5.3f", 7.3);}
1799: int bonus_f_wlj_prec6p(void){return test("%-5.6f", 7.3);}
1800: int bonus_f_wlj_prec0n(void){return test("%-5.0f", -7.3);}
1801: int bonus_f_wlj_prec1n(void){return test("%-5.1f", -7.3);}
1802: int bonus_f_wlj_prec3n(void){return test("%-5.3f", -7.3);}
1803: int bonus_f_wlj_prec6n(void){return test("%-5.6f", -7.3);}
1804: int bonus_f_wzplj_prec0p_ignoreflag_zero(void){return test("%-05.0f", 0.0);}
1805: int bonus_f_wzplj_prec0p_ignoreflag_nzero(void){return test("%-05.0f", -0.0);}
1806: int bonus_f_wzplj_prec3p_ignoreflag_zero(void){return test("%-05.3f", 0.0);}
1807: int bonus_f_wzplj_prec3p_ignoreflag_nzero(void){return test("%-05.3f", -0.0);}
1808: int bonus_f_wzplj_prec0p_ignoreflag(void){return test("%-05.0f", 7.3);}
1809: int bonus_f_wzplj_prec1p_ignoreflag(void){return test("%-05.1f", 7.3);}
1810: int bonus_f_wzplj_prec3p_ignoreflag(void){return test("%-05.3f", 7.3);}
1811: int bonus_f_wzplj_prec6p_ignoreflag(void){return test("%-05.6f", 7.3);}
1812: int bonus_f_wzplj_prec0n_ignoreflag(void){return test("%-05.0f", -7.3);}
1813: int bonus_f_wzplj_prec1n_ignoreflag(void){return test("%-05.1f", -7.3);}
1814: int bonus_f_wzplj_prec3n_ignoreflag(void){return test("%-05.3f", -7.3);}
1815: int bonus_f_wzplj_prec6n_ignoreflag(void){return test("%-05.6f", -7.3);}
1816: int bonus_f_wzpljr_prec0p_ignoreflag_zero(void){return test("%0-5.0f", 0.0);}
1817: int bonus_f_wzpljr_prec0p_ignoreflag_nzero(void){return test("%0-5.0f", -0.0);}
1818: int bonus_f_wzpljr_prec3p_ignoreflag_zero(void){return test("%0-5.3f", 0.0);}
1819: int bonus_f_wzpljr_prec3p_ignoreflag_nzero(void){return test("%0-5.3f", -0.0);}
1820: int bonus_f_wzpljr_prec0p_ignoreflag(void){return test("%0-5.0f", 7.3);}
1821: int bonus_f_wzpljr_prec1p_ignoreflag(void){return test("%0-5.1f", 7.3);}
1822: int bonus_f_wzpljr_prec3p_ignoreflag(void){return test("%0-5.3f", 7.3);}
1823: int bonus_f_wzpljr_prec6p_ignoreflag(void){return test("%0-5.6f", 7.3);}
1824: int bonus_f_wzpljr_prec0n_ignoreflag(void){return test("%0-5.0f", -7.3);}
1825: int bonus_f_wzpljr_prec1n_ignoreflag(void){return test("%0-5.1f", -7.3);}
1826: int bonus_f_wzpljr_prec3n_ignoreflag(void){return test("%0-5.3f", -7.3);}
1827: int bonus_f_wzpljr_prec6n_ignoreflag(void){return test("%0-5.6f", -7.3);}
1828: int bonus_f_wzpljaf_prec0p_zero(void){return test("%#-5.0f", 0.0);}
1829: int bonus_f_wzpljaf_prec0p_nzero(void){return test("%#-5.0f", -0.0);}
1830: int bonus_f_wzpljaf_prec3p_zero(void){return test("%#-5.3f", 0.0);}
1831: int bonus_f_wzpljaf_prec3p_nzero(void){return test("%#-5.3f", -0.0);}
1832: int bonus_f_wzpljaf_prec0p(void){return test("%#-5.0f", 7.3);}
1833: int bonus_f_wzpljaf_prec1p(void){return test("%#-5.1f", 7.3);}
1834: int bonus_f_wzpljaf_prec3p(void){return test("%#-5.3f", 7.3);}
1835: int bonus_f_wzpljaf_prec6p(void){return test("%#-5.6f", 7.3);}
1836: int bonus_f_wzpljaf_prec0n(void){return test("%#-5.0f", -7.3);}
1837: int bonus_f_wzpljaf_prec1n(void){return test("%#-5.1f", -7.3);}
1838: int bonus_f_wzpljaf_prec3n(void){return test("%#-5.3f", -7.3);}
1839: int bonus_f_wzpljaf_prec6n(void){return test("%#-5.6f", -7.3);}
1840: int bonus_f_was_prec0p_zero(void){return test("%+5.0f", 0.0);}
1841: int bonus_f_was_prec0p_nzero(void){return test("%+5.0f", -0.0);}
1842: int bonus_f_was_prec3p_zero(void){return test("%+5.3f", 0.0);}
1843: int bonus_f_was_prec3p_nzero(void){return test("%+5.3f", -0.0);}
1844: int bonus_f_was_prec0p(void){return test("%+5.0f", 7.3);}
1845: int bonus_f_was_prec1p(void){return test("%+5.1f", 7.3);}
1846: int bonus_f_was_prec3p(void){return test("%+5.3f", 7.3);}
1847: int bonus_f_was_prec6p(void){return test("%+5.6f", 7.3);}
1848: int bonus_f_was_prec0n(void){return test("%+5.0f", -7.3);}
1849: int bonus_f_was_prec1n(void){return test("%+5.1f", -7.3);}
1850: int bonus_f_was_prec3n(void){return test("%+5.3f", -7.3);}
1851: int bonus_f_was_prec6n(void){return test("%+5.6f", -7.3);}
1852: int bonus_f_wzpas_prec0p_zero(void){return test("%+05.0f", 0.0);}
1853: int bonus_f_wzpas_prec0p_nzero(void){return test("%+05.0f", -0.0);}
1854: int bonus_f_wzpas_prec3p_zero(void){return test("%+05.3f", 0.0);}
1855: int bonus_f_wzpas_prec3p_nzero(void){return test("%+05.3f", -0.0);}
1856: int bonus_f_wzpas_prec0p(void){return test("%+05.0f", 7.3);}
1857: int bonus_f_wzpas_prec1p(void){return test("%+05.1f", 7.3);}
1858: int bonus_f_wzpas_prec3p(void){return test("%+05.3f", 7.3);}
1859: int bonus_f_wzpas_prec6p(void){return test("%+05.6f", 7.3);}
1860: int bonus_f_wzpas_prec0n(void){return test("%+05.0f", -7.3);}
1861: int bonus_f_wzpas_prec1n(void){return test("%+05.1f", -7.3);}
1862: int bonus_f_wzpas_prec3n(void){return test("%+05.3f", -7.3);}
1863: int bonus_f_wzpas_prec6n(void){return test("%+05.6f", -7.3);}
1864: int bonus_f_wljas_prec0p_zero(void){return test("%+-5.0f", 0.0);}
1865: int bonus_f_wljas_prec0p_nzero(void){return test("%+-5.0f", -0.0);}
1866: int bonus_f_wljas_prec3p_zero(void){return test("%+-5.3f", 0.0);}
1867: int bonus_f_wljas_prec3p_nzero(void){return test("%+-5.3f", -0.0);}
1868: int bonus_f_wljas_prec0p(void){return test("%+-5.0f", 7.3);}
1869: int bonus_f_wljas_prec1p(void){return test("%+-5.1f", 7.3);}
1870: int bonus_f_wljas_prec3p(void){return test("%+-5.3f", 7.3);}
1871: int bonus_f_wljas_prec6p(void){return test("%+-5.6f", 7.3);}
1872: int bonus_f_wljas_prec0n(void){return test("%+-5.0f", -7.3);}
1873: int bonus_f_wljas_prec1n(void){return test("%+-5.1f", -7.3);}
1874: int bonus_f_wljas_prec3n(void){return test("%+-5.3f", -7.3);}
1875: int bonus_f_wljas_prec6n(void){return test("%+-5.6f", -7.3);}
1876: int bonus_f_wzpljas_prec0p_ignoreflag_zero(void){return test("%+-05.0f", 0.0);}
1877: int bonus_f_wzpljas_prec0p_ignoreflag_nzero(void){return test("%+-05.0f", -0.0);}
1878: int bonus_f_wzpljas_prec3p_ignoreflag_zero(void){return test("%+-05.3f", 0.0);}
1879: int bonus_f_wzpljas_prec3p_ignoreflag_nzero(void){return test("%+-05.3f", -0.0);}
1880: int bonus_f_wzpljas_prec0p_ignoreflag(void){return test("%+-05.0f", 7.3);}
1881: int bonus_f_wzpljas_prec1p_ignoreflag(void){return test("%+-05.1f", 7.3);}
1882: int bonus_f_wzpljas_prec3p_ignoreflag(void){return test("%+-05.3f", 7.3);}
1883: int bonus_f_wzpljas_prec6p_ignoreflag(void){return test("%+-05.6f", 7.3);}
1884: int bonus_f_wzpljas_prec0n_ignoreflag(void){return test("%+-05.0f", -7.3);}
1885: int bonus_f_wzpljas_prec1n_ignoreflag(void){return test("%+-05.1f", -7.3);}
1886: int bonus_f_wzpljas_prec3n_ignoreflag(void){return test("%+-05.3f", -7.3);}
1887: int bonus_f_wzpljas_prec6n_ignoreflag(void){return test("%+-05.6f", -7.3);}
1888: int bonus_f_wzpljras_prec0p_zero(void){return test("%+-05.0f", 0.0);}
1889: int bonus_f_wzpljras_prec0p_nzero(void){return test("%+-05.0f", -0.0);}
1890: int bonus_f_wzpljras_prec3p_zero(void){return test("%+-05.3f", 0.0);}
1891: int bonus_f_wzpljras_prec3p_nzero(void){return test("%+-05.3f", -0.0);}
1892: int bonus_f_wzpljras_prec0p(void){return test("%-+5.0f", 7.3);}
1893: int bonus_f_wzpljras_prec1p(void){return test("%-+5.1f", 7.3);}
1894: int bonus_f_wzpljras_prec3p(void){return test("%-+5.3f", 7.3);}
1895: int bonus_f_wzpljras_prec6p(void){return test("%-+5.6f", 7.3);}
1896: int bonus_f_wzpljras_prec0n(void){return test("%-+5.0f", -7.3);}
1897: int bonus_f_wzpljras_prec1n(void){return test("%-+5.1f", -7.3);}
1898: int bonus_f_wzpljras_prec3n(void){return test("%-+5.3f", -7.3);}
1899: int bonus_f_wzpljras_prec6n(void){return test("%-+5.6f", -7.3);}
1900: int bonus_f_wzpljafas_prec0p_zero(void){return test("%+#-05.0f", 0.0);}
1901: int bonus_f_wzpljafas_prec0p_nzero(void){return test("%+#-05.0f", -0.0);}
1902: int bonus_f_wzpljafas_prec3p_zero(void){return test("%+#-05.3f", 0.0);}
1903: int bonus_f_wzpljafas_prec3p_nzero(void){return test("%+#-05.3f", -0.0);}
1904: int bonus_f_wzpljafas_prec0p(void){return test("%+#-5.0f", 7.3);}
1905: int bonus_f_wzpljafas_prec1p(void){return test("%+#-5.1f", 7.3);}
1906: int bonus_f_wzpljafas_prec3p(void){return test("%+#-5.3f", 7.3);}
1907: int bonus_f_wzpljafas_prec6p(void){return test("%+#-5.6f", 7.3);}
1908: int bonus_f_wzpljafas_prec0n(void){return test("%+#-5.0f", -7.3);}
1909: int bonus_f_wzpljafas_prec1n(void){return test("%+#-5.1f", -7.3);}
1910: int bonus_f_wzpljafas_prec3n(void){return test("%+#-5.3f", -7.3);}
1911: int bonus_f_wzpljafas_prec6n(void){return test("%+#-5.6f", -7.3);}
1912: int bonus_f_wsp_prec0p_zero(void){return test("% 5.0f", 0.0);}
1913: int bonus_f_wsp_prec0p_nzero(void){return test("% 5.0f", -0.0);}
1914: int bonus_f_wsp_prec3p_zero(void){return test("% 5.3f", 0.0);}
1915: int bonus_f_wsp_prec3p_nzero(void){return test("% 5.3f", -0.0);}
1916: int bonus_f_wsp_prec0p(void){return test("% 5.0f", 7.3);}
1917: int bonus_f_wsp_prec1p(void){return test("% 5.1f", 7.3);}
1918: int bonus_f_wsp_prec3p(void){return test("% 5.3f", 7.3);}
1919: int bonus_f_wsp_prec6p(void){return test("% 5.6f", 7.3);}
1920: int bonus_f_wsp_prec0n(void){return test("% 5.0f", -7.3);}
1921: int bonus_f_wsp_prec1n(void){return test("% 5.1f", -7.3);}
1922: int bonus_f_wsp_prec3n(void){return test("% 5.3f", -7.3);}
1923: int bonus_f_wsp_prec6n(void){return test("% 5.6f", -7.3);}
1924: int bonus_f_wzpsp_prec0p_zero(void){return test("% 05.0f", 0.0);}
1925: int bonus_f_wzpsp_prec0p_nzero(void){return test("% 05.0f", -0.0);}
1926: int bonus_f_wzpsp_prec3p_zero(void){return test("% 05.3f", 0.0);}
1927: int bonus_f_wzpsp_prec3p_nzero(void){return test("% 05.3f", -0.0);}
1928: int bonus_f_wzpsp_prec0p(void){return test("% 05.0f", 7.3);}
1929: int bonus_f_wzpsp_prec1p(void){return test("% 05.1f", 7.3);}
1930: int bonus_f_wzpsp_prec3p(void){return test("% 05.3f", 7.3);}
1931: int bonus_f_wzpsp_prec6p(void){return test("% 05.6f", 7.3);}
1932: int bonus_f_wzpsp_prec0n(void){return test("% 05.0f", -7.3);}
1933: int bonus_f_wzpsp_prec1n(void){return test("% 05.1f", -7.3);}
1934: int bonus_f_wzpsp_prec3n(void){return test("% 05.3f", -7.3);}
1935: int bonus_f_wzpsp_prec6n(void){return test("% 05.6f", -7.3);}
1936: int bonus_f_wljsp_prec0p_zero(void){return test("% -5.0f", 0.0);}
1937: int bonus_f_wljsp_prec0p_nzero(void){return test("% -5.0f", -0.0);}
1938: int bonus_f_wljsp_prec3p_zero(void){return test("% -5.3f", 0.0);}
1939: int bonus_f_wljsp_prec3p_nzero(void){return test("% -5.3f", -0.0);}
1940: int bonus_f_wljsp_prec0p(void){return test("% -5.0f", 7.3);}
1941: int bonus_f_wljsp_prec1p(void){return test("% -5.1f", 7.3);}
1942: int bonus_f_wljsp_prec3p(void){return test("% -5.3f", 7.3);}
1943: int bonus_f_wljsp_prec6p(void){return test("% -5.6f", 7.3);}
1944: int bonus_f_wljsp_prec0n(void){return test("% -5.0f", -7.3);}
1945: int bonus_f_wljsp_prec1n(void){return test("% -5.1f", -7.3);}
1946: int bonus_f_wljsp_prec3n(void){return test("% -5.3f", -7.3);}
1947: int bonus_f_wljsp_prec6n(void){return test("% -5.6f", -7.3);}
1948: int bonus_f_wzpljsp_prec0p_zero(void){return test("% -05.0f", 0.0);}
1949: int bonus_f_wzpljsp_prec0p_nzero(void){return test("% -05.0f", -0.0);}
1950: int bonus_f_wzpljsp_prec3p_zero(void){return test("% -05.3f", 0.0);}
1951: int bonus_f_wzpljsp_prec3p_nzero(void){return test("% -05.3f", -0.0);}
1952: int bonus_f_wzpljsp_prec0p_ignoreflag(void){return test("% -05.0f", 7.3);}
1953: int bonus_f_wzpljsp_prec1p_ignoreflag(void){return test("% -05.1f", 7.3);}
1954: int bonus_f_wzpljsp_prec3p_ignoreflag(void){return test("% -05.3f", 7.3);}
1955: int bonus_f_wzpljsp_prec6p_ignoreflag(void){return test("% -05.6f", 7.3);}
1956: int bonus_f_wzpljsp_prec0n_ignoreflag(void){return test("% -05.0f", -7.3);}
1957: int bonus_f_wzpljsp_prec1n_ignoreflag(void){return test("% -05.1f", -7.3);}
1958: int bonus_f_wzpljsp_prec3n_ignoreflag(void){return test("% -05.3f", -7.3);}
1959: int bonus_f_wzpljsp_prec6n_ignoreflag(void){return test("% -05.6f", -7.3);}
1960: int bonus_f_wzpljrsp_prec0p_zero(void){return test("%- 5.0f", 0.0);}
1961: int bonus_f_wzpljrsp_prec0p_nzero(void){return test("%- 5.0f", -0.0);}
1962: int bonus_f_wzpljrsp_prec3p_zero(void){return test("%- 5.3f", 0.0);}
1963: int bonus_f_wzpljrsp_prec3p_nzero(void){return test("%- 5.3f", -0.0);}
1964: int bonus_f_wzpljrsp_prec0p(void){return test("%- 5.0f", 7.3);}
1965: int bonus_f_wzpljrsp_prec1p(void){return test("%- 5.1f", 7.3);}
1966: int bonus_f_wzpljrsp_prec3p(void){return test("%- 5.3f", 7.3);}
1967: int bonus_f_wzpljrsp_prec6p(void){return test("%- 5.6f", 7.3);}
1968: int bonus_f_wzpljrsp_prec0n(void){return test("%- 5.0f", -7.3);}
1969: int bonus_f_wzpljrsp_prec1n(void){return test("%- 5.1f", -7.3);}
1970: int bonus_f_wzpljrsp_prec3n(void){return test("%- 5.3f", -7.3);}
1971: int bonus_f_wzpljrsp_prec6n(void){return test("%- 5.6f", -7.3);}
1972: int bonus_f_wzpljafsp_prec0p_zero(void){return test("% #-05.0f", 0.0);}
1973: int bonus_f_wzpljafsp_prec0p_nzero(void){return test("% #-05.0f", -0.0);}
1974: int bonus_f_wzpljafsp_prec3p_zero(void){return test("% #-05.3f", 0.0);}
1975: int bonus_f_wzpljafsp_prec3p_nzero(void){return test("% #-05.3f", -0.0);}
1976: int bonus_f_wzpljafsp_prec0p(void){return test("% #-5.0f", 7.3);}
1977: int bonus_f_wzpljafsp_prec1p(void){return test("% #-5.1f", 7.3);}
1978: int bonus_f_wzpljafsp_prec3p(void){return test("% #-5.3f", 7.3);}
1979: int bonus_f_wzpljafsp_prec6p(void){return test("% #-5.6f", 7.3);}
1980: int bonus_f_wzpljafsp_prec0n(void){return test("% #-5.0f", -7.3);}
1981: int bonus_f_wzpljafsp_prec1n(void){return test("% #-5.1f", -7.3);}
1982: int bonus_f_wzpljafsp_prec3n(void){return test("% #-5.3f", -7.3);}
1983: int bonus_f_wzpljafsp_prec6n(void){return test("% #-5.6f", -7.3);}
1984: int bonus_f_assp_prec0p_ignoreflag(void){return test("%+ .0f", 7.3);}
1985: int bonus_f_assp_prec1p_ignoreflag(void){return test("%+ .1f", 7.3);}
1986: int bonus_f_assp_prec3p_ignoreflag(void){return test("%+ .3f", 7.3);}
1987: int bonus_f_assp_prec6p_ignoreflag(void){return test("%+ .6f", 7.3);}
1988: int bonus_f_assp_prec0n_ignoreflag(void){return test("%+ .0f", -7.3);}
1989: int bonus_f_assp_prec1n_ignoreflag(void){return test("%+ .1f", -7.3);}
1990: int bonus_f_assp_prec3n_ignoreflag(void){return test("%+ .3f", -7.3);}
1991: int bonus_f_assp_prec6n_ignoreflag(void){return test("%+ .6f", -7.3);}
1992: int bonus_f_asspr_prec0p_ignoreflag(void){return test("% +.0f", 7.3);}
1993: int bonus_f_asspr_prec1p_ignoreflag(void){return test("% +.1f", 7.3);}
1994: int bonus_f_asspr_prec3p_ignoreflag(void){return test("% +.3f", 7.3);}
1995: int bonus_f_asspr_prec6p_ignoreflag(void){return test("% +.6f", 7.3);}
1996: int bonus_f_asspr_prec0n_ignoreflag(void){return test("% +.0f", -7.3);}
1997: int bonus_f_asspr_prec1n_ignoreflag(void){return test("% +.1f", -7.3);}
1998: int bonus_f_asspr_prec3n_ignoreflag(void){return test("% +.3f", -7.3);}
1999: int bonus_f_asspr_prec6n_ignoreflag(void){return test("% +.6f", -7.3);}
2000: int bonus_notrequired_f_overprec_might_be_undefbehav_100(void){return test("%.100f", 0.237);}
2001: int bonus_notrequired_f_overprec_might_be_undefbehav_32(void){return test("%.32f", 0.237);}
2002: int bonus_notrequired_f_overprec_might_be_undefbehav_4(void){return test("%.4f", 0.237);}
2003: int bonus_notrequired_f_overprec_might_be_undefbehav_1000(void){return test("%.4f", -0.106577568068517810765107851705167);}
2004: int bonus_notrequired_f_overprec_might_be_undefbehav_10_from_0(void){return test("%.10f", 0.0);}
2005: int bonus_notrequired_f_overprec_might_be_undefbehav_2000(void){return test("%.2000f", 623.28376510723481);}
2006: int bonus_notrequired_f_overprec_might_be_undefbehav_dblmin(void){return test("%.2000f", DBL_MIN);}
2007: int bonus_notrequired_f_overprec_might_be_undefbehav_ndblmin(void){return test("%.2000f", -DBL_MIN);}
2008: int bonus_notrequired_f_limits_dblmax_prec0(void){return test("%.0f", DBL_MAX);}
2009: int bonus_notrequired_f_limits_dblmax_prec3(void){return test("%.3f", DBL_MAX);}
2010: int bonus_notrequired_f_limits_dblmax_precd(void){return test("%f", DBL_MAX);}
2011: int bonus_notrequired_f_limits_dblmax_prec8(void){return test("%.8f", DBL_MAX);}
2012: int bonus_notrequired_f_stress_limits_dblmax_prec12(void){return test("%.12f", DBL_MAX);}
2013: int bonus_notrequired_f_stress_limits_dblmax_prec16(void){return test("%.16f", DBL_MAX);}
2014: int bonus_notrequired_f_stress_limits_dblmax_prec18(void){return test("%.18f", DBL_MAX);}
2015: int bonus_notrequired_f_limits_ndblmax_prec0(void){return test("%.0f", -DBL_MAX);}
2016: int bonus_notrequired_f_limits_ndblmax_prec3(void){return test("%.3f", -DBL_MAX);}
2017: int bonus_notrequired_f_limits_ndblmax_precd(void){return test("%f", -DBL_MAX);}
2018: int bonus_notrequired_f_limits_ndblmax_prec8(void){return test("%.8f", -DBL_MAX);}
2019: int bonus_notrequired_f_stress_limits_ndblmax_prec12(void){return test("%.12f", -DBL_MAX);}
2020: int bonus_notrequired_f_stress_limits_ndblmax_prec16(void){return test("%.16f", -DBL_MAX);}
2021: int bonus_notrequired_f_stress_limits_ndblmax_prec18(void){return test("%.18f", -DBL_MAX);}
2022: int bonus_notrequired_f_limits_dblmin_prec0(void){return test("%.0f", DBL_MIN);}
2023: int bonus_notrequired_f_limits_dblmin_prec3(void){return test("%.3f", DBL_MIN);}
2024: int bonus_notrequired_f_limits_dblmin_precd(void){return test("%f", DBL_MIN);}
2025: int bonus_notrequired_f_limits_dblmin_prec8(void){return test("%.8f", DBL_MIN);}
2026: int bonus_notrequired_f_stress_limits_dblmin_prec12(void){return test("%.12f", DBL_MIN);}
2027: int bonus_notrequired_f_stress_limits_dblmin_prec16(void){return test("%.16f", DBL_MIN);}
2028: int bonus_notrequired_f_stress_limits_dblmin_prec18(void){return test("%.18f", DBL_MIN);}
2029: int bonus_notrequired_f_limits_ndblmin_prec0(void){return test("%.0f", -DBL_MIN);}
2030: int bonus_notrequired_f_limits_ndblmin_prec3(void){return test("%.3f", -DBL_MIN);}
2031: int bonus_notrequired_f_limits_ndblmin_precd(void){return test("%f", -DBL_MIN);}
2032: int bonus_notrequired_f_limits_ndblmin_prec8(void){return test("%.8f", -DBL_MIN);}
2033: int bonus_notrequired_f_stress_limits_ndblmin_prec12(void){return test("%.12f", -DBL_MIN);}
2034: int bonus_notrequired_f_stress_limits_ndblmin_prec16(void){return test("%.16f", -DBL_MIN);}
2035: int bonus_notrequired_f_stress_limits_ndblmin_prec18(void){return test("%.18f", -DBL_MIN);}
2036: int bonus_notrequired_f_reserved_values_inf(void){double special; *((unsigned long *)(&special)) = DBL_INF;
2037: int bonus_notrequired_f_reserved_values_ninf(void){double special; *((unsigned long *)(&special)) = DBL_NINF;
2038: int bonus_notrequired_f_reserved_values_nan(void){double special; *((unsigned long *)(&special)) = DBL_NAN;
2039: int bonus_notrequired_f_reserved_values_pzero(void){double special; *((unsigned long *)(&special)) = DBL_PZERO;
2040: int bonus_notrequired_f_reserved_values_nzero(void){double special; *((unsigned long *)(&special)) = DBL_NZERO;
2041: int bonus_notrequired_f_reserved_values_inf_6w(void){double special; *((unsigned long *)(&special)) = DBL_INF;
2042: int bonus_notrequired_f_reserved_values_ninf_6w(void){double special; *((unsigned long *)(&special)) = DBL_NINF;
2043: int bonus_notrequired_f_reserved_values_nan_6w(void){double special; *((unsigned long *)(&special)) = DBL_NAN;
2044: int bonus_notrequired_f_reserved_values_pzero_6w(void){double special; *((unsigned long *)(&special)) = DBL_PZERO;
2045: int bonus_notrequired_f_reserved_values_nzero_6w(void){double special; *((unsigned long *)(&special)) = DBL_NZERO;
2046: int bonus_notrequired_f_reserved_values_inf_6wlj(void){double special; *((unsigned long *)(&special)) = DBL_INF;
2047: int bonus_notrequired_f_reserved_values_ninf_6wlj(void){double special; *((unsigned long *)(&special)) = DBL_NINF;
2048: int bonus_notrequired_f_reserved_values_nan_6wlj(void){double special; *((unsigned long *)(&special)) = DBL_NAN;
2049: int bonus_notrequired_f_reserved_values_pzero_6wlj(void){double special; *((unsigned long *)(&special)) = DBL_PZERO;
2050: int bonus_notrequired_f_reserved_values_nzero_6wlj(void){double special; *((unsigned long *)(&special)) = DBL_NZERO;
2051: int bonus_notrequired_f_reserved_values_inf_6was(void){double special; *((unsigned long *)(&special)) = DBL_INF;
2052: int bonus_notrequired_f_reserved_values_ninf_6was(void){double special; *((unsigned long *)(&special)) = DBL_NINF;
2053: int bonus_notrequired_f_reserved_values_nan_6was(void){double special; *((unsigned long *)(&special)) = DBL_NAN;
2054: int bonus_notrequired_f_reserved_values_pzero_6was(void){double special; *((unsigned long *)(&special)) = DBL_PZERO;
2055: int bonus_notrequired_f_reserved_values_nzero_6was(void){double special; *((unsigned long *)(&special)) = DBL_NZERO;
2056: int bonus_notrequired_f_reserved_values_inf_10w_prec7(void){double special; *((unsigned long *)(&special)) = DBL_INF;
2057: int bonus_notrequired_f_reserved_values_ninf_10w_prec7(void){double special; *((unsigned long *)(&special)) = DBL_NINF;
2058: int bonus_notrequired_f_reserved_values_nan_10w_prec7(void){double special; *((unsigned long *)(&special)) = DBL_NAN;
2059: int bonus_notrequired_f_reserved_values_pzero_10w_prec7(void){double special; *((unsigned long *)(&special)) = DBL_PZERO;
2060: int bonus_notrequired_f_reserved_values_nzero_10w_prec7(void){double special; *((unsigned long *)(&special)) = DBL_NZERO;
2061: int bonus_notrequired_f_reserved_values_inf_sp_prec7(void){double special; *((unsigned long *)(&special)) = DBL_INF;
2062: int bonus_notrequired_f_reserved_values_ninf_sp_prec7(void){double special; *((unsigned long *)(&special)) = DBL_NINF;
2063: int bonus_notrequired_f_reserved_values_nan_sp_prec7(void){double special; *((unsigned long *)(&special)) = DBL_NAN;
2064: int bonus_notrequired_f_reserved_values_pzero_sp_prec7(void){double special; *((unsigned long *)(&special)) = DBL_PZERO;
2065: int bonus_notrequired_f_reserved_values_nzero_sp_prec7(void){double special; *((unsigned long *)(&special)) = DBL_NZERO;
2066: int bonus_notrequired_f_reserved_values_inf_sp(void){double special; *((unsigned long *)(&special)) = DBL_INF;
2067: int bonus_notrequired_f_reserved_values_ninf_sp(void){double special; *((unsigned long *)(&special)) = DBL_NINF;
2068: int bonus_notrequired_f_reserved_values_nan_sp(void){double special; *((unsigned long *)(&special)) = DBL_NAN;
2069: int bonus_notrequired_f_reserved_values_pzero_sp(void){double special; *((unsigned long *)(&special)) = DBL_PZERO;
2070: int bonus_notrequired_f_reserved_values_nzero_sp(void){double special; *((unsigned long *)(&special)) = DBL_NZERO;
2071: int bonus_notrequired_f_reserved_values_inf_6wzp(void){double special; *((unsigned long *)(&special)) = DBL_INF;
2072: int bonus_notrequired_f_reserved_values_ninf_6wzp(void){double special; *((unsigned long *)(&special)) = DBL_NINF;
2073: int bonus_notrequired_f_reserved_values_nan_6wzp(void){double special; *((unsigned long *)(&special)) = DBL_NAN;
2074: int bonus_notrequired_f_reserved_values_pzero_6wzp(void){double special; *((unsigned long *)(&special)) = DBL_PZERO;
2075: int bonus_notrequired_f_reserved_values_nzero_6wzp(void){double special; *((unsigned long *)(&special)) = DBL_NZERO;
2076: int bonus_g_basic_1(void){return test("this %g scientific notation", 1.5);}
2077: int bonus_g_basic_fltonly(void){return test("%g", 7.5);}
2078: int bonus_g_basic_zero(void){return test("%g", 0.0);}
2079: int bonus_g_basic_nzero(void){return test("%g", -0.0);}
2080: int bonus_g_basic_whole(void){return test("%g", 1.0);}
2081: int bonus_g_basic_negative(void){return test("%g", -3.85);}
2082: int bonus_g_basic_positive_3_3(void){return test("%g", 573.924);}
2083: int bonus_g_basic_negative_3_3(void){return test("%g", -958.125);}
2084: int bonus_g_basic_positive_smallfpart(void){return test("%g", 23.00041);}
2085: int bonus_g_basic_positive_allsmall(void){return test("%g", 0.000039);}
2086: int bonus_g_basic_negative_smallfpart(void){return test("%g", -7.00036);}
2087: int bonus_g_basic_negative_allsmall(void){return test("%g", -0.00032);}
2088: int bonus_g_basic_limits_allsmall_pos(void){return test("%g", 0.000001);}
2089: int bonus_g_basic_limits_allsmall_neg(void){return test("%g", -0.000001);}
2090: int bonus_g_basic_limits_smallfpart_pos(void){return test("%g", 9873.000001);}
2091: int bonus_g_basic_limits_smallfpart_neg(void){return test("%g", -875.000001);}
2092: int bonus_g_basic_limits_allbig_pos(void){return test("%g", 999.999999);}
2093: int bonus_g_basic_limits_allbig_neg(void){return test("%g", -99.999999);}
2094: int bonus_g_basic_limits_bigfpart_pos(void){return test("%g", 0.999999);}
2095: int bonus_g_basic_limits_bigfpart_neg(void){return test("%g", -0.999999);}
2096: int bonus_g_rndd_pos(void){return test("%g", 23.375094499);}
2097: int bonus_g_rndd_neg(void){return test("%g", -985.765426499);}
2098: int bonus_g_rndu_pos(void){return test("%g", 0.0894255);}
2099: int bonus_g_rndu_neg(void){return test("%g", -56.2012685);}
2100: int bonus_g_rndu_multidigit_pos(void){return test("%g", 43.4399999);}
2101: int bonus_g_rndu_multidigit_neg(void){return test("%g", -5.0299999);}
2102: int bonus_g_rndd_multidigit_pos(void){return test("%g", 43.43999949);}
2103: int bonus_g_rndd_multidigit_neg(void){return test("%g", -5.02999949);}
2104: int bonus_g_rndd_wholnobump_pos(void){return test("%g", 1.99999949);}
2105: int bonus_g_rndd_wholnobump_neg(void){return test("%g", -0.99999949);}
2106: int bonus_g_rndu_bumpwhole_pos(void){return test("%g", 3.9999999);}
2107: int bonus_g_rndu_bumpwhole_neg(void){return test("%g", -5.9999999);}
2108: int bonus_g_prec0_zero(void){return test("%.0g", 0.0);}
2109: int bonus_g_prec0_nzero(void){return test("%.0g", -0.0);}
2110: int bonus_g_prec0_1(void){return test("this %.0g scientific notation", 1.6);}
2111: int bonus_g_prec0_fltonly(void){return test("%.0g", 7.4);}
2112: int bonus_g_prec0_whole(void){return test("%.0g", 1.0);}
2113: int bonus_g_prec0_negative(void){return test("%.0g", -3.85);}
2114: int bonus_g_prec0_positive_3_3(void){return test("%.0g", 573.924);}
2115: int bonus_g_prec0_negative_3_3(void){return test("%.0g", -958.125);}
2116: int bonus_g_prec0_positive_smallfpart(void){return test("%.0g", 23.00041);}
2117: int bonus_g_prec0_positive_allsmall(void){return test("%.0g", 0.000039);}
2118: int bonus_g_prec0_negative_smallfpart(void){return test("%.0g", -7.00036);}
2119: int bonus_g_prec0_negative_allsmall(void){return test("%.0g", -0.00032);}
2120: int bonus_g_prec1_zero(void){return test("%.1g", 0.0);}
2121: int bonus_g_prec1_nzero(void){return test("%.1g", -0.0);}
2122: int bonus_g_prec1_1(void){return test("this %.1g scientific notation", 1.5);}
2123: int bonus_g_prec1_fltonly(void){return test("%.1g", 7.5);}
2124: int bonus_g_prec1_whole(void){return test("%.1g", 1.0);}
2125: int bonus_g_prec1_negative(void){return test("%.1g", -3.85);}
2126: int bonus_g_prec1_positive_3_3(void){return test("%.1g", 573.924);}
2127: int bonus_g_prec1_negative_3_3(void){return test("%.1g", -958.125);}
2128: int bonus_g_prec1_positive_smallfpart(void){return test("%.1g", 23.00041);}
2129: int bonus_g_prec1_positive_allsmall(void){return test("%.1g", 0.000039);}
2130: int bonus_g_prec1_negative_smallfpart(void){return test("%.1g", -7.00036);}
2131: int bonus_g_prec1_negative_allsmall(void){return test("%.1g", -0.00032);}
2132: int bonus_g_prec3_zero(void){return test("%.3g", 0.0);}
2133: int bonus_g_prec3_nzero(void){return test("%.3g", -0.0);}
2134: int bonus_g_prec3_1(void){return test("this %.3g scientific notation", 1.5);}
2135: int bonus_g_prec3_fltonly(void){return test("%.3g", 7.5);}
2136: int bonus_g_prec3_whole(void){return test("%.3g", 1.0);}
2137: int bonus_g_prec3_negative(void){return test("%.3g", -3.85);}
2138: int bonus_g_prec3_positive_3_3(void){return test("%.3g", 573.924);}
2139: int bonus_g_prec3_negative_3_3(void){return test("%.3g", -958.125);}
2140: int bonus_g_prec3_positive_smallfpart(void){return test("%.3g", 23.00041);}
2141: int bonus_g_prec3_positive_allsmall(void){return test("%.3g", 0.000039);}
2142: int bonus_g_prec3_negative_smallfpart(void){return test("%.3g", -7.00036);}
2143: int bonus_g_prec3_negative_allsmall(void){return test("%.3g", -0.00032);}
2144: int bonus_g_prec7_zero(void){return test("%.7g", 0.0);}
2145: int bonus_g_prec7_nzero(void){return test("%.7g", -0.0);}
2146: int bonus_g_prec7_1(void){return test("this %.7g scientific notation", 1.5);}
2147: int bonus_g_prec7_fltonly(void){return test("%.7g", 7.5);}
2148: int bonus_g_prec7_whole(void){return test("%.7g", 1.0);}
2149: int bonus_g_prec7_negative(void){return test("%.7g", -3.85);}
2150: int bonus_g_prec7_positive_3_3(void){return test("%.7g", 573.924);}
2151: int bonus_g_prec7_negative_3_3(void){return test("%.7g", -958.125);}
2152: int bonus_g_prec7_positive_smallfpart(void){return test("%.7g", 23.00041);}
2153: int bonus_g_prec7_positive_allsmall(void){return test("%.7g", 0.0000039);}
2154: int bonus_g_prec7_negative_smallfpart(void){return test("%.7g", -7.00036);}
2155: int bonus_g_prec7_negative_allsmall(void){return test("%.7g", -0.000032);}
2156: int bonus_g_prec7_limits_allsmall_pos(void){return test("%.7g", 0.0000001);}
2157: int bonus_g_prec7_limits_allsmall_neg(void){return test("%.7g", -0.0000001);}
2158: int bonus_g_prec7_limits_smallfpart_pos(void){return test("%.7g", 9873.000001);}
2159: int bonus_g_prec7_limits_smallfpart_neg(void){return test("%.7g", -875.000001);}
2160: int bonus_g_prec7_limits_allbig_pos(void){return test("%.7g", 999.9999999);}
2161: int bonus_g_prec7_limits_allbig_neg(void){return test("%.7g", -99.9999999);}
2162: int bonus_g_prec7_limits_bigfpart_pos(void){return test("%.7g", 0.999999);}
2163: int bonus_g_prec7_limits_bigfpart_neg(void){return test("%.7g", -0.999999);}
2164: int bonus_g_rnd_prec7_rndd_pos(void){return test("%.7g", 23.375094499);}
2165: int bonus_g_rnd_prec7_rndd_neg(void){return test("%.7g", -985.765426499);}
2166: int bonus_g_rnd_prec7_rndu_pos(void){return test("%.7g", 0.0894255);}
2167: int bonus_g_rnd_prec7_rndu_neg(void){return test("%.7g", -56.2012685);}
2168: int bonus_g_rnd_prec7_rndu_multidigit_pos(void){return test("%.7g", 43.4399999);}
2169: int bonus_g_rnd_prec7_rndu_multidigit_neg(void){return test("%.7g", -5.0299999);}
2170: int bonus_g_rnd_prec7_rndd_multidigit_pos(void){return test("%.7g", 43.43999949);}
2171: int bonus_g_rnd_prec7_rndd_multidigit_neg(void){return test("%.7g", -5.02999949);}
2172: int bonus_g_rnd_prec7_rndd_wholnobump_pos(void){return test("%.7g", 1.99999949);}
2173: int bonus_g_rnd_prec7_rndd_wholnobump_neg(void){return test("%.7g", -0.99999949);}
2174: int bonus_g_rnd_prec7_rndu_bumpwhole_pos(void){return test("%.7g", 3.9999999);}
2175: int bonus_g_prec8_zero(void){return test("%.8g", 0.0);}
2176: int bonus_g_prec8_nzero(void){return test("%.8g", -0.0);}
2177: int bonus_g_prec8_1(void){return test("this %.8g scientific notation", 1.5);}
2178: int bonus_g_prec8_fltonly(void){return test("%.8g", 7.5);}
2179: int bonus_g_prec8_whole(void){return test("%.8g", 1.0);}
2180: int bonus_g_prec8_negative(void){return test("%.8g", -3.85);}
2181: int bonus_g_prec8_positive_3_3(void){return test("%.8g", 573.924);}
2182: int bonus_g_prec8_negative_3_3(void){return test("%.8g", -958.125);}
2183: int bonus_g_prec8_positive_smallfpart(void){return test("%.8g", 23.00041);}
2184: int bonus_g_prec8_positive_allsmall(void){return test("%.8g", 0.00000039);}
2185: int bonus_g_prec8_negative_smallfpart(void){return test("%.8g", -7.00036);}
2186: int bonus_g_prec8_negative_allsmall(void){return test("%.8g", -0.0000032);}
2187: int bonus_g_prec8_limits_allsmall_pos(void){return test("%.8g", 0.00000001);}
2188: int bonus_g_prec8_limits_allsmall_neg(void){return test("%.8g", -0.00000001);}
2189: int bonus_g_prec8_limits_smallfpart_pos(void){return test("%.8g", 9873.000001);}
2190: int bonus_g_prec8_limits_smallfpart_neg(void){return test("%.8g", -875.000001);}
2191: int bonus_g_prec8_limits_allbig_pos(void){return test("%.8g", 999.9999999);}
2192: int bonus_g_prec8_limits_allbig_neg(void){return test("%.8g", -99.99999999);}
2193: int bonus_g_prec8_limits_bigfpart_pos(void){return test("%.8g", 0.999999);}
2194: int bonus_g_prec8_limits_bigfpart_neg(void){return test("%.8g", -0.999999);}
2195: int bonus_g_rnd_prec8_rndd_pos(void){return test("%.8g", 23.375094499);}
2196: int bonus_g_rnd_prec8_rndd_neg(void){return test("%.8g", -985.765426499);}
2197: int bonus_g_rnd_prec8_rndu_pos(void){return test("%.8g", 0.0894255);}
2198: int bonus_g_rnd_prec8_rndu_neg(void){return test("%.8g", -56.2012685);}
2199: int bonus_g_rnd_prec8_rndu_multidigit_pos(void){return test("%.8g", 43.4399999);}
2200: int bonus_g_rnd_prec8_rndu_multidigit_neg(void){return test("%.8g", -5.0299999);}
2201: int bonus_g_rnd_prec8_rndd_multidigit_pos(void){return test("%.8g", 43.43999949);}
2202: int bonus_g_rnd_prec8_rndd_multidigit_neg(void){return test("%.8g", -5.02999949);}
2203: int bonus_g_rnd_prec8_rndd_wholnobump_pos(void){return test("%.8g", 1.99999949);}
2204: int bonus_g_rnd_prec8_rndd_wholnobump_neg(void){return test("%.8g", -0.99999949);}
2205: int bonus_g_rnd_prec8_rndu_bumpwhole_pos(void){return test("%.8g", 3.9999999);}
2206: int bonus_g_prec9_zero(void){return test("%.9g", 0.0);}
2207: int bonus_g_prec9_nzero(void){return test("%.9g", -0.0);}
2208: int bonus_g_stress_prec9_1(void){return test("this %.9g scientific notation", 1.5);}
2209: int bonus_g_stress_prec9_fltonly(void){return test("%.9g", 7.5);}
2210: int bonus_g_stress_prec9_whole(void){return test("%.9g", 1.0);}
2211: int bonus_g_stress_prec9_negative(void){return test("%.9g", -3.85);}
2212: int bonus_g_stress_prec9_positive_3_3(void){return test("%.9g", 573.924);}
2213: int bonus_g_stress_prec9_negative_3_3(void){return test("%.9g", -958.125);}
2214: int bonus_g_stress_prec9_positive_smallfpart(void){return test("%.9g", 23.00041);}
2215: int bonus_g_stress_prec9_positive_allsmall(void){return test("%.9g", 0.00000039);}
2216: int bonus_g_stress_prec9_negative_smallfpart(void){return test("%.9g", -7.00036);}
2217: int bonus_g_stress_prec9_negative_allsmall(void){return test("%.9g", -0.0000032);}
2218: int bonus_g_stress_prec9_limits_allsmall_pos(void){return test("%.9g", 0.00000001);}
2219: int bonus_g_stress_prec9_limits_allsmall_neg(void){return test("%.9g", -0.00000001);}
2220: int bonus_g_stress_prec9_limits_smallfpart_pos(void){return test("%.9g", 9873.000001);}
2221: int bonus_g_stress_prec9_limits_smallfpart_neg(void){return test("%.9g", -875.000001);}
2222: int bonus_g_stress_prec9_limits_allbig_pos(void){return test("%.9g", 999.99999999);}
2223: int bonus_g_stress_prec9_limits_allbig_neg(void){return test("%.9g", -99.99999999);}
2224: int bonus_g_stress_prec9_limits_bigfpart_pos(void){return test("%.9g", 0.999999);}
2225: int bonus_g_stress_prec9_limits_bigfpart_neg(void){return test("%.9g", -0.999999);}
2226: int bonus_g_stress_prec9_rndd_pos(void){return test("%.9g", 23.375094499);}
2227: int bonus_g_stress_prec9_rndd_neg(void){return test("%.9g", -985.765426499);}
2228: int bonus_g_stress_prec9_rndu_pos(void){return test("%.9g", 0.0894255);}
2229: int bonus_g_stress_prec9_rndu_neg(void){return test("%.9g", -56.2012685);}
2230: int bonus_g_stress_prec9_rndu_multidigit_pos(void){return test("%.9g", 43.4399999);}
2231: int bonus_g_stress_prec9_rndu_multidigit_neg(void){return test("%.9g", -5.0299999);}
2232: int bonus_g_stress_prec9_rndd_multidigit_pos(void){return test("%.9g", 43.43999949);}
2233: int bonus_g_stress_prec9_rndd_multidigit_neg(void){return test("%.9g", -5.02999949);}
2234: int bonus_g_stress_prec9_rndd_wholnobump_pos(void){return test("%.9g", 1.99999949);}
2235: int bonus_g_stress_prec9_rndd_wholnobump_neg(void){return test("%.9g", -0.99999949);}
2236: int bonus_g_stress_prec9_rndu_bumpwhole_pos(void){return test("%.9g", 3.9999999);}
2237: int bonus_g_prec10_zero(void){return test("%.10g", 0.0);}
2238: int bonus_g_prec10_nzero(void){return test("%.10g", -0.0);}
2239: int bonus_g_stress_prec10_1(void){return test("this %.10g scientific notation", 1.5);}
2240: int bonus_g_stress_prec10_fltonly(void){return test("%.10g", 7.5);}
2241: int bonus_g_stress_prec10_whole(void){return test("%.10g", 1.0);}
2242: int bonus_g_stress_prec10_negative(void){return test("%.10g", -3.85);}
2243: int bonus_g_stress_prec10_positive_3_10(void){return test("%.10g", 573.924);}
2244: int bonus_g_stress_prec10_negative_3_10(void){return test("%.10g", -958.125);}
2245: int bonus_g_stress_prec10_pos(void){return test("%.10g", 23.8341375094);}
2246: int bonus_g_stress_prec10_neg(void){return test("%.10g", -985.2459765426);}
2247: int bonus_g_stress_prec10_rndd_pos(void){return test("%.10g", 23.8341375094499);}
2248: int bonus_g_stress_prec10_rndd_neg(void){return test("%.10g", -985.2459765426499);}
2249: int bonus_g_stress_prec10_rndu_pos(void){return test("%.10g", 0.87650894255);}
2250: int bonus_g_stress_prec10_rndu_neg(void){return test("%.10g", -56.47852012685);}
2251: int bonus_g_stress_prec10_positive_smallfpart(void){return test("%.10g", 23.000000041);}
2252: int bonus_g_stress_prec10_positive_allsmall(void){return test("%.10g", 0.0000000039);}
2253: int bonus_g_stress_prec10_negative_smallfpart(void){return test("%.10g", -7.000000036);}
2254: int bonus_g_stress_prec10_negative_allsmall(void){return test("%.10g", -0.000000032);}
2255: int bonus_g_stress_prec10_limits_allsmall_pos(void){return test("%.10g", 0.0000000001);}
2256: int bonus_g_stress_prec10_limits_allsmall_neg(void){return test("%.10g", -0.0000000001);}
2257: int bonus_g_stress_prec10_limits_smallfpart_pos(void){return test("%.10g", 9873.0000000001);}
2258: int bonus_g_stress_prec10_limits_smallfpart_neg(void){return test("%.10g", -875.0000000001);}
2259: int bonus_g_stress_prec10_limits_allbig_pos(void){return test("%.10g", 999.9999999999);}
2260: int bonus_g_stress_prec10_limits_allbig_neg(void){return test("%.10g", -99.9999999999);}
2261: int bonus_g_stress_prec10_limits_bigfpart_pos(void){return test("%.10g", 0.9999999999);}
2262: int bonus_g_stress_prec10_limits_bigfpart_neg(void){return test("%.10g", -0.9999999999);}
2263: int bonus_g_stress_prec11_rndu(void){return test("%.11g",        1.025978541236587568);}
2264: int bonus_g_stress_prec11_rndd(void){return test("%.11g",        1.025978548534310421);}
2265: int bonus_g_stress_prec11_limits_tiny(void){return test("%.11g", 0.000000000010000000);}
2266: int bonus_g_stress_prec11_limits_big(void){return test("%.11g", 99.999999999990000000);}
2267: int bonus_g_stress_prec12_rndu(void){return test("%.12g",        1.025978541236587568);}
2268: int bonus_g_stress_prec12_rndd(void){return test("%.12g",        1.025978548534310421);}
2269: int bonus_g_stress_prec12_limits_tiny(void){return test("%.12g", 0.000000000001000000);}
2270: int bonus_g_stress_prec12_limits_big(void){return test("%.12g", 99.999999999999000000);}
2271: int bonus_g_stress_prec13_rndu(void){return test("%.13g",        1.025978541136587568);}
2272: int bonus_g_stress_prec13_rndd(void){return test("%.13g",        1.025978548534310421);}
2273: int bonus_g_stress_prec13_limits_tiny(void){return test("%.13g", 0.000000000000100000);}
2274: int bonus_g_stress_prec13_limits_big(void){return test("%.13g", 99.999999999999900000);}
2275: int bonus_g_stress_prec14_rndu(void){return test("%.14g",        1.025978541436587568);}
2276: int bonus_g_stress_prec14_rndd(void){return test("%.14g",        1.025978548534310421);}
2277: int bonus_g_stress_prec14_limits_tiny(void){return test("%.14g", 0.000000000000010000);}
2278: int bonus_g_stress_prec14_limits_big(void){return test("%.14g",  9.999999999999990000);}
2279: int bonus_g_stress_prec15_rndu(void){return test("%.15g",        1.025978542436587568);}
2280: int bonus_g_stress_prec15_rndd(void){return test("%.15g",        1.025978548534310421);}
2281: int bonus_g_stress_prec15_limits_tiny(void){return test("%.15g", 0.000000000000001000);}
2282: int bonus_g_stress_prec15_limits_big(void){return test("%.15g",  0.999999999999999000);}
2283: int bonus_notrequired_g_stress_prec16_rndu(void){return test("%.16g",        1.025978542436587568);}
2284: int bonus_notrequired_g_stress_prec16_rndd(void){return test("%.16g",        1.025978548534310421);}
2285: int bonus_notrequired_g_stress_prec16_limits_tiny(void){return test("%.16g", 0.000000000000000100);}
2286: int bonus_notrequired_g_stress_prec16_limits_big(void){return test("%.16g",  0.999999999999999900);}
2287: int bonus_notrequired_g_stress_prec17_rndu(void){return test("%.17g",        1.025978542436587568);}
2288: int bonus_notrequired_g_stress_prec17_rndd(void){return test("%.17g",        1.025978548534310421);}
2289: int bonus_notrequired_g_stress_prec17_limits_tiny(void){return test("%.17g", 0.000000000000000010);}
2290: int bonus_notrequired_g_stress_prec17_limits_big(void){return test("%.17g",  0.999999999999999990);}
2291: int bonus_notrequired_g_stress_prec18_rndu(void){return test("%.18g",        0.125978542436587568);}
2292: int bonus_notrequired_g_stress_prec18_rndd(void){return test("%.18g",        0.125978548534310421);}
2293: int bonus_g_af_prec0_zero(void){return test("%#.0g", 0.0);}
2294: int bonus_g_af_prec0_nzero(void){return test("%#.0g", -0.0);}
2295: int bonus_g_af_prec1_zero(void){return test("%#.1g", 0.0);}
2296: int bonus_g_af_prec1_nzero(void){return test("%#.1g", -0.0);}
2297: int bonus_g_af_prec0p(void){return test("%#.0g", 7.4);}
2298: int bonus_g_af_prec1p(void){return test("%#.1g", 7.3);}
2299: int bonus_g_af_prec0n(void){return test("%#.0g", -7.4);}
2300: int bonus_g_af_prec1n(void){return test("%#.1g", -7.3);}
2301: int bonus_g_as_prec0_zero(void){return test("%+.0g", 0.0);}
2302: int bonus_g_as_prec0_nzero(void){return test("%+.0g", -0.0);}
2303: int bonus_g_as_prec3_zero(void){return test("%+.3g", 0.0);}
2304: int bonus_g_as_prec3_nzero(void){return test("%+.3g", -0.0);}
2305: int bonus_g_as_prec0p_as(void){return test("%+.0g", 7.4);}
2306: int bonus_g_as_prec3p_as(void){return test("%+.3g", 7.3);}
2307: int bonus_g_as_prec0n_as(void){return test("%+.0g", -7.4);}
2308: int bonus_g_as_prec3n_as(void){return test("%+.3g", -7.3);}
2309: int bonus_g_wprec0p_zero(void){return test("%5.0g", 0.0);}
2310: int bonus_g_wprec0p_nzero(void){return test("%5.0g", -0.0);}
2311: int bonus_g_wprec3p_zero(void){return test("%5.3g", 0.0);}
2312: int bonus_g_wprec3p_nzero(void){return test("%5.3g", -0.0);}
2313: int bonus_g_wprec0p(void){return test("%5.0g", 7.3);}
2314: int bonus_g_wprec1p(void){return test("%5.1g", 7.3);}
2315: int bonus_g_wprec3p(void){return test("%5.3g", 7.3);}
2316: int bonus_g_wprec6p(void){return test("%5.6g", 7.3);}
2317: int bonus_g_wprec0n(void){return test("%5.0g", -7.3);}
2318: int bonus_g_wprec1n(void){return test("%5.1g", -7.3);}
2319: int bonus_g_wprec3n(void){return test("%5.3g", -7.3);}
2320: int bonus_g_wprec6n(void){return test("%5.6g", -7.3);}
2321: int bonus_g_wzp_prec0p_zero(void){return test("%05.0g", 0.0);}
2322: int bonus_g_wzp_prec0p_nzero(void){return test("%05.0g", -0.0);}
2323: int bonus_g_wzp_prec3p_zero(void){return test("%05.3g", 0.0);}
2324: int bonus_g_wzp_prec3p_nzero(void){return test("%05.3g", -0.0);}
2325: int bonus_g_wzp_prec0p(void){return test("%05.0g", 7.3);}
2326: int bonus_g_wzp_prec1p(void){return test("%05.1g", 7.3);}
2327: int bonus_g_wzp_prec3p(void){return test("%05.3g", 7.3);}
2328: int bonus_g_wzp_prec6p(void){return test("%05.6g", 7.3);}
2329: int bonus_g_wzp_prec0n(void){return test("%05.0g", -7.3);}
2330: int bonus_g_wzp_prec1n(void){return test("%05.1g", -7.3);}
2331: int bonus_g_wzp_prec3n(void){return test("%05.3g", -7.3);}
2332: int bonus_g_wzp_prec6n(void){return test("%05.6g", -7.3);}
2333: int bonus_g_wlj_prec0p_zero(void){return test("%-5.0g", 0.0);}
2334: int bonus_g_wlj_prec0p_nzero(void){return test("%-5.0g", -0.0);}
2335: int bonus_g_wlj_prec3p_zero(void){return test("%-5.3g", 0.0);}
2336: int bonus_g_wlj_prec3p_nzero(void){return test("%-5.3g", -0.0);}
2337: int bonus_g_wlj_prec0p(void){return test("%-5.0g", 7.3);}
2338: int bonus_g_wlj_prec1p(void){return test("%-5.1g", 7.3);}
2339: int bonus_g_wlj_prec3p(void){return test("%-5.3g", 7.3);}
2340: int bonus_g_wlj_prec6p(void){return test("%-5.6g", 7.3);}
2341: int bonus_g_wlj_prec0n(void){return test("%-5.0g", -7.3);}
2342: int bonus_g_wlj_prec1n(void){return test("%-5.1g", -7.3);}
2343: int bonus_g_wlj_prec3n(void){return test("%-5.3g", -7.3);}
2344: int bonus_g_wlj_prec6n(void){return test("%-5.6g", -7.3);}
2345: int bonus_g_wzplj_prec0p_ignoreflag_zero(void){return test("%-05.0g", 0.0);}
2346: int bonus_g_wzplj_prec0p_ignoreflag_nzero(void){return test("%-05.0g", -0.0);}
2347: int bonus_g_wzplj_prec3p_ignoreflag_zero(void){return test("%-05.3g", 0.0);}
2348: int bonus_g_wzplj_prec3p_ignoreflag_nzero(void){return test("%-05.3g", -0.0);}
2349: int bonus_g_wzplj_prec0p_ignoreflag(void){return test("%-05.0g", 7.3);}
2350: int bonus_g_wzplj_prec1p_ignoreflag(void){return test("%-05.1g", 7.3);}
2351: int bonus_g_wzplj_prec3p_ignoreflag(void){return test("%-05.3g", 7.3);}
2352: int bonus_g_wzplj_prec6p_ignoreflag(void){return test("%-05.6g", 7.3);}
2353: int bonus_g_wzplj_prec0n_ignoreflag(void){return test("%-05.0g", -7.3);}
2354: int bonus_g_wzplj_prec1n_ignoreflag(void){return test("%-05.1g", -7.3);}
2355: int bonus_g_wzplj_prec3n_ignoreflag(void){return test("%-05.3g", -7.3);}
2356: int bonus_g_wzplj_prec6n_ignoreflag(void){return test("%-05.6g", -7.3);}
2357: int bonus_g_wzpljr_prec0p_ignoreflag_zero(void){return test("%0-5.0g", 0.0);}
2358: int bonus_g_wzpljr_prec0p_ignoreflag_nzero(void){return test("%0-5.0g", -0.0);}
2359: int bonus_g_wzpljr_prec3p_ignoreflag_zero(void){return test("%0-5.3g", 0.0);}
2360: int bonus_g_wzpljr_prec3p_ignoreflag_nzero(void){return test("%0-5.3g", -0.0);}
2361: int bonus_g_wzpljr_prec0p_ignoreflag(void){return test("%0-5.0g", 7.3);}
2362: int bonus_g_wzpljr_prec1p_ignoreflag(void){return test("%0-5.1g", 7.3);}
2363: int bonus_g_wzpljr_prec3p_ignoreflag(void){return test("%0-5.3g", 7.3);}
2364: int bonus_g_wzpljr_prec6p_ignoreflag(void){return test("%0-5.6g", 7.3);}
2365: int bonus_g_wzpljr_prec0n_ignoreflag(void){return test("%0-5.0g", -7.3);}
2366: int bonus_g_wzpljr_prec1n_ignoreflag(void){return test("%0-5.1g", -7.3);}
2367: int bonus_g_wzpljr_prec3n_ignoreflag(void){return test("%0-5.3g", -7.3);}
2368: int bonus_g_wzpljr_prec6n_ignoreflag(void){return test("%0-5.6g", -7.3);}
2369: int bonus_g_wzpljaf_prec0p_zero(void){return test("%#-5.0g", 0.0);}
2370: int bonus_g_wzpljaf_prec0p_nzero(void){return test("%#-5.0g", -0.0);}
2371: int bonus_g_wzpljaf_prec3p_zero(void){return test("%#-5.3g", 0.0);}
2372: int bonus_g_wzpljaf_prec3p_nzero(void){return test("%#-5.3g", -0.0);}
2373: int bonus_g_wzpljaf_prec0p(void){return test("%#-5.0g", 7.3);}
2374: int bonus_g_wzpljaf_prec1p(void){return test("%#-5.1g", 7.3);}
2375: int bonus_g_wzpljaf_prec3p(void){return test("%#-5.3g", 7.3);}
2376: int bonus_g_wzpljaf_prec6p(void){return test("%#-5.6g", 7.3);}
2377: int bonus_g_wzpljaf_prec0n(void){return test("%#-5.0g", -7.3);}
2378: int bonus_g_wzpljaf_prec1n(void){return test("%#-5.1g", -7.3);}
2379: int bonus_g_wzpljaf_prec3n(void){return test("%#-5.3g", -7.3);}
2380: int bonus_g_wzpljaf_prec6n(void){return test("%#-5.6g", -7.3);}
2381: int bonus_g_was_prec0p_zero(void){return test("%+5.0g", 0.0);}
2382: int bonus_g_was_prec0p_nzero(void){return test("%+5.0g", -0.0);}
2383: int bonus_g_was_prec3p_zero(void){return test("%+5.3g", 0.0);}
2384: int bonus_g_was_prec3p_nzero(void){return test("%+5.3g", -0.0);}
2385: int bonus_g_was_prec0p(void){return test("%+5.0g", 7.3);}
2386: int bonus_g_was_prec1p(void){return test("%+5.1g", 7.3);}
2387: int bonus_g_was_prec3p(void){return test("%+5.3g", 7.3);}
2388: int bonus_g_was_prec6p(void){return test("%+5.6g", 7.3);}
2389: int bonus_g_was_prec0n(void){return test("%+5.0g", -7.3);}
2390: int bonus_g_was_prec1n(void){return test("%+5.1g", -7.3);}
2391: int bonus_g_was_prec3n(void){return test("%+5.3g", -7.3);}
2392: int bonus_g_was_prec6n(void){return test("%+5.6g", -7.3);}
2393: int bonus_g_wzpas_prec0p_zero(void){return test("%+05.0g", 0.0);}
2394: int bonus_g_wzpas_prec0p_nzero(void){return test("%+05.0g", -0.0);}
2395: int bonus_g_wzpas_prec3p_zero(void){return test("%+05.3g", 0.0);}
2396: int bonus_g_wzpas_prec3p_nzero(void){return test("%+05.3g", -0.0);}
2397: int bonus_g_wzpas_prec0p(void){return test("%+05.0g", 7.3);}
2398: int bonus_g_wzpas_prec1p(void){return test("%+05.1g", 7.3);}
2399: int bonus_g_wzpas_prec3p(void){return test("%+05.3g", 7.3);}
2400: int bonus_g_wzpas_prec6p(void){return test("%+05.6g", 7.3);}
2401: int bonus_g_wzpas_prec0n(void){return test("%+05.0g", -7.3);}
2402: int bonus_g_wzpas_prec1n(void){return test("%+05.1g", -7.3);}
2403: int bonus_g_wzpas_prec3n(void){return test("%+05.3g", -7.3);}
2404: int bonus_g_wzpas_prec6n(void){return test("%+05.6g", -7.3);}
2405: int bonus_g_wljas_prec0p_zero(void){return test("%+-5.0g", 0.0);}
2406: int bonus_g_wljas_prec0p_nzero(void){return test("%+-5.0g", -0.0);}
2407: int bonus_g_wljas_prec3p_zero(void){return test("%+-5.3g", 0.0);}
2408: int bonus_g_wljas_prec3p_nzero(void){return test("%+-5.3g", -0.0);}
2409: int bonus_g_wljas_prec0p(void){return test("%+-5.0g", 7.3);}
2410: int bonus_g_wljas_prec1p(void){return test("%+-5.1g", 7.3);}
2411: int bonus_g_wljas_prec3p(void){return test("%+-5.3g", 7.3);}
2412: int bonus_g_wljas_prec6p(void){return test("%+-5.6g", 7.3);}
2413: int bonus_g_wljas_prec0n(void){return test("%+-5.0g", -7.3);}
2414: int bonus_g_wljas_prec1n(void){return test("%+-5.1g", -7.3);}
2415: int bonus_g_wljas_prec3n(void){return test("%+-5.3g", -7.3);}
2416: int bonus_g_wljas_prec6n(void){return test("%+-5.6g", -7.3);}
2417: int bonus_g_wzpljas_prec0p_ignoreflag_zero(void){return test("%+-05.0g", 0.0);}
2418: int bonus_g_wzpljas_prec0p_ignoreflag_nzero(void){return test("%+-05.0g", -0.0);}
2419: int bonus_g_wzpljas_prec3p_ignoreflag_zero(void){return test("%+-05.3g", 0.0);}
2420: int bonus_g_wzpljas_prec3p_ignoreflag_nzero(void){return test("%+-05.3g", -0.0);}
2421: int bonus_g_wzpljas_prec0p_ignoreflag(void){return test("%+-05.0g", 7.3);}
2422: int bonus_g_wzpljas_prec1p_ignoreflag(void){return test("%+-05.1g", 7.3);}
2423: int bonus_g_wzpljas_prec3p_ignoreflag(void){return test("%+-05.3g", 7.3);}
2424: int bonus_g_wzpljas_prec6p_ignoreflag(void){return test("%+-05.6g", 7.3);}
2425: int bonus_g_wzpljas_prec0n_ignoreflag(void){return test("%+-05.0g", -7.3);}
2426: int bonus_g_wzpljas_prec1n_ignoreflag(void){return test("%+-05.1g", -7.3);}
2427: int bonus_g_wzpljas_prec3n_ignoreflag(void){return test("%+-05.3g", -7.3);}
2428: int bonus_g_wzpljas_prec6n_ignoreflag(void){return test("%+-05.6g", -7.3);}
2429: int bonus_g_wzpljras_prec0p_zero(void){return test("%+-05.0g", 0.0);}
2430: int bonus_g_wzpljras_prec0p_nzero(void){return test("%+-05.0g", -0.0);}
2431: int bonus_g_wzpljras_prec3p_zero(void){return test("%+-05.3g", 0.0);}
2432: int bonus_g_wzpljras_prec3p_nzero(void){return test("%+-05.3g", -0.0);}
2433: int bonus_g_wzpljras_prec0p(void){return test("%-+5.0g", 7.3);}
2434: int bonus_g_wzpljras_prec1p(void){return test("%-+5.1g", 7.3);}
2435: int bonus_g_wzpljras_prec3p(void){return test("%-+5.3g", 7.3);}
2436: int bonus_g_wzpljras_prec6p(void){return test("%-+5.6g", 7.3);}
2437: int bonus_g_wzpljras_prec0n(void){return test("%-+5.0g", -7.3);}
2438: int bonus_g_wzpljras_prec1n(void){return test("%-+5.1g", -7.3);}
2439: int bonus_g_wzpljras_prec3n(void){return test("%-+5.3g", -7.3);}
2440: int bonus_g_wzpljras_prec6n(void){return test("%-+5.6g", -7.3);}
2441: int bonus_g_wzpljafas_prec0p_zero(void){return test("%+#-05.0g", 0.0);}
2442: int bonus_g_wzpljafas_prec0p_nzero(void){return test("%+#-05.0g", -0.0);}
2443: int bonus_g_wzpljafas_prec3p_zero(void){return test("%+#-05.3g", 0.0);}
2444: int bonus_g_wzpljafas_prec3p_nzero(void){return test("%+#-05.3g", -0.0);}
2445: int bonus_g_wzpljafas_prec0p(void){return test("%+#-5.0g", 7.3);}
2446: int bonus_g_wzpljafas_prec1p(void){return test("%+#-5.1g", 7.3);}
2447: int bonus_g_wzpljafas_prec3p(void){return test("%+#-5.3g", 7.3);}
2448: int bonus_g_wzpljafas_prec6p(void){return test("%+#-5.6g", 7.3);}
2449: int bonus_g_wzpljafas_prec0n(void){return test("%+#-5.0g", -7.3);}
2450: int bonus_g_wzpljafas_prec1n(void){return test("%+#-5.1g", -7.3);}
2451: int bonus_g_wzpljafas_prec3n(void){return test("%+#-5.3g", -7.3);}
2452: int bonus_g_wzpljafas_prec6n(void){return test("%+#-5.6g", -7.3);}
2453: int bonus_g_wsp_prec0p_zero(void){return test("% 5.0g", 0.0);}
2454: int bonus_g_wsp_prec0p_nzero(void){return test("% 5.0g", -0.0);}
2455: int bonus_g_wsp_prec3p_zero(void){return test("% 5.3g", 0.0);}
2456: int bonus_g_wsp_prec3p_nzero(void){return test("% 5.3g", -0.0);}
2457: int bonus_g_wsp_prec0p(void){return test("% 5.0g", 7.3);}
2458: int bonus_g_wsp_prec1p(void){return test("% 5.1g", 7.3);}
2459: int bonus_g_wsp_prec3p(void){return test("% 5.3g", 7.3);}
2460: int bonus_g_wsp_prec6p(void){return test("% 5.6g", 7.3);}
2461: int bonus_g_wsp_prec0n(void){return test("% 5.0g", -7.3);}
2462: int bonus_g_wsp_prec1n(void){return test("% 5.1g", -7.3);}
2463: int bonus_g_wsp_prec3n(void){return test("% 5.3g", -7.3);}
2464: int bonus_g_wsp_prec6n(void){return test("% 5.6g", -7.3);}
2465: int bonus_g_wzpsp_prec0p_zero(void){return test("% 05.0g", 0.0);}
2466: int bonus_g_wzpsp_prec0p_nzero(void){return test("% 05.0g", -0.0);}
2467: int bonus_g_wzpsp_prec3p_zero(void){return test("% 05.3g", 0.0);}
2468: int bonus_g_wzpsp_prec3p_nzero(void){return test("% 05.3g", -0.0);}
2469: int bonus_g_wzpsp_prec0p(void){return test("% 05.0g", 7.3);}
2470: int bonus_g_wzpsp_prec1p(void){return test("% 05.1g", 7.3);}
2471: int bonus_g_wzpsp_prec3p(void){return test("% 05.3g", 7.3);}
2472: int bonus_g_wzpsp_prec6p(void){return test("% 05.6g", 7.3);}
2473: int bonus_g_wzpsp_prec0n(void){return test("% 05.0g", -7.3);}
2474: int bonus_g_wzpsp_prec1n(void){return test("% 05.1g", -7.3);}
2475: int bonus_g_wzpsp_prec3n(void){return test("% 05.3g", -7.3);}
2476: int bonus_g_wzpsp_prec6n(void){return test("% 05.6g", -7.3);}
2477: int bonus_g_wljsp_prec0p_zero(void){return test("% -5.0g", 0.0);}
2478: int bonus_g_wljsp_prec0p_nzero(void){return test("% -5.0g", -0.0);}
2479: int bonus_g_wljsp_prec3p_zero(void){return test("% -5.3g", 0.0);}
2480: int bonus_g_wljsp_prec3p_nzero(void){return test("% -5.3g", -0.0);}
2481: int bonus_g_wljsp_prec0p(void){return test("% -5.0g", 7.3);}
2482: int bonus_g_wljsp_prec1p(void){return test("% -5.1g", 7.3);}
2483: int bonus_g_wljsp_prec3p(void){return test("% -5.3g", 7.3);}
2484: int bonus_g_wljsp_prec6p(void){return test("% -5.6g", 7.3);}
2485: int bonus_g_wljsp_prec0n(void){return test("% -5.0g", -7.3);}
2486: int bonus_g_wljsp_prec1n(void){return test("% -5.1g", -7.3);}
2487: int bonus_g_wljsp_prec3n(void){return test("% -5.3g", -7.3);}
2488: int bonus_g_wljsp_prec6n(void){return test("% -5.6g", -7.3);}
2489: int bonus_g_wzpljsp_prec0p_zero(void){return test("% -05.0g", 0.0);}
2490: int bonus_g_wzpljsp_prec0p_nzero(void){return test("% -05.0g", -0.0);}
2491: int bonus_g_wzpljsp_prec3p_zero(void){return test("% -05.3g", 0.0);}
2492: int bonus_g_wzpljsp_prec3p_nzero(void){return test("% -05.3g", -0.0);}
2493: int bonus_g_wzpljsp_prec0p_ignoreflag(void){return test("% -05.0g", 7.3);}
2494: int bonus_g_wzpljsp_prec1p_ignoreflag(void){return test("% -05.1g", 7.3);}
2495: int bonus_g_wzpljsp_prec3p_ignoreflag(void){return test("% -05.3g", 7.3);}
2496: int bonus_g_wzpljsp_prec6p_ignoreflag(void){return test("% -05.6g", 7.3);}
2497: int bonus_g_wzpljsp_prec0n_ignoreflag(void){return test("% -05.0g", -7.3);}
2498: int bonus_g_wzpljsp_prec1n_ignoreflag(void){return test("% -05.1g", -7.3);}
2499: int bonus_g_wzpljsp_prec3n_ignoreflag(void){return test("% -05.3g", -7.3);}
2500: int bonus_g_wzpljsp_prec6n_ignoreflag(void){return test("% -05.6g", -7.3);}
2501: int bonus_g_wzpljrsp_prec0p_zero(void){return test("%- 5.0g", 0.0);}
2502: int bonus_g_wzpljrsp_prec0p_nzero(void){return test("%- 5.0g", -0.0);}
2503: int bonus_g_wzpljrsp_prec3p_zero(void){return test("%- 5.3g", 0.0);}
2504: int bonus_g_wzpljrsp_prec3p_nzero(void){return test("%- 5.3g", -0.0);}
2505: int bonus_g_wzpljrsp_prec0p(void){return test("%- 5.0g", 7.3);}
2506: int bonus_g_wzpljrsp_prec1p(void){return test("%- 5.1g", 7.3);}
2507: int bonus_g_wzpljrsp_prec3p(void){return test("%- 5.3g", 7.3);}
2508: int bonus_g_wzpljrsp_prec6p(void){return test("%- 5.6g", 7.3);}
2509: int bonus_g_wzpljrsp_prec0n(void){return test("%- 5.0g", -7.3);}
2510: int bonus_g_wzpljrsp_prec1n(void){return test("%- 5.1g", -7.3);}
2511: int bonus_g_wzpljrsp_prec3n(void){return test("%- 5.3g", -7.3);}
2512: int bonus_g_wzpljrsp_prec6n(void){return test("%- 5.6g", -7.3);}
2513: int bonus_g_wzpljafsp_prec0p_zero(void){return test("% #-05.0g", 0.0);}
2514: int bonus_g_wzpljafsp_prec0p_nzero(void){return test("% #-05.0g", -0.0);}
2515: int bonus_g_wzpljafsp_prec3p_zero(void){return test("% #-05.3g", 0.0);}
2516: int bonus_g_wzpljafsp_prec3p_nzero(void){return test("% #-05.3g", -0.0);}
2517: int bonus_g_wzpljafsp_prec0p(void){return test("% #-5.0g", 7.3);}
2518: int bonus_g_wzpljafsp_prec1p(void){return test("% #-5.1g", 7.3);}
2519: int bonus_g_wzpljafsp_prec3p(void){return test("% #-5.3g", 7.3);}
2520: int bonus_g_wzpljafsp_prec6p(void){return test("% #-5.6g", 7.3);}
2521: int bonus_g_wzpljafsp_prec0n(void){return test("% #-5.0g", -7.3);}
2522: int bonus_g_wzpljafsp_prec1n(void){return test("% #-5.1g", -7.3);}
2523: int bonus_g_wzpljafsp_prec3n(void){return test("% #-5.3g", -7.3);}
2524: int bonus_g_wzpljafsp_prec6n(void){return test("% #-5.6g", -7.3);}
2525: int bonus_g_assp_prec0p_ignoreflag(void){return test("%+ .0g", 7.3);}
2526: int bonus_g_assp_prec1p_ignoreflag(void){return test("%+ .1g", 7.3);}
2527: int bonus_g_assp_prec3p_ignoreflag(void){return test("%+ .3g", 7.3);}
2528: int bonus_g_assp_prec6p_ignoreflag(void){return test("%+ .6g", 7.3);}
2529: int bonus_g_assp_prec0n_ignoreflag(void){return test("%+ .0g", -7.3);}
2530: int bonus_g_assp_prec1n_ignoreflag(void){return test("%+ .1g", -7.3);}
2531: int bonus_g_assp_prec3n_ignoreflag(void){return test("%+ .3g", -7.3);}
2532: int bonus_g_assp_prec6n_ignoreflag(void){return test("%+ .6g", -7.3);}
2533: int bonus_g_asspr_prec0p_ignoreflag(void){return test("% +.0g", 7.3);}
2534: int bonus_g_asspr_prec1p_ignoreflag(void){return test("% +.1g", 7.3);}
2535: int bonus_g_asspr_prec3p_ignoreflag(void){return test("% +.3g", 7.3);}
2536: int bonus_g_asspr_prec6p_ignoreflag(void){return test("% +.6g", 7.3);}
2537: int bonus_g_asspr_prec0n_ignoreflag(void){return test("% +.0g", -7.3);}
2538: int bonus_g_asspr_prec1n_ignoreflag(void){return test("% +.1g", -7.3);}
2539: int bonus_g_asspr_prec3n_ignoreflag(void){return test("% +.3g", -7.3);}
2540: int bonus_g_asspr_prec6n_ignoreflag(void){return test("% +.6g", -7.3);}
2541: int bonus_notrequired_g_overprec_might_be_undefbehav_100(void){return test("%.100g", 0.237);}
2542: int bonus_notrequired_g_overprec_might_be_undefbehav_32(void){return test("%.32g", 0.237);}
2543: int bonus_notrequired_g_overprec_might_be_undefbehav_4(void){return test("%.4g", 0.237);}
2544: int bonus_notrequired_g_overprec_might_be_undefbehav_1000(void){return test("%.4g", -0.106577568068517810765107851705167);}
2545: int bonus_notrequired_g_overprec_might_be_undefbehav_10_from_0(void){return test("%.10g", 0.0);}
2546: int bonus_notrequired_g_overprec_might_be_undefbehav_2000(void){return test("%.2000g", 623.28376510723481);}
2547: int bonus_notrequired_g_overprec_might_be_undefbehav_dblmin(void){return test("%.2000g", DBL_MIN);}
2548: int bonus_notrequired_g_overprec_might_be_undefbehav_ndblmin(void){return test("%.2000g", -DBL_MIN);}
2549: int bonus_notrequired_g_limits_dblmax_prec0(void){return test("%.0g", DBL_MAX);}
2550: int bonus_notrequired_g_limits_dblmax_prec3(void){return test("%.3g", DBL_MAX);}
2551: int bonus_notrequired_g_limits_dblmax_precd(void){return test("%g", DBL_MAX);}
2552: int bonus_notrequired_g_limits_dblmax_prec8(void){return test("%.8g", DBL_MAX);}
2553: int bonus_notrequired_g_stress_limits_dblmax_prec12(void){return test("%.12g", DBL_MAX);}
2554: int bonus_notrequired_g_stress_limits_dblmax_prec16(void){return test("%.16g", DBL_MAX);}
2555: int bonus_notrequired_g_stress_limits_dblmax_prec18(void){return test("%.18g", DBL_MAX);}
2556: int bonus_notrequired_g_limits_ndblmax_prec0(void){return test("%.0g", -DBL_MAX);}
2557: int bonus_notrequired_g_limits_ndblmax_prec3(void){return test("%.3g", -DBL_MAX);}
2558: int bonus_notrequired_g_limits_ndblmax_precd(void){return test("%g", -DBL_MAX);}
2559: int bonus_notrequired_g_limits_ndblmax_prec8(void){return test("%.8g", -DBL_MAX);}
2560: int bonus_notrequired_g_stress_limits_ndblmax_prec12(void){return test("%.12g", -DBL_MAX);}
2561: int bonus_notrequired_g_stress_limits_ndblmax_prec16(void){return test("%.16g", -DBL_MAX);}
2562: int bonus_notrequired_g_stress_limits_ndblmax_prec18(void){return test("%.18g", -DBL_MAX);}
2563: int bonus_notrequired_g_limits_dblmin_prec0(void){return test("%.0g", DBL_MIN);}
2564: int bonus_notrequired_g_limits_dblmin_prec3(void){return test("%.3g", DBL_MIN);}
2565: int bonus_notrequired_g_limits_dblmin_precd(void){return test("%g", DBL_MIN);}
2566: int bonus_notrequired_g_limits_dblmin_prec8(void){return test("%.8g", DBL_MIN);}
2567: int bonus_notrequired_g_stress_limits_dblmin_prec12(void){return test("%.12g", DBL_MIN);}
2568: int bonus_notrequired_g_stress_limits_dblmin_prec16(void){return test("%.16g", DBL_MIN);}
2569: int bonus_notrequired_g_stress_limits_dblmin_prec18(void){return test("%.18g", DBL_MIN);}
2570: int bonus_notrequired_g_limits_ndblmin_prec0(void){return test("%.0g", -DBL_MIN);}
2571: int bonus_notrequired_g_limits_ndblmin_prec3(void){return test("%.3g", -DBL_MIN);}
2572: int bonus_notrequired_g_limits_ndblmin_precd(void){return test("%g", -DBL_MIN);}
2573: int bonus_notrequired_g_limits_ndblmin_prec8(void){return test("%.8g", -DBL_MIN);}
2574: int bonus_notrequired_g_stress_limits_ndblmin_prec12(void){return test("%.12g", -DBL_MIN);}
2575: int bonus_notrequired_g_stress_limits_ndblmin_prec16(void){return test("%.16g", -DBL_MIN);}
2576: int bonus_notrequired_g_stress_limits_ndblmin_prec18(void){return test("%.18g", -DBL_MIN);}
2577: int bonus_notrequired_g_reserved_values_inf(void){double special; *((unsigned long *)(&special)) = DBL_INF;
2578: int bonus_notrequired_g_reserved_values_ninf(void){double special; *((unsigned long *)(&special)) = DBL_NINF;
2579: int bonus_notrequired_g_reserved_values_nan(void){double special; *((unsigned long *)(&special)) = DBL_NAN;
2580: int bonus_notrequired_g_reserved_values_pzero(void){double special; *((unsigned long *)(&special)) = DBL_PZERO;
2581: int bonus_notrequired_g_reserved_values_nzero(void){double special; *((unsigned long *)(&special)) = DBL_NZERO;
2582: int bonus_notrequired_g_reserved_values_inf_6w(void){double special; *((unsigned long *)(&special)) = DBL_INF;
2583: int bonus_notrequired_g_reserved_values_ninf_6w(void){double special; *((unsigned long *)(&special)) = DBL_NINF;
2584: int bonus_notrequired_g_reserved_values_nan_6w(void){double special; *((unsigned long *)(&special)) = DBL_NAN;
2585: int bonus_notrequired_g_reserved_values_pzero_6w(void){double special; *((unsigned long *)(&special)) = DBL_PZERO;
2586: int bonus_notrequired_g_reserved_values_nzero_6w(void){double special; *((unsigned long *)(&special)) = DBL_NZERO;
2587: int bonus_notrequired_g_reserved_values_inf_6wlj(void){double special; *((unsigned long *)(&special)) = DBL_INF;
2588: int bonus_notrequired_g_reserved_values_ninf_6wlj(void){double special; *((unsigned long *)(&special)) = DBL_NINF;
2589: int bonus_notrequired_g_reserved_values_nan_6wlj(void){double special; *((unsigned long *)(&special)) = DBL_NAN;
2590: int bonus_notrequired_g_reserved_values_pzero_6wlj(void){double special; *((unsigned long *)(&special)) = DBL_PZERO;
2591: int bonus_notrequired_g_reserved_values_nzero_6wlj(void){double special; *((unsigned long *)(&special)) = DBL_NZERO;
2592: int bonus_notrequired_g_reserved_values_inf_6was(void){double special; *((unsigned long *)(&special)) = DBL_INF;
2593: int bonus_notrequired_g_reserved_values_ninf_6was(void){double special; *((unsigned long *)(&special)) = DBL_NINF;
2594: int bonus_notrequired_g_reserved_values_nan_6was(void){double special; *((unsigned long *)(&special)) = DBL_NAN;
2595: int bonus_notrequired_g_reserved_values_pzero_6was(void){double special; *((unsigned long *)(&special)) = DBL_PZERO;
2596: int bonus_notrequired_g_reserved_values_nzero_6was(void){double special; *((unsigned long *)(&special)) = DBL_NZERO;
2597: int bonus_notrequired_g_reserved_values_inf_10w_prec7(void){double special; *((unsigned long *)(&special)) = DBL_INF;
2598: int bonus_notrequired_g_reserved_values_ninf_10w_prec7(void){double special; *((unsigned long *)(&special)) = DBL_NINF;
2599: int bonus_notrequired_g_reserved_values_nan_10w_prec7(void){double special; *((unsigned long *)(&special)) = DBL_NAN;
2600: int bonus_notrequired_g_reserved_values_pzero_10w_prec7(void){double special; *((unsigned long *)(&special)) = DBL_PZERO;
2601: int bonus_notrequired_g_reserved_values_nzero_10w_prec7(void){double special; *((unsigned long *)(&special)) = DBL_NZERO;
2602: int bonus_notrequired_g_reserved_values_inf_sp_prec7(void){double special; *((unsigned long *)(&special)) = DBL_INF;
2603: int bonus_notrequired_g_reserved_values_ninf_sp_prec7(void){double special; *((unsigned long *)(&special)) = DBL_NINF;
2604: int bonus_notrequired_g_reserved_values_nan_sp_prec7(void){double special; *((unsigned long *)(&special)) = DBL_NAN;
2605: int bonus_notrequired_g_reserved_values_pzero_sp_prec7(void){double special; *((unsigned long *)(&special)) = DBL_PZERO;
2606: int bonus_notrequired_g_reserved_values_nzero_sp_prec7(void){double special; *((unsigned long *)(&special)) = DBL_NZERO;
2607: int bonus_notrequired_g_reserved_values_inf_sp(void){double special; *((unsigned long *)(&special)) = DBL_INF;
2608: int bonus_notrequired_g_reserved_values_ninf_sp(void){double special; *((unsigned long *)(&special)) = DBL_NINF;
2609: int bonus_notrequired_g_reserved_values_nan_sp(void){double special; *((unsigned long *)(&special)) = DBL_NAN;
2610: int bonus_notrequired_g_reserved_values_pzero_sp(void){double special; *((unsigned long *)(&special)) = DBL_PZERO;
2611: int bonus_notrequired_g_reserved_values_nzero_sp(void){double special; *((unsigned long *)(&special)) = DBL_NZERO;
2612: int bonus_notrequired_g_reserved_values_inf_6wzp(void){double special; *((unsigned long *)(&special)) = DBL_INF;
2613: int bonus_notrequired_g_reserved_values_ninf_6wzp(void){double special; *((unsigned long *)(&special)) = DBL_NINF;
2614: int bonus_notrequired_g_reserved_values_nan_6wzp(void){double special; *((unsigned long *)(&special)) = DBL_NAN;
2615: int bonus_notrequired_g_reserved_values_pzero_6wzp(void){double special; *((unsigned long *)(&special)) = DBL_PZERO;
2616: int bonus_notrequired_g_reserved_values_nzero_6wzp(void){double special; *((unsigned long *)(&special)) = DBL_NZERO;
2617: int bonus_e_basic_1(void){return test("this %e scientific notation", 1.5);}
2618: int bonus_e_basic_fltonly(void){return test("%e", 7.5);}
2619: int bonus_e_basic_zero(void){return test("%e", 0.0);}
2620: int bonus_e_basic_nzero(void){return test("%e", -0.0);}
2621: int bonus_e_basic_whole(void){return test("%e", 1.0);}
2622: int bonus_e_basic_negative(void){return test("%e", -3.85);}
2623: int bonus_e_basic_positive_3_3(void){return test("%e", 573.924);}
2624: int bonus_e_basic_negative_3_3(void){return test("%e", -958.125);}
2625: int bonus_e_basic_positive_smallfpart(void){return test("%e", 23.00041);}
2626: int bonus_e_basic_positive_allsmall(void){return test("%e", 0.000039);}
2627: int bonus_e_basic_negative_smallfpart(void){return test("%e", -7.00036);}
2628: int bonus_e_basic_negative_allsmall(void){return test("%e", -0.00032);}
2629: int bonus_e_basic_limits_allsmall_pos(void){return test("%e", 0.000001);}
2630: int bonus_e_basic_limits_allsmall_neg(void){return test("%e", -0.000001);}
2631: int bonus_e_basic_limits_smallfpart_pos(void){return test("%e", 9873.000001);}
2632: int bonus_e_basic_limits_smallfpart_neg(void){return test("%e", -875.000001);}
2633: int bonus_e_basic_limits_allbig_pos(void){return test("%e", 999.999999);}
2634: int bonus_e_basic_limits_allbig_neg(void){return test("%e", -99.999999);}
2635: int bonus_e_basic_limits_bigfpart_pos(void){return test("%e", 0.999999);}
2636: int bonus_e_basic_limits_bigfpart_neg(void){return test("%e", -0.999999);}
2637: int bonus_e_rndd_pos(void){return test("%e", 23.375094499);}
2638: int bonus_e_rndd_neg(void){return test("%e", -985.765426499);}
2639: int bonus_e_rndu_pos(void){return test("%e", 0.0894255);}
2640: int bonus_e_rndu_neg(void){return test("%e", -56.2012685);}
2641: int bonus_e_rndu_multidigit_pos(void){return test("%e", 43.4399999);}
2642: int bonus_e_rndu_multidigit_neg(void){return test("%e", -5.0299999);}
2643: int bonus_e_rndd_multidigit_pos(void){return test("%e", 43.43999949);}
2644: int bonus_e_rndd_multidigit_neg(void){return test("%e", -5.02999949);}
2645: int bonus_e_rndd_wholnobump_pos(void){return test("%e", 1.99999949);}
2646: int bonus_e_rndd_wholnobump_neg(void){return test("%e", -0.99999949);}
2647: int bonus_e_rndu_bumpwhole_pos(void){return test("%e", 3.9999999);}
2648: int bonus_e_rndu_bumpwhole_neg(void){return test("%e", -5.9999999);}
2649: int bonus_e_prec0_zero(void){return test("%.0e", 0.0);}
2650: int bonus_e_prec0_nzero(void){return test("%.0e", -0.0);}
2651: int bonus_e_prec0_1(void){return test("this %.0e scientific notation", 1.6);}
2652: int bonus_e_prec0_fltonly(void){return test("%.0e", 7.4);}
2653: int bonus_e_prec0_whole(void){return test("%.0e", 1.0);}
2654: int bonus_e_prec0_negative(void){return test("%.0e", -3.85);}
2655: int bonus_e_prec0_positive_3_3(void){return test("%.0e", 573.924);}
2656: int bonus_e_prec0_negative_3_3(void){return test("%.0e", -958.125);}
2657: int bonus_e_prec0_positive_smallfpart(void){return test("%.0e", 23.00041);}
2658: int bonus_e_prec0_positive_allsmall(void){return test("%.0e", 0.000039);}
2659: int bonus_e_prec0_negative_smallfpart(void){return test("%.0e", -7.00036);}
2660: int bonus_e_prec0_negative_allsmall(void){return test("%.0e", -0.00032);}
2661: int bonus_e_prec1_zero(void){return test("%.1e", 0.0);}
2662: int bonus_e_prec1_nzero(void){return test("%.1e", -0.0);}
2663: int bonus_e_prec1_1(void){return test("this %.1e scientific notation", 1.5);}
2664: int bonus_e_prec1_fltonly(void){return test("%.1e", 7.5);}
2665: int bonus_e_prec1_whole(void){return test("%.1e", 1.0);}
2666: int bonus_e_prec1_negative(void){return test("%.1e", -3.85);}
2667: int bonus_e_prec1_positive_3_3(void){return test("%.1e", 573.924);}
2668: int bonus_e_prec1_negative_3_3(void){return test("%.1e", -958.125);}
2669: int bonus_e_prec1_positive_smallfpart(void){return test("%.1e", 23.00041);}
2670: int bonus_e_prec1_positive_allsmall(void){return test("%.1e", 0.000039);}
2671: int bonus_e_prec1_negative_smallfpart(void){return test("%.1e", -7.00036);}
2672: int bonus_e_prec1_negative_allsmall(void){return test("%.1e", -0.00032);}
2673: int bonus_e_prec3_zero(void){return test("%.3e", 0.0);}
2674: int bonus_e_prec3_nzero(void){return test("%.3e", -0.0);}
2675: int bonus_e_prec3_1(void){return test("this %.3e scientific notation", 1.5);}
2676: int bonus_e_prec3_fltonly(void){return test("%.3e", 7.5);}
2677: int bonus_e_prec3_whole(void){return test("%.3e", 1.0);}
2678: int bonus_e_prec3_negative(void){return test("%.3e", -3.85);}
2679: int bonus_e_prec3_positive_3_3(void){return test("%.3e", 573.924);}
2680: int bonus_e_prec3_negative_3_3(void){return test("%.3e", -958.125);}
2681: int bonus_e_prec3_positive_smallfpart(void){return test("%.3e", 23.00041);}
2682: int bonus_e_prec3_positive_allsmall(void){return test("%.3e", 0.000039);}
2683: int bonus_e_prec3_negative_smallfpart(void){return test("%.3e", -7.00036);}
2684: int bonus_e_prec3_negative_allsmall(void){return test("%.3e", -0.00032);}
2685: int bonus_e_prec7_zero(void){return test("%.7e", 0.0);}
2686: int bonus_e_prec7_nzero(void){return test("%.7e", -0.0);}
2687: int bonus_e_prec7_1(void){return test("this %.7e scientific notation", 1.5);}
2688: int bonus_e_prec7_fltonly(void){return test("%.7e", 7.5);}
2689: int bonus_e_prec7_whole(void){return test("%.7e", 1.0);}
2690: int bonus_e_prec7_negative(void){return test("%.7e", -3.85);}
2691: int bonus_e_prec7_positive_3_3(void){return test("%.7e", 573.924);}
2692: int bonus_e_prec7_negative_3_3(void){return test("%.7e", -958.125);}
2693: int bonus_e_prec7_positive_smallfpart(void){return test("%.7e", 23.00041);}
2694: int bonus_e_prec7_positive_allsmall(void){return test("%.7e", 0.0000039);}
2695: int bonus_e_prec7_negative_smallfpart(void){return test("%.7e", -7.00036);}
2696: int bonus_e_prec7_negative_allsmall(void){return test("%.7e", -0.000032);}
2697: int bonus_e_prec7_limits_allsmall_pos(void){return test("%.7e", 0.0000001);}
2698: int bonus_e_prec7_limits_allsmall_neg(void){return test("%.7e", -0.0000001);}
2699: int bonus_e_prec7_limits_smallfpart_pos(void){return test("%.7e", 9873.000001);}
2700: int bonus_e_prec7_limits_smallfpart_neg(void){return test("%.7e", -875.000001);}
2701: int bonus_e_prec7_limits_allbig_pos(void){return test("%.7e", 999.9999999);}
2702: int bonus_e_prec7_limits_allbig_neg(void){return test("%.7e", -99.9999999);}
2703: int bonus_e_prec7_limits_bigfpart_pos(void){return test("%.7e", 0.999999);}
2704: int bonus_e_prec7_limits_bigfpart_neg(void){return test("%.7e", -0.999999);}
2705: int bonus_e_rnd_prec7_rndd_pos(void){return test("%.7e", 23.375094499);}
2706: int bonus_e_rnd_prec7_rndd_neg(void){return test("%.7e", -985.765426499);}
2707: int bonus_e_rnd_prec7_rndu_pos(void){return test("%.7e", 0.0894255);}
2708: int bonus_e_rnd_prec7_rndu_neg(void){return test("%.7e", -56.2012685);}
2709: int bonus_e_rnd_prec7_rndu_multidigit_pos(void){return test("%.7e", 43.4399999);}
2710: int bonus_e_rnd_prec7_rndu_multidigit_neg(void){return test("%.7e", -5.0299999);}
2711: int bonus_e_rnd_prec7_rndd_multidigit_pos(void){return test("%.7e", 43.43999949);}
2712: int bonus_e_rnd_prec7_rndd_multidigit_neg(void){return test("%.7e", -5.02999949);}
2713: int bonus_e_rnd_prec7_rndd_wholnobump_pos(void){return test("%.7e", 1.99999949);}
2714: int bonus_e_rnd_prec7_rndd_wholnobump_neg(void){return test("%.7e", -0.99999949);}
2715: int bonus_e_rnd_prec7_rndu_bumpwhole_pos(void){return test("%.7e", 3.9999999);}
2716: int bonus_e_prec8_zero(void){return test("%.8e", 0.0);}
2717: int bonus_e_prec8_nzero(void){return test("%.8e", -0.0);}
2718: int bonus_e_prec8_1(void){return test("this %.8e scientific notation", 1.5);}
2719: int bonus_e_prec8_fltonly(void){return test("%.8e", 7.5);}
2720: int bonus_e_prec8_whole(void){return test("%.8e", 1.0);}
2721: int bonus_e_prec8_negative(void){return test("%.8e", -3.85);}
2722: int bonus_e_prec8_positive_3_3(void){return test("%.8e", 573.924);}
2723: int bonus_e_prec8_negative_3_3(void){return test("%.8e", -958.125);}
2724: int bonus_e_prec8_positive_smallfpart(void){return test("%.8e", 23.00041);}
2725: int bonus_e_prec8_positive_allsmall(void){return test("%.8e", 0.00000039);}
2726: int bonus_e_prec8_negative_smallfpart(void){return test("%.8e", -7.00036);}
2727: int bonus_e_prec8_negative_allsmall(void){return test("%.8e", -0.0000032);}
2728: int bonus_e_prec8_limits_allsmall_pos(void){return test("%.8e", 0.00000001);}
2729: int bonus_e_prec8_limits_allsmall_neg(void){return test("%.8e", -0.00000001);}
2730: int bonus_e_prec8_limits_smallfpart_pos(void){return test("%.8e", 9873.000001);}
2731: int bonus_e_prec8_limits_smallfpart_neg(void){return test("%.8e", -875.000001);}
2732: int bonus_e_prec8_limits_allbig_pos(void){return test("%.8e", 999.9999999);}
2733: int bonus_e_prec8_limits_allbig_neg(void){return test("%.8e", -99.99999999);}
2734: int bonus_e_prec8_limits_bigfpart_pos(void){return test("%.8e", 0.999999);}
2735: int bonus_e_prec8_limits_bigfpart_neg(void){return test("%.8e", -0.999999);}
2736: int bonus_e_rnd_prec8_rndd_pos(void){return test("%.8e", 23.375094499);}
2737: int bonus_e_rnd_prec8_rndd_neg(void){return test("%.8e", -985.765426499);}
2738: int bonus_e_rnd_prec8_rndu_pos(void){return test("%.8e", 0.0894255);}
2739: int bonus_e_rnd_prec8_rndu_neg(void){return test("%.8e", -56.2012685);}
2740: int bonus_e_rnd_prec8_rndu_multidigit_pos(void){return test("%.8e", 43.4399999);}
2741: int bonus_e_rnd_prec8_rndu_multidigit_neg(void){return test("%.8e", -5.0299999);}
2742: int bonus_e_rnd_prec8_rndd_multidigit_pos(void){return test("%.8e", 43.43999949);}
2743: int bonus_e_rnd_prec8_rndd_multidigit_neg(void){return test("%.8e", -5.02999949);}
2744: int bonus_e_rnd_prec8_rndd_wholnobump_pos(void){return test("%.8e", 1.99999949);}
2745: int bonus_e_rnd_prec8_rndd_wholnobump_neg(void){return test("%.8e", -0.99999949);}
2746: int bonus_e_rnd_prec8_rndu_bumpwhole_pos(void){return test("%.8e", 3.9999999);}
2747: int bonus_e_prec9_zero(void){return test("%.9e", 0.0);}
2748: int bonus_e_prec9_nzero(void){return test("%.9e", -0.0);}
2749: int bonus_e_stress_prec9_1(void){return test("this %.9e scientific notation", 1.5);}
2750: int bonus_e_stress_prec9_fltonly(void){return test("%.9e", 7.5);}
2751: int bonus_e_stress_prec9_whole(void){return test("%.9e", 1.0);}
2752: int bonus_e_stress_prec9_negative(void){return test("%.9e", -3.85);}
2753: int bonus_e_stress_prec9_positive_3_3(void){return test("%.9e", 573.924);}
2754: int bonus_e_stress_prec9_negative_3_3(void){return test("%.9e", -958.125);}
2755: int bonus_e_stress_prec9_positive_smallfpart(void){return test("%.9e", 23.00041);}
2756: int bonus_e_stress_prec9_positive_allsmall(void){return test("%.9e", 0.00000039);}
2757: int bonus_e_stress_prec9_negative_smallfpart(void){return test("%.9e", -7.00036);}
2758: int bonus_e_stress_prec9_negative_allsmall(void){return test("%.9e", -0.0000032);}
2759: int bonus_e_stress_prec9_limits_allsmall_pos(void){return test("%.9e", 0.00000001);}
2760: int bonus_e_stress_prec9_limits_allsmall_neg(void){return test("%.9e", -0.00000001);}
2761: int bonus_e_stress_prec9_limits_smallfpart_pos(void){return test("%.9e", 9873.000001);}
2762: int bonus_e_stress_prec9_limits_smallfpart_neg(void){return test("%.9e", -875.000001);}
2763: int bonus_e_stress_prec9_limits_allbig_pos(void){return test("%.9e", 999.99999999);}
2764: int bonus_e_stress_prec9_limits_allbig_neg(void){return test("%.9e", -99.99999999);}
2765: int bonus_e_stress_prec9_limits_bigfpart_pos(void){return test("%.9e", 0.999999);}
2766: int bonus_e_stress_prec9_limits_bigfpart_neg(void){return test("%.9e", -0.999999);}
2767: int bonus_e_stress_prec9_rndd_pos(void){return test("%.9e", 23.375094499);}
2768: int bonus_e_stress_prec9_rndd_neg(void){return test("%.9e", -985.765426499);}
2769: int bonus_e_stress_prec9_rndu_pos(void){return test("%.9e", 0.0894255);}
2770: int bonus_e_stress_prec9_rndu_neg(void){return test("%.9e", -56.2012685);}
2771: int bonus_e_stress_prec9_rndu_multidigit_pos(void){return test("%.9e", 43.4399999);}
2772: int bonus_e_stress_prec9_rndu_multidigit_neg(void){return test("%.9e", -5.0299999);}
2773: int bonus_e_stress_prec9_rndd_multidigit_pos(void){return test("%.9e", 43.43999949);}
2774: int bonus_e_stress_prec9_rndd_multidigit_neg(void){return test("%.9e", -5.02999949);}
2775: int bonus_e_stress_prec9_rndd_wholnobump_pos(void){return test("%.9e", 1.99999949);}
2776: int bonus_e_stress_prec9_rndd_wholnobump_neg(void){return test("%.9e", -0.99999949);}
2777: int bonus_e_stress_prec9_rndu_bumpwhole_pos(void){return test("%.9e", 3.9999999);}
2778: int bonus_e_prec10_zero(void){return test("%.10e", 0.0);}
2779: int bonus_e_prec10_nzero(void){return test("%.10e", -0.0);}
2780: int bonus_e_stress_prec10_1(void){return test("this %.10e scientific notation", 1.5);}
2781: int bonus_e_stress_prec10_fltonly(void){return test("%.10e", 7.5);}
2782: int bonus_e_stress_prec10_whole(void){return test("%.10e", 1.0);}
2783: int bonus_e_stress_prec10_negative(void){return test("%.10e", -3.85);}
2784: int bonus_e_stress_prec10_positive_3_10(void){return test("%.10e", 573.924);}
2785: int bonus_e_stress_prec10_negative_3_10(void){return test("%.10e", -958.125);}
2786: int bonus_e_stress_prec10_pos(void){return test("%.10e", 23.8341375094);}
2787: int bonus_e_stress_prec10_neg(void){return test("%.10e", -985.2459765426);}
2788: int bonus_e_stress_prec10_rndd_pos(void){return test("%.10e", 23.8341375094499);}
2789: int bonus_e_stress_prec10_rndd_neg(void){return test("%.10e", -985.2459765426499);}
2790: int bonus_e_stress_prec10_rndu_pos(void){return test("%.10e", 0.87650894255);}
2791: int bonus_e_stress_prec10_rndu_neg(void){return test("%.10e", -56.47852012685);}
2792: int bonus_e_stress_prec10_positive_smallfpart(void){return test("%.10e", 23.000000041);}
2793: int bonus_e_stress_prec10_positive_allsmall(void){return test("%.10e", 0.0000000039);}
2794: int bonus_e_stress_prec10_negative_smallfpart(void){return test("%.10e", -7.000000036);}
2795: int bonus_e_stress_prec10_negative_allsmall(void){return test("%.10e", -0.000000032);}
2796: int bonus_e_stress_prec10_limits_allsmall_pos(void){return test("%.10e", 0.0000000001);}
2797: int bonus_e_stress_prec10_limits_allsmall_neg(void){return test("%.10e", -0.0000000001);}
2798: int bonus_e_stress_prec10_limits_smallfpart_pos(void){return test("%.10e", 9873.0000000001);}
2799: int bonus_e_stress_prec10_limits_smallfpart_neg(void){return test("%.10e", -875.0000000001);}
2800: int bonus_e_stress_prec10_limits_allbig_pos(void){return test("%.10e", 999.9999999999);}
2801: int bonus_e_stress_prec10_limits_allbig_neg(void){return test("%.10e", -99.9999999999);}
2802: int bonus_e_stress_prec10_limits_bigfpart_pos(void){return test("%.10e", 0.9999999999);}
2803: int bonus_e_stress_prec10_limits_bigfpart_neg(void){return test("%.10e", -0.9999999999);}
2804: int bonus_e_stress_prec11_rndu(void){return test("%.11e",        1.025978541236587568);}
2805: int bonus_e_stress_prec11_rndd(void){return test("%.11e",        1.025978548534310421);}
2806: int bonus_e_stress_prec11_limits_tiny(void){return test("%.11e", 0.000000000010000000);}
2807: int bonus_e_stress_prec11_limits_big(void){return test("%.11e", 99.999999999990000000);}
2808: int bonus_e_stress_prec12_rndu(void){return test("%.12e",        1.025978541236587568);}
2809: int bonus_e_stress_prec12_rndd(void){return test("%.12e",        1.025978548534310421);}
2810: int bonus_e_stress_prec12_limits_tiny(void){return test("%.12e", 0.000000000001000000);}
2811: int bonus_e_stress_prec12_limits_big(void){return test("%.12e", 99.999999999999000000);}
2812: int bonus_e_stress_prec13_rndu(void){return test("%.13e",        1.025978541136587568);}
2813: int bonus_e_stress_prec13_rndd(void){return test("%.13e",        1.025978548534310421);}
2814: int bonus_e_stress_prec13_limits_tiny(void){return test("%.13e", 0.000000000000100000);}
2815: int bonus_e_stress_prec13_limits_big(void){return test("%.13e", 99.999999999999900000);}
2816: int bonus_e_stress_prec14_rndu(void){return test("%.14e",        1.025978541436587568);}
2817: int bonus_e_stress_prec14_rndd(void){return test("%.14e",        1.025978548534310421);}
2818: int bonus_e_stress_prec14_limits_tiny(void){return test("%.14e", 0.000000000000010000);}
2819: int bonus_e_stress_prec14_limits_big(void){return test("%.14e",  9.999999999999990000);}
2820: int bonus_e_stress_prec15_rndu(void){return test("%.15e",        1.025978542436587568);}
2821: int bonus_e_stress_prec15_rndd(void){return test("%.15e",        1.025978548534310421);}
2822: int bonus_e_stress_prec15_limits_tiny(void){return test("%.15e", 0.000000000000001000);}
2823: int bonus_e_stress_prec15_limits_big(void){return test("%.15e",  0.999999999999999000);}
2824: int bonus_notrequired_e_stress_prec16_rndu(void){return test("%.16e",        1.025978542436587568);}
2825: int bonus_notrequired_e_stress_prec16_rndd(void){return test("%.16e",        1.025978548534310421);}
2826: int bonus_notrequired_e_stress_prec16_limits_tiny(void){return test("%.16e", 0.000000000000000100);}
2827: int bonus_notrequired_e_stress_prec16_limits_big(void){return test("%.16e",  0.999999999999999900);}
2828: int bonus_notrequired_e_stress_prec17_rndu(void){return test("%.17e",        1.025978542436587568);}
2829: int bonus_notrequired_e_stress_prec17_rndd(void){return test("%.17e",        1.025978548534310421);}
2830: int bonus_notrequired_e_stress_prec17_limits_tiny(void){return test("%.17e", 0.000000000000000010);}
2831: int bonus_notrequired_e_stress_prec17_limits_big(void){return test("%.17e",  0.999999999999999990);}
2832: int bonus_notrequired_e_stress_prec18_rndu(void){return test("%.18e",        0.125978542436587568);}
2833: int bonus_notrequired_e_stress_prec18_rndd(void){return test("%.18e",        0.125978548534310421);}
2834: int bonus_e_af_prec0_zero(void){return test("%#.0e", 0.0);}
2835: int bonus_e_af_prec0_nzero(void){return test("%#.0e", -0.0);}
2836: int bonus_e_af_prec1_zero(void){return test("%#.1e", 0.0);}
2837: int bonus_e_af_prec1_nzero(void){return test("%#.1e", -0.0);}
2838: int bonus_e_af_prec0p(void){return test("%#.0e", 7.4);}
2839: int bonus_e_af_prec1p(void){return test("%#.1e", 7.3);}
2840: int bonus_e_af_prec0n(void){return test("%#.0e", -7.4);}
2841: int bonus_e_af_prec1n(void){return test("%#.1e", -7.3);}
2842: int bonus_e_as_prec0_zero(void){return test("%+.0e", 0.0);}
2843: int bonus_e_as_prec0_nzero(void){return test("%+.0e", -0.0);}
2844: int bonus_e_as_prec3_zero(void){return test("%+.3e", 0.0);}
2845: int bonus_e_as_prec3_nzero(void){return test("%+.3e", -0.0);}
2846: int bonus_e_as_prec0p_as(void){return test("%+.0e", 7.4);}
2847: int bonus_e_as_prec3p_as(void){return test("%+.3e", 7.3);}
2848: int bonus_e_as_prec0n_as(void){return test("%+.0e", -7.4);}
2849: int bonus_e_as_prec3n_as(void){return test("%+.3e", -7.3);}
2850: int bonus_e_wprec0p_zero(void){return test("%5.0e", 0.0);}
2851: int bonus_e_wprec0p_nzero(void){return test("%5.0e", -0.0);}
2852: int bonus_e_wprec3p_zero(void){return test("%5.3e", 0.0);}
2853: int bonus_e_wprec3p_nzero(void){return test("%5.3e", -0.0);}
2854: int bonus_e_wprec0p(void){return test("%5.0e", 7.3);}
2855: int bonus_e_wprec1p(void){return test("%5.1e", 7.3);}
2856: int bonus_e_wprec3p(void){return test("%5.3e", 7.3);}
2857: int bonus_e_wprec6p(void){return test("%5.6e", 7.3);}
2858: int bonus_e_wprec0n(void){return test("%5.0e", -7.3);}
2859: int bonus_e_wprec1n(void){return test("%5.1e", -7.3);}
2860: int bonus_e_wprec3n(void){return test("%5.3e", -7.3);}
2861: int bonus_e_wprec6n(void){return test("%5.6e", -7.3);}
2862: int bonus_e_wzp_prec0p_zero(void){return test("%05.0e", 0.0);}
2863: int bonus_e_wzp_prec0p_nzero(void){return test("%05.0e", -0.0);}
2864: int bonus_e_wzp_prec3p_zero(void){return test("%05.3e", 0.0);}
2865: int bonus_e_wzp_prec3p_nzero(void){return test("%05.3e", -0.0);}
2866: int bonus_e_wzp_prec0p(void){return test("%05.0e", 7.3);}
2867: int bonus_e_wzp_prec1p(void){return test("%05.1e", 7.3);}
2868: int bonus_e_wzp_prec3p(void){return test("%05.3e", 7.3);}
2869: int bonus_e_wzp_prec6p(void){return test("%05.6e", 7.3);}
2870: int bonus_e_wzp_prec0n(void){return test("%05.0e", -7.3);}
2871: int bonus_e_wzp_prec1n(void){return test("%05.1e", -7.3);}
2872: int bonus_e_wzp_prec3n(void){return test("%05.3e", -7.3);}
2873: int bonus_e_wzp_prec6n(void){return test("%05.6e", -7.3);}
2874: int bonus_e_wlj_prec0p_zero(void){return test("%-5.0e", 0.0);}
2875: int bonus_e_wlj_prec0p_nzero(void){return test("%-5.0e", -0.0);}
2876: int bonus_e_wlj_prec3p_zero(void){return test("%-5.3e", 0.0);}
2877: int bonus_e_wlj_prec3p_nzero(void){return test("%-5.3e", -0.0);}
2878: int bonus_e_wlj_prec0p(void){return test("%-5.0e", 7.3);}
2879: int bonus_e_wlj_prec1p(void){return test("%-5.1e", 7.3);}
2880: int bonus_e_wlj_prec3p(void){return test("%-5.3e", 7.3);}
2881: int bonus_e_wlj_prec6p(void){return test("%-5.6e", 7.3);}
2882: int bonus_e_wlj_prec0n(void){return test("%-5.0e", -7.3);}
2883: int bonus_e_wlj_prec1n(void){return test("%-5.1e", -7.3);}
2884: int bonus_e_wlj_prec3n(void){return test("%-5.3e", -7.3);}
2885: int bonus_e_wlj_prec6n(void){return test("%-5.6e", -7.3);}
2886: int bonus_e_wzplj_prec0p_ignoreflag_zero(void){return test("%-05.0e", 0.0);}
2887: int bonus_e_wzplj_prec0p_ignoreflag_nzero(void){return test("%-05.0e", -0.0);}
2888: int bonus_e_wzplj_prec3p_ignoreflag_zero(void){return test("%-05.3e", 0.0);}
2889: int bonus_e_wzplj_prec3p_ignoreflag_nzero(void){return test("%-05.3e", -0.0);}
2890: int bonus_e_wzplj_prec0p_ignoreflag(void){return test("%-05.0e", 7.3);}
2891: int bonus_e_wzplj_prec1p_ignoreflag(void){return test("%-05.1e", 7.3);}
2892: int bonus_e_wzplj_prec3p_ignoreflag(void){return test("%-05.3e", 7.3);}
2893: int bonus_e_wzplj_prec6p_ignoreflag(void){return test("%-05.6e", 7.3);}
2894: int bonus_e_wzplj_prec0n_ignoreflag(void){return test("%-05.0e", -7.3);}
2895: int bonus_e_wzplj_prec1n_ignoreflag(void){return test("%-05.1e", -7.3);}
2896: int bonus_e_wzplj_prec3n_ignoreflag(void){return test("%-05.3e", -7.3);}
2897: int bonus_e_wzplj_prec6n_ignoreflag(void){return test("%-05.6e", -7.3);}
2898: int bonus_e_wzpljr_prec0p_ignoreflag_zero(void){return test("%0-5.0e", 0.0);}
2899: int bonus_e_wzpljr_prec0p_ignoreflag_nzero(void){return test("%0-5.0e", -0.0);}
2900: int bonus_e_wzpljr_prec3p_ignoreflag_zero(void){return test("%0-5.3e", 0.0);}
2901: int bonus_e_wzpljr_prec3p_ignoreflag_nzero(void){return test("%0-5.3e", -0.0);}
2902: int bonus_e_wzpljr_prec0p_ignoreflag(void){return test("%0-5.0e", 7.3);}
2903: int bonus_e_wzpljr_prec1p_ignoreflag(void){return test("%0-5.1e", 7.3);}
2904: int bonus_e_wzpljr_prec3p_ignoreflag(void){return test("%0-5.3e", 7.3);}
2905: int bonus_e_wzpljr_prec6p_ignoreflag(void){return test("%0-5.6e", 7.3);}
2906: int bonus_e_wzpljr_prec0n_ignoreflag(void){return test("%0-5.0e", -7.3);}
2907: int bonus_e_wzpljr_prec1n_ignoreflag(void){return test("%0-5.1e", -7.3);}
2908: int bonus_e_wzpljr_prec3n_ignoreflag(void){return test("%0-5.3e", -7.3);}
2909: int bonus_e_wzpljr_prec6n_ignoreflag(void){return test("%0-5.6e", -7.3);}
2910: int bonus_e_wzpljaf_prec0p_zero(void){return test("%#-5.0e", 0.0);}
2911: int bonus_e_wzpljaf_prec0p_nzero(void){return test("%#-5.0e", -0.0);}
2912: int bonus_e_wzpljaf_prec3p_zero(void){return test("%#-5.3e", 0.0);}
2913: int bonus_e_wzpljaf_prec3p_nzero(void){return test("%#-5.3e", -0.0);}
2914: int bonus_e_wzpljaf_prec0p(void){return test("%#-5.0e", 7.3);}
2915: int bonus_e_wzpljaf_prec1p(void){return test("%#-5.1e", 7.3);}
2916: int bonus_e_wzpljaf_prec3p(void){return test("%#-5.3e", 7.3);}
2917: int bonus_e_wzpljaf_prec6p(void){return test("%#-5.6e", 7.3);}
2918: int bonus_e_wzpljaf_prec0n(void){return test("%#-5.0e", -7.3);}
2919: int bonus_e_wzpljaf_prec1n(void){return test("%#-5.1e", -7.3);}
2920: int bonus_e_wzpljaf_prec3n(void){return test("%#-5.3e", -7.3);}
2921: int bonus_e_wzpljaf_prec6n(void){return test("%#-5.6e", -7.3);}
2922: int bonus_e_was_prec0p_zero(void){return test("%+5.0e", 0.0);}
2923: int bonus_e_was_prec0p_nzero(void){return test("%+5.0e", -0.0);}
2924: int bonus_e_was_prec3p_zero(void){return test("%+5.3e", 0.0);}
2925: int bonus_e_was_prec3p_nzero(void){return test("%+5.3e", -0.0);}
2926: int bonus_e_was_prec0p(void){return test("%+5.0e", 7.3);}
2927: int bonus_e_was_prec1p(void){return test("%+5.1e", 7.3);}
2928: int bonus_e_was_prec3p(void){return test("%+5.3e", 7.3);}
2929: int bonus_e_was_prec6p(void){return test("%+5.6e", 7.3);}
2930: int bonus_e_was_prec0n(void){return test("%+5.0e", -7.3);}
2931: int bonus_e_was_prec1n(void){return test("%+5.1e", -7.3);}
2932: int bonus_e_was_prec3n(void){return test("%+5.3e", -7.3);}
2933: int bonus_e_was_prec6n(void){return test("%+5.6e", -7.3);}
2934: int bonus_e_wzpas_prec0p_zero(void){return test("%+05.0e", 0.0);}
2935: int bonus_e_wzpas_prec0p_nzero(void){return test("%+05.0e", -0.0);}
2936: int bonus_e_wzpas_prec3p_zero(void){return test("%+05.3e", 0.0);}
2937: int bonus_e_wzpas_prec3p_nzero(void){return test("%+05.3e", -0.0);}
2938: int bonus_e_wzpas_prec0p(void){return test("%+05.0e", 7.3);}
2939: int bonus_e_wzpas_prec1p(void){return test("%+05.1e", 7.3);}
2940: int bonus_e_wzpas_prec3p(void){return test("%+05.3e", 7.3);}
2941: int bonus_e_wzpas_prec6p(void){return test("%+05.6e", 7.3);}
2942: int bonus_e_wzpas_prec0n(void){return test("%+05.0e", -7.3);}
2943: int bonus_e_wzpas_prec1n(void){return test("%+05.1e", -7.3);}
2944: int bonus_e_wzpas_prec3n(void){return test("%+05.3e", -7.3);}
2945: int bonus_e_wzpas_prec6n(void){return test("%+05.6e", -7.3);}
2946: int bonus_e_wljas_prec0p_zero(void){return test("%+-5.0e", 0.0);}
2947: int bonus_e_wljas_prec0p_nzero(void){return test("%+-5.0e", -0.0);}
2948: int bonus_e_wljas_prec3p_zero(void){return test("%+-5.3e", 0.0);}
2949: int bonus_e_wljas_prec3p_nzero(void){return test("%+-5.3e", -0.0);}
2950: int bonus_e_wljas_prec0p(void){return test("%+-5.0e", 7.3);}
2951: int bonus_e_wljas_prec1p(void){return test("%+-5.1e", 7.3);}
2952: int bonus_e_wljas_prec3p(void){return test("%+-5.3e", 7.3);}
2953: int bonus_e_wljas_prec6p(void){return test("%+-5.6e", 7.3);}
2954: int bonus_e_wljas_prec0n(void){return test("%+-5.0e", -7.3);}
2955: int bonus_e_wljas_prec1n(void){return test("%+-5.1e", -7.3);}
2956: int bonus_e_wljas_prec3n(void){return test("%+-5.3e", -7.3);}
2957: int bonus_e_wljas_prec6n(void){return test("%+-5.6e", -7.3);}
2958: int bonus_e_wzpljas_prec0p_ignoreflag_zero(void){return test("%+-05.0e", 0.0);}
2959: int bonus_e_wzpljas_prec0p_ignoreflag_nzero(void){return test("%+-05.0e", -0.0);}
2960: int bonus_e_wzpljas_prec3p_ignoreflag_zero(void){return test("%+-05.3e", 0.0);}
2961: int bonus_e_wzpljas_prec3p_ignoreflag_nzero(void){return test("%+-05.3e", -0.0);}
2962: int bonus_e_wzpljas_prec0p_ignoreflag(void){return test("%+-05.0e", 7.3);}
2963: int bonus_e_wzpljas_prec1p_ignoreflag(void){return test("%+-05.1e", 7.3);}
2964: int bonus_e_wzpljas_prec3p_ignoreflag(void){return test("%+-05.3e", 7.3);}
2965: int bonus_e_wzpljas_prec6p_ignoreflag(void){return test("%+-05.6e", 7.3);}
2966: int bonus_e_wzpljas_prec0n_ignoreflag(void){return test("%+-05.0e", -7.3);}
2967: int bonus_e_wzpljas_prec1n_ignoreflag(void){return test("%+-05.1e", -7.3);}
2968: int bonus_e_wzpljas_prec3n_ignoreflag(void){return test("%+-05.3e", -7.3);}
2969: int bonus_e_wzpljas_prec6n_ignoreflag(void){return test("%+-05.6e", -7.3);}
2970: int bonus_e_wzpljras_prec0p_zero(void){return test("%+-05.0e", 0.0);}
2971: int bonus_e_wzpljras_prec0p_nzero(void){return test("%+-05.0e", -0.0);}
2972: int bonus_e_wzpljras_prec3p_zero(void){return test("%+-05.3e", 0.0);}
2973: int bonus_e_wzpljras_prec3p_nzero(void){return test("%+-05.3e", -0.0);}
2974: int bonus_e_wzpljras_prec0p(void){return test("%-+5.0e", 7.3);}
2975: int bonus_e_wzpljras_prec1p(void){return test("%-+5.1e", 7.3);}
2976: int bonus_e_wzpljras_prec3p(void){return test("%-+5.3e", 7.3);}
2977: int bonus_e_wzpljras_prec6p(void){return test("%-+5.6e", 7.3);}
2978: int bonus_e_wzpljras_prec0n(void){return test("%-+5.0e", -7.3);}
2979: int bonus_e_wzpljras_prec1n(void){return test("%-+5.1e", -7.3);}
2980: int bonus_e_wzpljras_prec3n(void){return test("%-+5.3e", -7.3);}
2981: int bonus_e_wzpljras_prec6n(void){return test("%-+5.6e", -7.3);}
2982: int bonus_e_wzpljafas_prec0p_zero(void){return test("%+#-05.0e", 0.0);}
2983: int bonus_e_wzpljafas_prec0p_nzero(void){return test("%+#-05.0e", -0.0);}
2984: int bonus_e_wzpljafas_prec3p_zero(void){return test("%+#-05.3e", 0.0);}
2985: int bonus_e_wzpljafas_prec3p_nzero(void){return test("%+#-05.3e", -0.0);}
2986: int bonus_e_wzpljafas_prec0p(void){return test("%+#-5.0e", 7.3);}
2987: int bonus_e_wzpljafas_prec1p(void){return test("%+#-5.1e", 7.3);}
2988: int bonus_e_wzpljafas_prec3p(void){return test("%+#-5.3e", 7.3);}
2989: int bonus_e_wzpljafas_prec6p(void){return test("%+#-5.6e", 7.3);}
2990: int bonus_e_wzpljafas_prec0n(void){return test("%+#-5.0e", -7.3);}
2991: int bonus_e_wzpljafas_prec1n(void){return test("%+#-5.1e", -7.3);}
2992: int bonus_e_wzpljafas_prec3n(void){return test("%+#-5.3e", -7.3);}
2993: int bonus_e_wzpljafas_prec6n(void){return test("%+#-5.6e", -7.3);}
2994: int bonus_e_wsp_prec0p_zero(void){return test("% 5.0e", 0.0);}
2995: int bonus_e_wsp_prec0p_nzero(void){return test("% 5.0e", -0.0);}
2996: int bonus_e_wsp_prec3p_zero(void){return test("% 5.3e", 0.0);}
2997: int bonus_e_wsp_prec3p_nzero(void){return test("% 5.3e", -0.0);}
2998: int bonus_e_wsp_prec0p(void){return test("% 5.0e", 7.3);}
2999: int bonus_e_wsp_prec1p(void){return test("% 5.1e", 7.3);}
3000: int bonus_e_wsp_prec3p(void){return test("% 5.3e", 7.3);}
3001: int bonus_e_wsp_prec6p(void){return test("% 5.6e", 7.3);}
3002: int bonus_e_wsp_prec0n(void){return test("% 5.0e", -7.3);}
3003: int bonus_e_wsp_prec1n(void){return test("% 5.1e", -7.3);}
3004: int bonus_e_wsp_prec3n(void){return test("% 5.3e", -7.3);}
3005: int bonus_e_wsp_prec6n(void){return test("% 5.6e", -7.3);}
3006: int bonus_e_wzpsp_prec0p_zero(void){return test("% 05.0e", 0.0);}
3007: int bonus_e_wzpsp_prec0p_nzero(void){return test("% 05.0e", -0.0);}
3008: int bonus_e_wzpsp_prec3p_zero(void){return test("% 05.3e", 0.0);}
3009: int bonus_e_wzpsp_prec3p_nzero(void){return test("% 05.3e", -0.0);}
3010: int bonus_e_wzpsp_prec0p(void){return test("% 05.0e", 7.3);}
3011: int bonus_e_wzpsp_prec1p(void){return test("% 05.1e", 7.3);}
3012: int bonus_e_wzpsp_prec3p(void){return test("% 05.3e", 7.3);}
3013: int bonus_e_wzpsp_prec6p(void){return test("% 05.6e", 7.3);}
3014: int bonus_e_wzpsp_prec0n(void){return test("% 05.0e", -7.3);}
3015: int bonus_e_wzpsp_prec1n(void){return test("% 05.1e", -7.3);}
3016: int bonus_e_wzpsp_prec3n(void){return test("% 05.3e", -7.3);}
3017: int bonus_e_wzpsp_prec6n(void){return test("% 05.6e", -7.3);}
3018: int bonus_e_wljsp_prec0p_zero(void){return test("% -5.0e", 0.0);}
3019: int bonus_e_wljsp_prec0p_nzero(void){return test("% -5.0e", -0.0);}
3020: int bonus_e_wljsp_prec3p_zero(void){return test("% -5.3e", 0.0);}
3021: int bonus_e_wljsp_prec3p_nzero(void){return test("% -5.3e", -0.0);}
3022: int bonus_e_wljsp_prec0p(void){return test("% -5.0e", 7.3);}
3023: int bonus_e_wljsp_prec1p(void){return test("% -5.1e", 7.3);}
3024: int bonus_e_wljsp_prec3p(void){return test("% -5.3e", 7.3);}
3025: int bonus_e_wljsp_prec6p(void){return test("% -5.6e", 7.3);}
3026: int bonus_e_wljsp_prec0n(void){return test("% -5.0e", -7.3);}
3027: int bonus_e_wljsp_prec1n(void){return test("% -5.1e", -7.3);}
3028: int bonus_e_wljsp_prec3n(void){return test("% -5.3e", -7.3);}
3029: int bonus_e_wljsp_prec6n(void){return test("% -5.6e", -7.3);}
3030: int bonus_e_wzpljsp_prec0p_zero(void){return test("% -05.0e", 0.0);}
3031: int bonus_e_wzpljsp_prec0p_nzero(void){return test("% -05.0e", -0.0);}
3032: int bonus_e_wzpljsp_prec3p_zero(void){return test("% -05.3e", 0.0);}
3033: int bonus_e_wzpljsp_prec3p_nzero(void){return test("% -05.3e", -0.0);}
3034: int bonus_e_wzpljsp_prec0p_ignoreflag(void){return test("% -05.0e", 7.3);}
3035: int bonus_e_wzpljsp_prec1p_ignoreflag(void){return test("% -05.1e", 7.3);}
3036: int bonus_e_wzpljsp_prec3p_ignoreflag(void){return test("% -05.3e", 7.3);}
3037: int bonus_e_wzpljsp_prec6p_ignoreflag(void){return test("% -05.6e", 7.3);}
3038: int bonus_e_wzpljsp_prec0n_ignoreflag(void){return test("% -05.0e", -7.3);}
3039: int bonus_e_wzpljsp_prec1n_ignoreflag(void){return test("% -05.1e", -7.3);}
3040: int bonus_e_wzpljsp_prec3n_ignoreflag(void){return test("% -05.3e", -7.3);}
3041: int bonus_e_wzpljsp_prec6n_ignoreflag(void){return test("% -05.6e", -7.3);}
3042: int bonus_e_wzpljrsp_prec0p_zero(void){return test("%- 5.0e", 0.0);}
3043: int bonus_e_wzpljrsp_prec0p_nzero(void){return test("%- 5.0e", -0.0);}
3044: int bonus_e_wzpljrsp_prec3p_zero(void){return test("%- 5.3e", 0.0);}
3045: int bonus_e_wzpljrsp_prec3p_nzero(void){return test("%- 5.3e", -0.0);}
3046: int bonus_e_wzpljrsp_prec0p(void){return test("%- 5.0e", 7.3);}
3047: int bonus_e_wzpljrsp_prec1p(void){return test("%- 5.1e", 7.3);}
3048: int bonus_e_wzpljrsp_prec3p(void){return test("%- 5.3e", 7.3);}
3049: int bonus_e_wzpljrsp_prec6p(void){return test("%- 5.6e", 7.3);}
3050: int bonus_e_wzpljrsp_prec0n(void){return test("%- 5.0e", -7.3);}
3051: int bonus_e_wzpljrsp_prec1n(void){return test("%- 5.1e", -7.3);}
3052: int bonus_e_wzpljrsp_prec3n(void){return test("%- 5.3e", -7.3);}
3053: int bonus_e_wzpljrsp_prec6n(void){return test("%- 5.6e", -7.3);}
3054: int bonus_e_wzpljafsp_prec0p_zero(void){return test("% #-05.0e", 0.0);}
3055: int bonus_e_wzpljafsp_prec0p_nzero(void){return test("% #-05.0e", -0.0);}
3056: int bonus_e_wzpljafsp_prec3p_zero(void){return test("% #-05.3e", 0.0);}
3057: int bonus_e_wzpljafsp_prec3p_nzero(void){return test("% #-05.3e", -0.0);}
3058: int bonus_e_wzpljafsp_prec0p(void){return test("% #-5.0e", 7.3);}
3059: int bonus_e_wzpljafsp_prec1p(void){return test("% #-5.1e", 7.3);}
3060: int bonus_e_wzpljafsp_prec3p(void){return test("% #-5.3e", 7.3);}
3061: int bonus_e_wzpljafsp_prec6p(void){return test("% #-5.6e", 7.3);}
3062: int bonus_e_wzpljafsp_prec0n(void){return test("% #-5.0e", -7.3);}
3063: int bonus_e_wzpljafsp_prec1n(void){return test("% #-5.1e", -7.3);}
3064: int bonus_e_wzpljafsp_prec3n(void){return test("% #-5.3e", -7.3);}
3065: int bonus_e_wzpljafsp_prec6n(void){return test("% #-5.6e", -7.3);}
3066: int bonus_e_assp_prec0p_ignoreflag(void){return test("%+ .0e", 7.3);}
3067: int bonus_e_assp_prec1p_ignoreflag(void){return test("%+ .1e", 7.3);}
3068: int bonus_e_assp_prec3p_ignoreflag(void){return test("%+ .3e", 7.3);}
3069: int bonus_e_assp_prec6p_ignoreflag(void){return test("%+ .6e", 7.3);}
3070: int bonus_e_assp_prec0n_ignoreflag(void){return test("%+ .0e", -7.3);}
3071: int bonus_e_assp_prec1n_ignoreflag(void){return test("%+ .1e", -7.3);}
3072: int bonus_e_assp_prec3n_ignoreflag(void){return test("%+ .3e", -7.3);}
3073: int bonus_e_assp_prec6n_ignoreflag(void){return test("%+ .6e", -7.3);}
3074: int bonus_e_asspr_prec0p_ignoreflag(void){return test("% +.0e", 7.3);}
3075: int bonus_e_asspr_prec1p_ignoreflag(void){return test("% +.1e", 7.3);}
3076: int bonus_e_asspr_prec3p_ignoreflag(void){return test("% +.3e", 7.3);}
3077: int bonus_e_asspr_prec6p_ignoreflag(void){return test("% +.6e", 7.3);}
3078: int bonus_e_asspr_prec0n_ignoreflag(void){return test("% +.0e", -7.3);}
3079: int bonus_e_asspr_prec1n_ignoreflag(void){return test("% +.1e", -7.3);}
3080: int bonus_e_asspr_prec3n_ignoreflag(void){return test("% +.3e", -7.3);}
3081: int bonus_e_asspr_prec6n_ignoreflag(void){return test("% +.6e", -7.3);}
3082: int bonus_notrequired_e_overprec_might_be_undefbehav_100(void){return test("%.100e", 0.237);}
3083: int bonus_notrequired_e_overprec_might_be_undefbehav_32(void){return test("%.32e", 0.237);}
3084: int bonus_notrequired_e_overprec_might_be_undefbehav_4(void){return test("%.4e", 0.237);}
3085: int bonus_notrequired_e_overprec_might_be_undefbehav_1000(void){return test("%.4e", -0.106577568068517810765107851705167);}
3086: int bonus_notrequired_e_overprec_might_be_undefbehav_10_from_0(void){return test("%.10e", 0.0);}
3087: int bonus_notrequired_e_overprec_might_be_undefbehav_2000(void){return test("%.2000e", 623.28376510723481);}
3088: int bonus_notrequired_e_overprec_might_be_undefbehav_dblmin(void){return test("%.2000e", DBL_MIN);}
3089: int bonus_notrequired_e_overprec_might_be_undefbehav_ndblmin(void){return test("%.2000e", -DBL_MIN);}
3090: int bonus_notrequired_e_limits_dblmax_prec0(void){return test("%.0e", DBL_MAX);}
3091: int bonus_notrequired_e_limits_dblmax_prec3(void){return test("%.3e", DBL_MAX);}
3092: int bonus_notrequired_e_limits_dblmax_precd(void){return test("%e", DBL_MAX);}
3093: int bonus_notrequired_e_limits_dblmax_prec8(void){return test("%.8e", DBL_MAX);}
3094: int bonus_notrequired_e_stress_limits_dblmax_prec12(void){return test("%.12e", DBL_MAX);}
3095: int bonus_notrequired_e_stress_limits_dblmax_prec16(void){return test("%.16e", DBL_MAX);}
3096: int bonus_notrequired_e_stress_limits_dblmax_prec18(void){return test("%.18e", DBL_MAX);}
3097: int bonus_notrequired_e_limits_ndblmax_prec0(void){return test("%.0e", -DBL_MAX);}
3098: int bonus_notrequired_e_limits_ndblmax_prec3(void){return test("%.3e", -DBL_MAX);}
3099: int bonus_notrequired_e_limits_ndblmax_precd(void){return test("%e", -DBL_MAX);}
3100: int bonus_notrequired_e_limits_ndblmax_prec8(void){return test("%.8e", -DBL_MAX);}
3101: int bonus_notrequired_e_stress_limits_ndblmax_prec12(void){return test("%.12e", -DBL_MAX);}
3102: int bonus_notrequired_e_stress_limits_ndblmax_prec16(void){return test("%.16e", -DBL_MAX);}
3103: int bonus_notrequired_e_stress_limits_ndblmax_prec18(void){return test("%.18e", -DBL_MAX);}
3104: int bonus_notrequired_e_limits_dblmin_prec0(void){return test("%.0e", DBL_MIN);}
3105: int bonus_notrequired_e_limits_dblmin_prec3(void){return test("%.3e", DBL_MIN);}
3106: int bonus_notrequired_e_limits_dblmin_precd(void){return test("%e", DBL_MIN);}
3107: int bonus_notrequired_e_limits_dblmin_prec8(void){return test("%.8e", DBL_MIN);}
3108: int bonus_notrequired_e_stress_limits_dblmin_prec12(void){return test("%.12e", DBL_MIN);}
3109: int bonus_notrequired_e_stress_limits_dblmin_prec16(void){return test("%.16e", DBL_MIN);}
3110: int bonus_notrequired_e_stress_limits_dblmin_prec18(void){return test("%.18e", DBL_MIN);}
3111: int bonus_notrequired_e_limits_ndblmin_prec0(void){return test("%.0e", -DBL_MIN);}
3112: int bonus_notrequired_e_limits_ndblmin_prec3(void){return test("%.3e", -DBL_MIN);}
3113: int bonus_notrequired_e_limits_ndblmin_precd(void){return test("%e", -DBL_MIN);}
3114: int bonus_notrequired_e_limits_ndblmin_prec8(void){return test("%.8e", -DBL_MIN);}
3115: int bonus_notrequired_e_stress_limits_ndblmin_prec12(void){return test("%.12e", -DBL_MIN);}
3116: int bonus_notrequired_e_stress_limits_ndblmin_prec16(void){return test("%.16e", -DBL_MIN);}
3117: int bonus_notrequired_e_stress_limits_ndblmin_prec18(void){return test("%.18e", -DBL_MIN);}
3118: int bonus_notrequired_e_reserved_values_inf(void){double special; *((unsigned long *)(&special)) = DBL_INF;
3119: int bonus_notrequired_e_reserved_values_ninf(void){double special; *((unsigned long *)(&special)) = DBL_NINF;
3120: int bonus_notrequired_e_reserved_values_nan(void){double special; *((unsigned long *)(&special)) = DBL_NAN;
3121: int bonus_notrequired_e_reserved_values_pzero(void){double special; *((unsigned long *)(&special)) = DBL_PZERO;
3122: int bonus_notrequired_e_reserved_values_nzero(void){double special; *((unsigned long *)(&special)) = DBL_NZERO;
3123: int bonus_notrequired_e_reserved_values_inf_6w(void){double special; *((unsigned long *)(&special)) = DBL_INF;
3124: int bonus_notrequired_e_reserved_values_ninf_6w(void){double special; *((unsigned long *)(&special)) = DBL_NINF;
3125: int bonus_notrequired_e_reserved_values_nan_6w(void){double special; *((unsigned long *)(&special)) = DBL_NAN;
3126: int bonus_notrequired_e_reserved_values_pzero_6w(void){double special; *((unsigned long *)(&special)) = DBL_PZERO;
3127: int bonus_notrequired_e_reserved_values_nzero_6w(void){double special; *((unsigned long *)(&special)) = DBL_NZERO;
3128: int bonus_notrequired_e_reserved_values_inf_6wlj(void){double special; *((unsigned long *)(&special)) = DBL_INF;
3129: int bonus_notrequired_e_reserved_values_ninf_6wlj(void){double special; *((unsigned long *)(&special)) = DBL_NINF;
3130: int bonus_notrequired_e_reserved_values_nan_6wlj(void){double special; *((unsigned long *)(&special)) = DBL_NAN;
3131: int bonus_notrequired_e_reserved_values_pzero_6wlj(void){double special; *((unsigned long *)(&special)) = DBL_PZERO;
3132: int bonus_notrequired_e_reserved_values_nzero_6wlj(void){double special; *((unsigned long *)(&special)) = DBL_NZERO;
3133: int bonus_notrequired_e_reserved_values_inf_6was(void){double special; *((unsigned long *)(&special)) = DBL_INF;
3134: int bonus_notrequired_e_reserved_values_ninf_6was(void){double special; *((unsigned long *)(&special)) = DBL_NINF;
3135: int bonus_notrequired_e_reserved_values_nan_6was(void){double special; *((unsigned long *)(&special)) = DBL_NAN;
3136: int bonus_notrequired_e_reserved_values_pzero_6was(void){double special; *((unsigned long *)(&special)) = DBL_PZERO;
3137: int bonus_notrequired_e_reserved_values_nzero_6was(void){double special; *((unsigned long *)(&special)) = DBL_NZERO;
3138: int bonus_notrequired_e_reserved_values_inf_10w_prec7(void){double special; *((unsigned long *)(&special)) = DBL_INF;
3139: int bonus_notrequired_e_reserved_values_ninf_10w_prec7(void){double special; *((unsigned long *)(&special)) = DBL_NINF;
3140: int bonus_notrequired_e_reserved_values_nan_10w_prec7(void){double special; *((unsigned long *)(&special)) = DBL_NAN;
3141: int bonus_notrequired_e_reserved_values_pzero_10w_prec7(void){double special; *((unsigned long *)(&special)) = DBL_PZERO;
3142: int bonus_notrequired_e_reserved_values_nzero_10w_prec7(void){double special; *((unsigned long *)(&special)) = DBL_NZERO;
3143: int bonus_notrequired_e_reserved_values_inf_sp_prec7(void){double special; *((unsigned long *)(&special)) = DBL_INF;
3144: int bonus_notrequired_e_reserved_values_ninf_sp_prec7(void){double special; *((unsigned long *)(&special)) = DBL_NINF;
3145: int bonus_notrequired_e_reserved_values_nan_sp_prec7(void){double special; *((unsigned long *)(&special)) = DBL_NAN;
3146: int bonus_notrequired_e_reserved_values_pzero_sp_prec7(void){double special; *((unsigned long *)(&special)) = DBL_PZERO;
3147: int bonus_notrequired_e_reserved_values_nzero_sp_prec7(void){double special; *((unsigned long *)(&special)) = DBL_NZERO;
3148: int bonus_notrequired_e_reserved_values_inf_sp(void){double special; *((unsigned long *)(&special)) = DBL_INF;
3149: int bonus_notrequired_e_reserved_values_ninf_sp(void){double special; *((unsigned long *)(&special)) = DBL_NINF;
3150: int bonus_notrequired_e_reserved_values_nan_sp(void){double special; *((unsigned long *)(&special)) = DBL_NAN;
3151: int bonus_notrequired_e_reserved_values_pzero_sp(void){double special; *((unsigned long *)(&special)) = DBL_PZERO;
3152: int bonus_notrequired_e_reserved_values_nzero_sp(void){double special; *((unsigned long *)(&special)) = DBL_NZERO;
3153: int bonus_notrequired_e_reserved_values_inf_6wzp(void){double special; *((unsigned long *)(&special)) = DBL_INF;
3154: int bonus_notrequired_e_reserved_values_ninf_6wzp(void){double special; *((unsigned long *)(&special)) = DBL_NINF;
3155: int bonus_notrequired_e_reserved_values_nan_6wzp(void){double special; *((unsigned long *)(&special)) = DBL_NAN;
3156: int bonus_notrequired_e_reserved_values_pzero_6wzp(void){double special; *((unsigned long *)(&special)) = DBL_PZERO;
3157: int bonus_notrequired_e_reserved_values_nzero_6wzp(void){double special; *((unsigned long *)(&special)) = DBL_NZERO;
3158: int bonus_moul_ld_1_throwswarning(void){return test("%ld", 42);}
3159: int bonus_moul_ld_2_throwswarning(void){return test("Kashim a %ld histoires à raconter", 1001);}
3160: int bonus_moul_ld_3_throwswarning(void){return test("Il fait au moins %ld\n", -8000);}
3161: int bonus_moul_ld_4_throwswarning(void){return test("%ld", -0);}
3162: int bonus_moul_ld_5_throwswarning(void){return test("%ld", 0);}
3163: int bonus_moul_ld_6_throwswarning(void){return test("%ld", INT_MAX);}
3164: int bonus_moul_ld_7_throwswarning(void){return test("%ld", INT_MIN);}
3165: int bonus_moul_ld_8_throwswarning(void){return test("%ld", INT_MIN - 1);}
3166: int bonus_moul_ld_9_throwswarning(void){return test("%ld", INT_MAX + 1);}
3167: int bonus_moul_ld_10_throwswarning(void){return test("%%ld 0000042 == |%ld|\n", 0000042);}
3168: int bonus_moul_ld_11_throwswarning(void){return test("%%ld \t == |%ld|\n", '\t');}
3169: int bonus_moul_ld_12_throwswarning(void){return test("%%ld Lydie == |%ld|\n", 'L'+'y'+'d'+'i'+'e');}
3170: int bonus_sp_moul_1(void){return test("%%      i 42 == |%      i|\n", 42);}
3171: int bonus_sp_moul_2(void){return test("%% i -42 == |% i|\n", -42);}
3172: int bonus_sp_moul_3(void){return test("%% 4i 42 == |% 4i|\n", 42);}
3173: int bonus_sp_moul_prec_2(void){return test("%% 4.5i 42 == |% 4.5i|\n", 42);}
3174: int bonus_as_moul_1(void){return test("%%+i 42 == %+i\n", 42);}
3175: int bonus_as_moul_2(void){return test("%%+d 42 == %+d\n", INT_MAX);}
3176: int bonus_as_moul_3(void){return test("%%+i -42 == %+i\n", -42);}
3177: int bonus_as_moul_4(void){return test("%%+04d 42 == %0+04d\n", 42);}
3178: int bonus_moul_hash_1(void){return test("%%#X 42 ==  %#X\n", 42);}
3179: int bonus_moul_hash_2(void){return test("%%X 42 ==  %X\n", 42);}
3180: int bonus_moul_hash_9(void){return test("%%#X INT_MIN ==  %#X\n", INT_MIN);}
3181: int bonus_moul_hash_10(void){return test("%%X INT_MIN ==  %X\n", INT_MIN);}
3182: int bonus_moul_hash_11(void){return test("%%#X INT_MAX ==  %#X\n", INT_MAX);}
3183: int bonus_moul_hash_12(void){return test("%%X INT_MAX ==  %X\n", INT_MAX);}
3184: int bonus_moul_f_1(void){return test("%f", (double)42);}
3185: int bonus_moul_f_2(void){return test("Kashim a %f histoires à raconter", (double)1001);}
3186: int bonus_moul_f_3(void){return test("Il fait au moins %f\n", (double)-8000);}
3187: int bonus_moul_f_4(void){return test("%f", (double)-0);}
3188: int bonus_moul_f_5(void){return test("%f", (double)0);}
3189: int bonus_moul_f_6(void){return test("%f", (double)INT_MAX);}
3190: int bonus_moul_f_7(void){return test("%f", (double)INT_MIN);}
3191: int bonus_moul_f_7b(void){return test("%f", (double)INT_MIN - 1);}
3192: int bonus_moul_f_8(void){return test("%f", (double)INT_MAX + 1);}
3193: int bonus_moul_f_9(void){return test("%%f 0000042 == |%f|\n", (double)0000042);}
3194: int bonus_moul_f_10(void){return test("%%f \t == |%f|\n", (double)'\t');}
3195: int bonus_moul_f_11(void){return test("%%f Lydie == |%f|\n", (double)'L'+'y'+'d'+'i'+'e');}
3196: int bonus_moul_f_12(void){return test("%%f 42.42 == |%f|\n", 42.42);}
3197: int bonus_moul_g_1(void){return test("%g", (double)42);}
3198: int bonus_moul_g_2(void){return test("Kashim a %g histoires à raconter", (double)1001);}
3199: int bonus_moul_g_3(void){return test("Il fait au moins %g\n", (double)-8000);}
3200: int bonus_moul_g_4(void){return test("%g", (double)-0);}
3201: int bonus_moul_g_5(void){return test("%g", (double)0);}
3202: int bonus_moul_g_6(void){return test("%g", (double)INT_MAX);}
3203: int bonus_moul_g_7(void){return test("%g", (double)INT_MIN);}
3204: int bonus_moul_g_8(void){return test("%g", (double)INT_MIN - 1);}
3205: int bonus_moul_g_9(void){return test("%g", (double)INT_MAX + 1);}
3206: int bonus_moul_g_10(void){return test("%%g 0000042 == |%g|\n", (double)0000042);}
3207: int bonus_moul_g_11(void){return test("%%g \t == |%g|\n", (double)'\t');}
3208: int bonus_moul_g_12(void){return test("%%g Lydie == |%g|\n", (double)'L'+'y'+'d'+'i'+'e');}
3209: int bonus_moul_g_13(void){return test("%%g 42.42 == |%g|\n", 42.42);}
3210: int bonus_moul_e_1(void){return test("%e", (double)42);}
3211: int bonus_moul_e_2(void){return test("Kashim a %e histoires à raconter", (double)1001);}
3212: int bonus_moul_e_3(void){return test("Il fait au moins %e\n", (double)-8000);}
3213: int bonus_moul_e_4(void){return test("%e", (double)-0);}
3214: int bonus_moul_e_5(void){return test("%e", (double)0);}
3215: int bonus_moul_e_6(void){return test("%e", (double)INT_MAX);}
3216: int bonus_moul_e_7(void){return test("%e", (double)INT_MIN);}
3217: int bonus_moul_e_8(void){return test("%e", (double)INT_MIN - 1);}
3218: int bonus_moul_e_9(void){return test("%e", (double)INT_MAX + 1);}
3219: int bonus_moul_e_10(void){return test("%%e 0000042 == |%e|\n", (double)0000042);}
3220: int bonus_moul_e_11(void){return test("%%e \t == |%e|\n", (double)'\t');}
3221: int bonus_moul_e_12(void){return test("%%e Lydie == |%e|\n", (double)'L'+'y'+'d'+'i'+'e');}
3222: int bonus_moul_e_13(void){return test("%%e 42.42 == |%e|\n", 42.42);}
3223: int bonus_mix_hhi_str_lli_str(void){return test("%hhi%s%lli%s", ch_pos_1, str_3, ll_neg_1, str_2);}
3224: int bonus_mix_str_hi_str_li(void){return test("%s%hi%s%li", str_1, sh_neg_1, str_3, l_neg_1);}
3225: int bonus_mix_str_hi_str_li_emptystr(void){return test("%s%hi%s%li", str_empty, sh_neg_1, str_3, l_neg_1);}
3226: int bonus_mix_hhu_str_llu_str(void){return test("%hhu%s%llu%s", uch_pos_1, str_3, ull_pos_1, str_2);}
3227: int bonus_mix_str_hu_str_lu(void){return test("%s%hu%s%lu", str_1, ush_pos_1, str_3, ul_pos_1);}
3228: int bonus_mix_test_0001(void){return test(
3229: int bonus_mix_test_0(void){return test(
3230: int bonus_mix_test_1(void){return test(
3231: int bonus_mix_test_2(void){return test(
3232: int bonus_mix_test_3(void){return test(
3233: int bonus_mix_test_4(void){return test(
3234: int bonus_mix_test_5(void){return test(
3235: int bonus_mix_test_6(void){return test(
3236: int bonus_mix_test_7(void){return test(
3237: int bonus_mix_test_8(void){return test(
3238: int bonus_mix_test_9(void){return test(
3239: int bonus_mix_test_10(void){return test(
3240: int bonus_mix_test_11(void){return test(
3241: int bonus_mix_test_12(void){return test(
3242: int bonus_mix_test_13(void){return test(
3243: int bonus_mix_test_14(void){return test(
3244: int bonus_mix_test_15(void){return test(
3245: int bonus_mix_test_16(void){return test(
3246: int bonus_mix_test_17(void){return test(
3247: int bonus_mix_test_18(void){return test(
3248: int bonus_mix_test_19(void){return test(
3249: int bonus_mix_test_20(void){return test(
3250: int bonus_mix_test_21(void){return test(
3251: int bonus_mix_test_22(void){return test(
3252: int bonus_mix_test_23(void){return test(
3253: int bonus_mix_test_24(void){return test(
3254: int bonus_mix_test_25(void){return test(
3255: int bonus_mix_test_26(void){return test(
3256: int bonus_mix_test_27(void){return test(
3257: int bonus_mix_test_28(void){return test(
3258: int bonus_mix_test_29(void){return test(
3259: int bonus_mix_test_30(void){return test(
3260: int bonus_mix_test_31(void){return test(
3261: int bonus_mix_test_32(void){return test(
3262: int bonus_mix_test_33(void){return test(
3263: int bonus_mix_test_34(void){return test(
3264: int bonus_mix_test_35(void){return test(
3265: int bonus_mix_test_36(void){return test(
3266: int bonus_mix_test_37(void){return test(
3267: int bonus_mix_test_38(void){return test(
3268: int bonus_mix_test_39(void){return test(
3269: int bonus_mix_test_40(void){return test(
3270: int bonus_mix_test_41(void){return test(
3271: int bonus_mix_test_42(void){return test(
3272: int bonus_mix_test_43(void){return test(
3273: int bonus_mix_test_44(void){return test(
3274: int bonus_mix_test_45(void){return test(
3275: int bonus_mix_test_46(void){return test(
3276: int bonus_mix_test_47(void){return test(
3277: int bonus_mix_test_48(void){return test(
3278: int bonus_mix_test_49(void){return test(
3279: int bonus_mix_test_50(void){return test(
3280: int bonus_mix_test_51(void){return test(
3281: int bonus_mix_test_52(void){return test(
3282: int bonus_mix_test_53(void){return test(
3283: int bonus_mix_test_54(void){return test(
3284: int bonus_mix_test_55(void){return test(
3285: int bonus_mix_test_56(void){return test(
3286: int bonus_mix_test_57(void){return test(
3287: int bonus_mix_test_58(void){return test(
3288: int bonus_mix_test_59(void){return test(
3289: int bonus_mix_test_60(void){return test(
3290: int bonus_mix_test_61(void){return test(
3291: int bonus_mix_test_62(void){return test(
3292: int bonus_mix_test_63(void){return test(
3293: int bonus_mix_test_64(void){return test(
3294: int bonus_mix_test_65(void){return test(
3295: int bonus_mix_test_66(void){return test(
3296: int bonus_mix_test_67(void){return test(
3297: int bonus_mix_test_68(void){return test(
3298: int bonus_mix_test_69(void){return test(
3299: int bonus_mix_test_70(void){return test(
3300: int bonus_mix_test_71(void){return test(
3301: int bonus_mix_test_72(void){return test(
3302: int bonus_mix_test_73(void){return test(
3303: int bonus_mix_test_74(void){return test(
3304: int bonus_mix_test_75(void){return test(
3305: int bonus_mix_test_76(void){return test(
3306: int bonus_mix_test_77(void){return test(
3307: int bonus_mix_test_78(void){return test(
3308: int bonus_mix_test_79(void){return test(
3309: int bonus_mix_test_80(void){return test(
3310: int bonus_mix_test_81(void){return test(
3311: int bonus_mix_test_82(void){return test(
3312: int bonus_mix_test_83(void){return test(
3313: int bonus_mix_test_84(void){return test(
3314: int bonus_mix_test_85(void){return test(
3315: int bonus_mix_test_86(void){return test(
3316: int bonus_mix_test_87(void){return test(
3317: int bonus_mix_test_88(void){return test(
3318: int bonus_mix_test_89(void){return test(
3319: int bonus_mix_test_90(void){return test(
3320: int bonus_mix_test_91(void){return test(
3321: int bonus_mix_test_92(void){return test(
3322: int bonus_mix_test_93(void){return test(
3323: int bonus_mix_test_94(void){return test(
3324: int bonus_mix_test_95(void){return test(
3325: int bonus_mix_test_96(void){return test(
3326: int bonus_mix_test_97(void){return test(
3327: int bonus_mix_test_98(void){return test(
3328: int bonus_mix_test_99(void){return test(
3329: int bonus_mix_test_100(void){return test(
3330: int bonus_mix_test_101(void){return test(
3331: int bonus_mix_test_102(void){return test(
3332: int bonus_mix_test_103(void){return test(
3333: int bonus_mix_test_104(void){return test(
3334: int bonus_mix_test_105(void){return test(
3335: int bonus_mix_test_106(void){return test(
3336: int bonus_mix_test_107(void){return test(
3337: int bonus_mix_test_108(void){return test(
3338: int bonus_mix_test_109(void){return test(
3339: int bonus_mix_test_110(void){return test(
3340: int bonus_mix_test_111(void){return test(
3341: int bonus_mix_test_112(void){return test(
3342: int bonus_mix_test_113(void){return test(
3343: int bonus_mix_test_114(void){return test(
3344: int bonus_mix_test_115(void){return test(
3345: int bonus_mix_test_116(void){return test(
3346: int bonus_mix_test_117(void){return test(
3347: int bonus_mix_test_118(void){return test(
3348: int bonus_mix_test_119(void){return test(
3349: int bonus_mix_test_120(void){return test(
3350: int bonus_mix_test_121(void){return test(
3351: int bonus_mix_test_122(void){return test(
3352: int bonus_mix_test_123(void){return test(
3353: int bonus_mix_test_124(void){return test(
3354: int bonus_mix_test_125(void){return test(
3355: int bonus_mix_test_126(void){return test(
3356: int bonus_mix_test_127(void){return test(
3357: int bonus_mix_test_128(void){return test(
3358: int bonus_mix_test_129(void){return test(
3359: int bonus_mix_test_130(void){return test(
3360: int bonus_mix_test_131(void){return test(
3361: int bonus_mix_test_132(void){return test(
3362: int bonus_mix_test_133(void){return test(
3363: int bonus_mix_test_134(void){return test(
3364: int bonus_mix_test_135(void){return test(
3365: int bonus_mix_test_136(void){return test(
3366: int bonus_mix_test_137(void){return test(
3367: int bonus_mix_test_138(void){return test(
3368: int bonus_mix_test_139(void){return test(
3369: int bonus_mix_test_140(void){return test(
3370: int bonus_mix_test_141(void){return test(
3371: int bonus_mix_test_142(void){return test(
3372: int bonus_mix_test_143(void){return test(
3373: int bonus_mix_test_144(void){return test(
3374: int bonus_mix_test_145(void){return test(
3375: int bonus_mix_test_146(void){return test(
3376: int bonus_mix_test_147(void){return test(
3377: int bonus_mix_test_148(void){return test(
3378: int bonus_mix_test_149(void){return test(
3379: int bonus_mix_test_150(void){return test(
3380: int bonus_mix_test_151(void){return test(
3381: int bonus_mix_test_152(void){return test(
3382: int bonus_mix_test_153(void){return test(
3383: int bonus_mix_test_154(void){return test(
3384: int bonus_mix_test_155(void){return test(
3385: int bonus_mix_test_156(void){return test(
3386: int bonus_mix_test_157(void){return test(
3387: int bonus_mix_test_158(void){return test(
3388: int bonus_mix_test_159(void){return test(
3389: int bonus_mix_test_160(void){return test(
3390: int bonus_mix_test_161(void){return test(
3391: int bonus_mix_test_162(void){return test(
3392: int bonus_mix_test_163(void){return test(
3393: int bonus_mix_test_164(void){return test(
3394: int bonus_mix_test_165(void){return test(
3395: int bonus_mix_test_166(void){return test(
3396: int bonus_mix_test_167(void){return test(
3397: int bonus_mix_test_168(void){return test(
3398: int bonus_mix_test_169(void){return test(
3399: int bonus_mix_test_170(void){return test(
3400: int bonus_mix_test_171(void){return test(
3401: int bonus_mix_test_172(void){return test(
3402: int bonus_mix_test_173(void){return test(
3403: int bonus_mix_test_174(void){return test(
3404: int bonus_mix_test_175(void){return test(
3405: int bonus_mix_test_176(void){return test(
3406: int bonus_mix_test_177(void){return test(
3407: int bonus_mix_test_178(void){return test(
3408: int bonus_mix_test_179(void){return test(
3409: int bonus_mix_test_180(void){return test(
3410: int bonus_mix_test_181(void){return test(
3411: int bonus_mix_test_182(void){return test(
3412: int bonus_mix_test_183(void){return test(
3413: int bonus_mix_test_184(void){return test(
3414: int bonus_mix_test_185(void){return test(
3415: int bonus_mix_test_186(void){return test(
3416: int bonus_mix_test_187(void){return test(
3417: int bonus_mix_test_188(void){return test(
3418: int bonus_mix_test_189(void){return test(
3419: int bonus_mix_test_190(void){return test(
3420: int bonus_mix_test_191(void){return test(
3421: int bonus_mix_test_192(void){return test(
3422: int bonus_mix_test_193(void){return test(
3423: int bonus_mix_test_194(void){return test(
3424: int bonus_mix_test_195(void){return test(
3425: int bonus_mix_test_196(void){return test(
3426: int bonus_mix_test_197(void){return test(
3427: int bonus_mix_test_198(void){return test(
3428: int bonus_mix_test_199(void){return test(
3429: int bonus_mix_test_extra_1(void){return test(
3430: int bonus_mix_test_extra_2(void){return test(
3431: int bonus_mix_test_extra_3(void){return test(
3432: int bonus_mix_test_extra_4(void){return test(
3433: int bonus_mix_test_extra_5(void){return test(
3434: int bonus_mix_test_extra_6(void){return test(
3435: int bonus_mix_test_extra_7(void){return test(
3436: int bonus_mix_test_extra_8(void){return test(
3437: int bonus_mix_test_extra_9(void){return test(
3438: int bonus_mix_test_extra_10(void){return test(
3439: int bonus_mix_successive_0(void){return ( test("%c", mx_c) + test("%u", mx_u));}
3440: int bonus_mix_successive_1(void){return ( test("%o", mx_u) + test("%%"));}
3441: int bonus_mix_successive_2(void){return ( test("%s", mx_s) + test("%f", mx_f));}
3442: int bonus_mix_successive_3(void){return ( test("%f", mx_f) + test("%hhi", mx_c));}
3443: int bonus_mix_successive_4(void){return ( test("%x", mx_u) + test("%i", mx_i));}
3444: int bonus_mix_successive_5(void){return ( test("%x", mx_u) + test("%o", mx_u));}
3445: int bonus_mix_successive_6(void){return ( test("%s", mx_s) + test("%c", mx_c));}
3446: int bonus_mix_successive_7(void){return ( test("%p", &mx_i) + test("%hi", mx_hi));}
3447: int bonus_mix_successive_8(void){return ( test("%f", mx_f) + test("%p", &mx_i));}
3448: int bonus_mix_successive_9(void){return ( test("%hi", mx_hi) + test("%u", mx_u));}
3449: int bonus_mix_successive_10(void){return ( test("%u", mx_u) + test("%s", mx_s));}
3450: int bonus_mix_successive_11(void){return ( test("%f", mx_f) + test("%p", &mx_i));}
3451: int bonus_mix_successive_12(void){return ( test("%f", mx_f) + test("%hhi", mx_c));}
3452: int bonus_mix_successive_13(void){return ( test("%X", mx_u) + test("%hhi", mx_c));}
3453: int bonus_mix_successive_14(void){return ( test("%X", mx_u) + test("%f", mx_f));}
3454: int bonus_mix_successive_15(void){return ( test("%hhi", mx_c) + test("%X", mx_u));}
3455: int bonus_mix_successive_16(void){return ( test("%s", mx_s) + test("%x", mx_u));}
3456: int bonus_mix_successive_17(void){return ( test("%lli", mx_lli) + test("%i", mx_i));}
3457: int bonus_mix_successive_18(void){return ( test("%s", mx_s) + test("%o", mx_u));}
3458: int bonus_mix_successive_19(void){return ( test("%hhi", mx_c) + test("%X", mx_u));}
3459: int bonus_mix_successive_20(void){return ( test("%p", &mx_i) + test("%s", mx_s));}
3460: int bonus_mix_successive_21(void){return ( test("%X", mx_u) + test("%x", mx_u));}
3461: int bonus_mix_successive_22(void){return ( test("%p", &mx_i) + test("%lli", mx_lli));}
3462: int bonus_mix_successive_23(void){return ( test("%s", mx_s) + test("%f", mx_f));}
3463: int bonus_mix_successive_24(void){return ( test("%c", mx_c) + test("%hhi", mx_c));}
3464: int bonus_mix_successive_25(void){return ( test("%x", mx_u) + test("%f", mx_f));}
3465: int bonus_mix_successive_26(void){return ( test("%s", mx_s) + test("%li", mx_li));}
3466: int bonus_mix_successive_27(void){return ( test("%f", mx_f) + test("%f", mx_f));}
3467: int bonus_mix_successive_28(void){return ( test("%i", mx_i) + test("%u", mx_u));}
3468: int bonus_mix_successive_29(void){return ( test("%o", mx_u) + test("%li", mx_li));}
3469: int bonus_mix_successive_30(void){return ( test("%s", mx_s) + test("%u", mx_u));}
3470: int bonus_mix_successive_31(void){return ( test("%X", mx_u) + test("%c", mx_c));}
3471: int bonus_mix_successive_32(void){return ( test("%x", mx_u) + test("%u", mx_u));}
3472: int bonus_mix_successive_33(void){return ( test("%f", mx_f) + test("%s", mx_s));}
3473: int bonus_mix_successive_34(void){return ( test("%hhi", mx_c) + test("%u", mx_u));}
3474: int bonus_mix_successive_35(void){return ( test("%p", &mx_i) + test("%f", mx_f));}
3475: int bonus_mix_successive_36(void){return ( test("%li", mx_li) + test("%o", mx_u));}
3476: int bonus_mix_successive_37(void){return ( test("%s", mx_s) + test("%li", mx_li));}
3477: int bonus_mix_successive_38(void){return ( test("%o", mx_u) + test("%lli", mx_lli));}
3478: int bonus_mix_successive_39(void){return ( test("%i", mx_i) + test("%c", mx_c));}
3479: int bonus_mix_successive_40(void){return ( test("%c", mx_c) + test("%x", mx_u));}
3480: int bonus_mix_successive_41(void){return ( test("%hhi", mx_c) + test("%x", mx_u));}
3481: int bonus_mix_successive_42(void){return ( test("%x", mx_u) + test("%s", mx_s));}
3482: int bonus_mix_successive_43(void){return ( test("%u", mx_u) + test("%x", mx_u));}
3483: int bonus_mix_successive_44(void){return ( test("%i", mx_i) + test("%f", mx_f));}
3484: int bonus_mix_successive_45(void){return ( test("%s", mx_s) + test("%c", mx_c));}
3485: int bonus_mix_successive_46(void){return ( test("%i", mx_i) + test("%s", mx_s));}
3486: int bonus_mix_successive_47(void){return ( test("%u", mx_u) + test("%hhi", mx_c));}
3487: int bonus_mix_successive_48(void){return ( test("%hi", mx_hi) + test("%o", mx_u));}
3488: int bonus_mix_successive_49(void){return ( test("%i", mx_i) + test("%hi", mx_hi));}
3489: int bonus_mix_successive_50(void){return ( test("%o", mx_u) + test("%f", mx_f));}
3490: int bonus_mix_successive_51(void){return ( test("%li", mx_li) + test("%hhi", mx_c));}
3491: int bonus_mix_successive_52(void){return ( test("%hi", mx_hi) + test("%hhi", mx_c));}
3492: int bonus_mix_successive_53(void){return ( test("%f", mx_f) + test("%x", mx_u));}
3493: int bonus_mix_successive_54(void){return ( test("%c", mx_c) + test("%hi", mx_hi));}
3494: int bonus_mix_successive_55(void){return ( test("%hi", mx_hi) + test("%s", mx_s));}
3495: int bonus_mix_successive_56(void){return ( test("%i", mx_i) + test("%lli", mx_lli));}
3496: int bonus_mix_successive_57(void){return ( test("%c", mx_c) + test("%f", mx_f));}
3497: int bonus_mix_successive_58(void){return ( test("%f", mx_f) + test("%x", mx_u));}
3498: int bonus_mix_successive_59(void){return ( test("%s", mx_s) + test("%li", mx_li));}
3499: int bonus_mix_successive_60(void){return ( test("%hhi", mx_c) + test("%s", mx_s));}
3500: int bonus_mix_successive_61(void){return ( test("%p", &mx_i) + test("%c", mx_c));}
3501: int bonus_mix_successive_62(void){return ( test("%lli", mx_lli) + test("%u", mx_u));}
3502: int bonus_mix_successive_63(void){return ( test("%x", mx_u) + test("%o", mx_u));}
3503: int bonus_mix_successive_64(void){return ( test("%s", mx_s) + test("%c", mx_c));}
3504: int bonus_mix_successive_65(void){return ( test("%i", mx_i) + test("%lli", mx_lli));}
3505: int bonus_mix_successive_66(void){return ( test("%li", mx_li) + test("%f", mx_f));}
3506: int bonus_mix_successive_67(void){return ( test("%hi", mx_hi) + test("%x", mx_u));}
3507: int bonus_mix_successive_68(void){return ( test("%i", mx_i) + test("%hi", mx_hi));}
3508: int bonus_mix_successive_69(void){return ( test("%f", mx_f) + test("%li", mx_li));}
3509: int bonus_mix_successive_70(void){return ( test("%o", mx_u) + test("%li", mx_li));}
3510: int argnum_notinsubject_simple_swap(void){return test("%2$s, %1$s!", "world", "hello");} //CAN-SEGFAULT
3511: int argnum_notinsubject_swap_around_pct(void){return test("%2$s %% %1$s!", "world", "hello");} //CAN-SEGFAULT
3512: int argnum_notinsubject_swap_strfloat(void){return test("%2$f, %1$s!", "world", 5.75);} //CAN-SEGFAULT
3513: int argnum_notinsubject_swap_floatstr(void){return test("%2$s, %1$f!", 5.75, "abc");} //CAN-SEGFAULT
3514: int argnum_notinsubject_swap_ldblstr(void){return test("%2$s, %1$Lf!", 5.75L, "abc");} //CAN-SEGFAULT
3515: int argnum_notinsubject_swap_strldbl(void){return test("%2$Lf, %1$s!", "world", 5.75L);} //CAN-SEGFAULT
3516: int argnum_notinsubject_swap_ldblchar(void){return test("%2$c, %1$Lf!", 5.75L, 'c');} //CAN-SEGFAULT
3517: int argnum_notinsubject_swap_charldbl(void){return test("%2$Lf, %1$c!", 'c', 5.75L);} //CAN-SEGFAULT
3518: int argnum_notinsubject_swap_floatstr_around_pct(void){return test("%2$s %% %1$f!", 5.75, "abc");} //CAN-SEGFAULT
3519: int argnum_notinsubject_swap_strfloat_around_pct(void){return test("%2$f %% %1$s!", "world", 5.75);} //CAN-SEGFAULT
3520: int argnum_notinsubject_loopback_throwswarning(void){return test("%i %i %1$i %i %i", 1, 2, 3);} //CAN-SEGFAULT
3521: int argnum_notinsubject_onlyone(void){return test("%1$s %1$s %1$s %1$s %1$s %1$s %1$s %1$s.", "buffalo");} //CAN-SEGFAULT
3522: int argnum_notinsubject_start2thentofloatthen1_throwswarning(void){return test("%2$s %f %1$i", 5, "abc", 5.75f);} //CAN-SEGFAULT
3523: int argnum_notinsubject_ultimate_1_throwswarning(void){return test("%2$s %f %1$i %s %f %2$s %1$i %s %1$i %3$f %1$i %s %f %2$s", 5, "abc", 5.75);} //CAN-SEGFAULT
3524: int argnum_notinsubject_ultimate_2_throwswarning(void){return test("%4$.5s %.4i %lli %1$Lf %c %7$20.6s %5$i %2$c %1$.2Lf %c %i", //CAN-SEGFAULT
3525: int argnum_notinsubject_ultimate_2_with_pct_throwswarning(void){return test("%% %4$.5s %.4i %lli %% %1$Lf %c %7$20.6s %5$i %% %2$c %1$.2Lf %c %i", //CAN-SEGFAULT
3526: int notinsubject_f_L_basic_1(void){return test("this %Lf float", 1.5l);}
3527: int notinsubject_f_L_basic_fltonly(void){return test("%Lf", 7.5l);}
3528: int notinsubject_f_L_basic_whole(void){return test("%Lf", 1.0l);}
3529: int notinsubject_f_L_basic_negative(void){return test("%Lf", -3.85l);}
3530: int notinsubject_f_L_basic_positive_3_3(void){return test("%Lf", 573.924l);}
3531: int notinsubject_f_L_basic_negative_3_3(void){return test("%Lf", -958.125l);}
3532: int notinsubject_f_L_basic_positive_smallfpart(void){return test("%Lf", 23.00041l);}
3533: int notinsubject_f_L_basic_positive_allsmall(void){return test("%Lf", 0.000039l);}
3534: int notinsubject_f_L_basic_negative_smallfpart(void){return test("%Lf", -7.00036l);}
3535: int notinsubject_f_L_basic_negative_allsmall(void){return test("%Lf", -0.00032l);}
3536: int notinsubject_f_L_basic_limits_allsmall_pos(void){return test("%Lf", 0.000001l);}
3537: int notinsubject_f_L_basic_limits_allsmall_neg(void){return test("%Lf", -0.000001l);}
3538: int notinsubject_f_L_basic_limits_smallfpart_pos(void){return test("%Lf", 9873.000001l);}
3539: int notinsubject_f_L_basic_limits_smallfpart_neg(void){return test("%Lf", -875.000001l);}
3540: int notinsubject_f_L_basic_limits_allbig_pos(void){return test("%Lf", 999.999999l);}
3541: int notinsubject_f_L_basic_limits_allbig_neg(void){return test("%Lf", -99.999999l);}
3542: int notinsubject_f_L_basic_limits_bigfpart_pos(void){return test("%Lf", 0.999999l);}
3543: int notinsubject_f_L_basic_limits_bigfpart_neg(void){return test("%Lf", -0.999999l);}
3544: int notinsubject_f_L_rndd_pos(void){return test("%Lf", 23.375094499l);}
3545: int notinsubject_f_L_rndd_neg(void){return test("%Lf", -985.765426499l);}
3546: int notinsubject_f_L_rndu_pos(void){return test("%Lf", 0.08942555l);}
3547: int notinsubject_f_L_rndu_neg(void){return test("%Lf", -56.2012685l);}
3548: int notinsubject_f_L_rndu_multidigit_pos(void){return test("%Lf", 43.4399999l);}
3549: int notinsubject_f_L_rndu_multidigit_neg(void){return test("%Lf", -5.0299999l);}
3550: int notinsubject_f_L_rndd_multidigit_pos(void){return test("%Lf", 43.43999949l);}
3551: int notinsubject_f_L_rndd_multidigit_neg(void){return test("%Lf", -5.02999949l);}
3552: int notinsubject_f_L_rndd_wholnobump_pos(void){return test("%Lf", 1.99999949l);}
3553: int notinsubject_f_L_rndd_wholnobump_neg(void){return test("%Lf", -0.99999949l);}
3554: int notinsubject_f_L_rndu_bumpwhole_pos(void){return test("%Lf", 3.9999999l);}
3555: int notinsubject_f_L_rndu_bumpwhole_neg(void){return test("%Lf", -5.9999999l);}
3556: int notinsubject_f_L_prec7_1(void){return test("this %.7Lf float", 1.5l);}
3557: int notinsubject_f_L_prec7_fltonly(void){return test("%.7Lf", 7.5l);}
3558: int notinsubject_f_L_prec7_whole(void){return test("%.7Lf", 1.0l);}
3559: int notinsubject_f_L_prec7_negative(void){return test("%.7Lf", -3.85l);}
3560: int notinsubject_f_L_prec7_positive_3_3(void){return test("%.7Lf", 573.924l);}
3561: int notinsubject_f_L_prec7_negative_3_3(void){return test("%.7Lf", -958.125l);}
3562: int notinsubject_f_L_prec7_positive_smallfpart(void){return test("%.7Lf", 23.00041l);}
3563: int notinsubject_f_L_prec7_positive_allsmall(void){return test("%.7Lf", 0.0000039l);}
3564: int notinsubject_f_L_prec7_negative_smallfpart(void){return test("%.7Lf", -7.00036l);}
3565: int notinsubject_f_L_prec7_negative_allsmall(void){return test("%.7Lf", -0.000032l);}
3566: int notinsubject_f_L_prec7_limits_allsmall_pos(void){return test("%.7Lf", 0.0000001l);}
3567: int notinsubject_f_L_prec7_limits_allsmall_neg(void){return test("%.7Lf", -0.0000001l);}
3568: int notinsubject_f_L_prec7_limits_smallfpart_pos(void){return test("%.7Lf", 9873.000001l);}
3569: int notinsubject_f_L_prec7_limits_smallfpart_neg(void){return test("%.7Lf", -875.000001l);}
3570: int notinsubject_f_L_prec7_limits_allbig_pos(void){return test("%.7Lf", 999.9999999l);}
3571: int notinsubject_f_L_prec7_limits_allbig_neg(void){return test("%.7Lf", -99.9999999l);}
3572: int notinsubject_f_L_prec7_limits_bigfpart_pos(void){return test("%.7Lf", 0.999999l);}
3573: int notinsubject_f_L_prec7_limits_bigfpart_neg(void){return test("%.7Lf", -0.999999l);}
3574: int notinsubject_f_L_rnd_prec7_rndd_pos(void){return test("%.7Lf", 23.375094499l);}
3575: int notinsubject_f_L_rnd_prec7_rndd_neg(void){return test("%.7Lf", -985.765426499l);}
3576: int notinsubject_f_L_rnd_prec7_rndu_pos(void){return test("%.7Lf", 0.0894255l);}
3577: int notinsubject_f_L_rnd_prec7_rndu_neg(void){return test("%.7Lf", -56.2012685l);}
3578: int notinsubject_f_L_rnd_prec7_rndu_multidigit_pos(void){return test("%.7Lf", 43.4399999l);}
3579: int notinsubject_f_L_rnd_prec7_rndu_multidigit_neg(void){return test("%.7Lf", -5.0299999l);}
3580: int notinsubject_f_L_rnd_prec7_rndd_multidigit_pos(void){return test("%.7Lf", 43.43999949l);}
3581: int notinsubject_f_L_rnd_prec7_rndd_multidigit_neg(void){return test("%.7Lf", -5.02999949l);}
3582: int notinsubject_f_L_rnd_prec7_rndd_wholnobump_pos(void){return test("%.7Lf", 1.99999949l);}
3583: int notinsubject_f_L_rnd_prec7_rndd_wholnobump_neg(void){return test("%.7Lf", -0.99999949l);}
3584: int notinsubject_f_L_rnd_prec7_rndu_bumpwhole_pos(void){return test("%.7Lf", 3.9999999l);}
3585: int notinsubject_f_L_prec8_1(void){return test("this %.8Lf float", 1.5l);}
3586: int notinsubject_f_L_prec8_fltonly(void){return test("%.8Lf", 7.5l);}
3587: int notinsubject_f_L_prec8_whole(void){return test("%.8Lf", 1.0l);}
3588: int notinsubject_f_L_prec8_negative(void){return test("%.8Lf", -3.85l);}
3589: int notinsubject_f_L_prec8_positive_3_3(void){return test("%.8Lf", 573.924l);}
3590: int notinsubject_f_L_prec8_negative_3_3(void){return test("%.8Lf", -958.125l);}
3591: int notinsubject_f_L_prec8_positive_smallfpart(void){return test("%.8Lf", 23.00041l);}
3592: int notinsubject_f_L_prec8_positive_allsmall(void){return test("%.8Lf", 0.00000039l);}
3593: int notinsubject_f_L_prec8_negative_smallfpart(void){return test("%.8Lf", -7.00036l);}
3594: int notinsubject_f_L_prec8_negative_allsmall(void){return test("%.8Lf", -0.0000032l);}
3595: int notinsubject_f_L_prec8_limits_allsmall_pos(void){return test("%.8Lf", 0.00000001l);}
3596: int notinsubject_f_L_prec8_limits_allsmall_neg(void){return test("%.8Lf", -0.00000001l);}
3597: int notinsubject_f_L_prec8_limits_smallfpart_pos(void){return test("%.8Lf", 9873.000001l);}
3598: int notinsubject_f_L_prec8_limits_smallfpart_neg(void){return test("%.8Lf", -875.000001l);}
3599: int notinsubject_f_L_prec8_limits_allbig_pos(void){return test("%.8Lf", 999.9999999l);}
3600: int notinsubject_f_L_prec8_limits_allbig_neg(void){return test("%.8Lf", -99.99999999l);}
3601: int notinsubject_f_L_prec8_limits_bigfpart_pos(void){return test("%.8Lf", 0.999999l);}
3602: int notinsubject_f_L_prec8_limits_bigfpart_neg(void){return test("%.8Lf", -0.999999l);}
3603: int notinsubject_f_L_rnd_prec8_rndd_pos(void){return test("%.8Lf", 23.375094499l);}
3604: int notinsubject_f_L_rnd_prec8_rndd_neg(void){return test("%.8Lf", -985.765426499l);}
3605: int notinsubject_f_L_rnd_prec8_rndu_pos(void){return test("%.8Lf", 0.0894255l);}
3606: int notinsubject_f_L_rnd_prec8_rndu_neg(void){return test("%.8Lf", -56.2012685l);}
3607: int notinsubject_f_L_rnd_prec8_rndu_multidigit_pos(void){return test("%.8Lf", 43.4399999l);}
3608: int notinsubject_f_L_rnd_prec8_rndu_multidigit_neg(void){return test("%.8Lf", -5.0299999l);}
3609: int notinsubject_f_L_rnd_prec8_rndd_multidigit_pos(void){return test("%.8Lf", 43.43999949l);}
3610: int notinsubject_f_L_rnd_prec8_rndd_multidigit_neg(void){return test("%.8Lf", -5.02999949l);}
3611: int notinsubject_f_L_rnd_prec8_rndd_wholnobump_pos(void){return test("%.8Lf", 1.99999949l);}
3612: int notinsubject_f_L_rnd_prec8_rndd_wholnobump_neg(void){return test("%.8Lf", -0.99999949l);}
3613: int notinsubject_f_L_rnd_prec8_rndu_bumpwhole_pos(void){return test("%.8Lf", 3.9999999l);}
3614: int notinsubject_f_L_prec9_1(void){return test("this %.9Lf float", 1.5l);}
3615: int notinsubject_f_L_prec9_fltonly(void){return test("%.9Lf", 7.5l);}
3616: int notinsubject_f_L_prec9_whole(void){return test("%.9Lf", 1.0l);}
3617: int notinsubject_f_L_prec9_negative(void){return test("%.9Lf", -3.85l);}
3618: int notinsubject_f_L_prec9_positive_3_3(void){return test("%.9Lf", 573.924l);}
3619: int notinsubject_f_L_prec9_negative_3_3(void){return test("%.9Lf", -958.125l);}
3620: int notinsubject_f_L_prec9_positive_smallfpart(void){return test("%.9Lf", 23.00041l);}
3621: int notinsubject_f_L_prec9_positive_allsmall(void){return test("%.9Lf", 0.00000039l);}
3622: int notinsubject_f_L_prec9_negative_smallfpart(void){return test("%.9Lf", -7.00036l);}
3623: int notinsubject_f_L_prec9_negative_allsmall(void){return test("%.9Lf", -0.0000032l);}
3624: int notinsubject_f_L_prec9_limits_allsmall_pos(void){return test("%.9Lf", 0.00000001l);}
3625: int notinsubject_f_L_prec9_limits_allsmall_neg(void){return test("%.9Lf", -0.00000001l);}
3626: int notinsubject_f_L_prec9_limits_smallfpart_pos(void){return test("%.9Lf", 9873.000001l);}
3627: int notinsubject_f_L_prec9_limits_smallfpart_neg(void){return test("%.9Lf", -875.000001l);}
3628: int notinsubject_f_L_prec9_limits_allbig_pos(void){return test("%.9Lf", 999.99999999l);}
3629: int notinsubject_f_L_prec9_limits_allbig_neg(void){return test("%.9Lf", -99.99999999l);}
3630: int notinsubject_f_L_prec9_limits_bigfpart_pos(void){return test("%.9Lf", 0.999999l);}
3631: int notinsubject_f_L_prec9_limits_bigfpart_neg(void){return test("%.9Lf", -0.999999l);}
3632: int notinsubject_f_L_rnd_prec9_rndd_pos(void){return test("%.9Lf", 23.375094499l);}
3633: int notinsubject_f_L_rnd_prec9_rndd_neg(void){return test("%.9Lf", -985.765426499l);}
3634: int notinsubject_f_L_rnd_prec9_rndu_pos(void){return test("%.9Lf", 0.0894255l);}
3635: int notinsubject_f_L_rnd_prec9_rndu_neg(void){return test("%.9Lf", -56.2012685l);}
3636: int notinsubject_f_L_rnd_prec9_rndu_multidigit_pos(void){return test("%.9Lf", 43.4399999l);}
3637: int notinsubject_f_L_rnd_prec9_rndu_multidigit_neg(void){return test("%.9Lf", -5.0299999l);}
3638: int notinsubject_f_L_rnd_prec9_rndd_multidigit_pos(void){return test("%.9Lf", 43.43999949l);}
3639: int notinsubject_f_L_rnd_prec9_rndd_multidigit_neg(void){return test("%.9Lf", -5.02999949l);}
3640: int notinsubject_f_L_rnd_prec9_rndd_wholnobump_pos(void){return test("%.9Lf", 1.99999949l);}
3641: int notinsubject_f_L_rnd_prec9_rndd_wholnobump_neg(void){return test("%.9Lf", -0.99999949l);}
3642: int notinsubject_f_L_rnd_prec9_rndu_bumpwhole_pos(void){return test("%.9Lf", 3.9999999l);}
3643: int notinsubject_f_L_stress_prec10_1(void){return test("this %.10Lf float", 1.5l);}
3644: int notinsubject_f_L_stress_prec10_fltonly(void){return test("%.10Lf", 7.5l);}
3645: int notinsubject_f_L_stress_prec10_whole(void){return test("%.10Lf", 1.0l);}
3646: int notinsubject_f_L_stress_prec10_negative(void){return test("%.10Lf", -3.85l);}
3647: int notinsubject_f_L_stress_prec10_positive_3_10(void){return test("%.10Lf", 573.924l);}
3648: int notinsubject_f_L_stress_prec10_negative_3_10(void){return test("%.10Lf", -958.125l);}
3649: int notinsubject_f_L_stress_prec10_pos(void){return test("%.10Lf", 23.8341375094l);}
3650: int notinsubject_f_L_stress_prec10_neg(void){return test("%.10Lf", -985.2459765426l);}
3651: int notinsubject_f_L_stress_prec10_rndd_pos(void){return test("%.10Lf", 23.8341375094499l);}
3652: int notinsubject_f_L_stress_prec10_rndd_neg(void){return test("%.10Lf", -985.2459765426499l);}
3653: int notinsubject_f_L_stress_prec10_rndu_pos(void){return test("%.10Lf", 0.87650894255l);}
3654: int notinsubject_f_L_stress_prec10_rndu_neg(void){return test("%.10Lf", -56.47852012685l);}
3655: int notinsubject_f_L_stress_prec10_positive_smallfpart(void){return test("%.10Lf", 23.000000041l);}
3656: int notinsubject_f_L_stress_prec10_positive_allsmall(void){return test("%.10Lf", 0.0000000039l);}
3657: int notinsubject_f_L_stress_prec10_negative_smallfpart(void){return test("%.10Lf", -7.000000036l);}
3658: int notinsubject_f_L_stress_prec10_negative_allsmall(void){return test("%.10Lf", -0.000000032l);}
3659: int notinsubject_f_L_stress_prec10_limits_allsmall_pos(void){return test("%.10Lf", 0.0000000001l);}
3660: int notinsubject_f_L_stress_prec10_limits_allsmall_neg(void){return test("%.10Lf", -0.0000000001l);}
3661: int notinsubject_f_L_stress_prec10_limits_smallfpart_pos(void){return test("%.10Lf", 9873.0000000001l);}
3662: int notinsubject_f_L_stress_prec10_limits_smallfpart_neg(void){return test("%.10Lf", -875.0000000001l);}
3663: int notinsubject_f_L_stress_prec10_limits_allbig_pos(void){return test("%.10Lf", 999.9999999999l);}
3664: int notinsubject_f_L_stress_prec10_limits_allbig_neg(void){return test("%.10Lf", -99.9999999999l);}
3665: int notinsubject_f_L_stress_prec10_limits_bigfpart_pos(void){return test("%.10Lf", 0.9999999999l);}
3666: int notinsubject_f_L_stress_prec10_limits_bigfpart_neg(void){return test("%.10Lf", -0.9999999999l);}
3667: int notinsubject_f_L_stress_prec12_rndu(void){return test("%.12f",        1.025978542436587568678);}
3668: int notinsubject_f_L_stress_prec12_rndd(void){return test("%.12f",        1.025978548534310421434);}
3669: int notinsubject_f_L_stress_prec12_limits_tiny(void){return test("%.12f", 0.000000000001000000000);}
3670: int notinsubject_f_L_stress_prec12_limits_big(void){return test("%.12f",  0.999999999999000000000);}
3671: int notinsubject_f_L_stress_prec14_rndu(void){return test("%.14f",        1.025978542436587568678);}
3672: int notinsubject_f_L_stress_prec14_rndd(void){return test("%.14f",        1.025978548534310421434);}
3673: int notinsubject_f_L_stress_prec14_limits_tiny(void){return test("%.14f", 0.000000000000010000000);}
3674: int notinsubject_f_L_stress_prec14_limits_big(void){return test("%.14f",  0.999999999999990000000);}
3675: int notinsubject_f_L_stress_prec16_rndu(void){return test("%.16f",        1.025978542436587568678);}
3676: int notinsubject_f_L_stress_prec16_rndd(void){return test("%.16f",        1.025978548534310421634);}
3677: int notinsubject_f_L_stress_prec16_limits_tiny(void){return test("%.16f", 0.000000000000000100000);}
3678: int notinsubject_f_L_stress_prec16_limits_big(void){return test("%.16f",  0.999999999999999900000);}
3679: int notinsubject_f_L_stress_prec17_rndu(void){return test("%.17f",        1.025978542436587568678);}
3680: int notinsubject_f_L_stress_prec17_rndd(void){return test("%.17f",        1.025978548534310421734);}
3681: int notinsubject_f_L_stress_prec17_limits_tiny(void){return test("%.17f", 0.000000000000000010000);}
3682: int notinsubject_f_L_stress_prec17_limits_big(void){return test("%.17f",  0.999999999999999990000);}
3683: int notinsubject_f_L_stress_prec18_rndu(void){return test("%.18f",        1.025978542436587568678);}
3684: int notinsubject_f_L_stress_prec18_rndd(void){return test("%.18f",        1.025978548534310421834);}
3685: int notinsubject_f_L_stress_prec18_limits_tiny(void){return test("%.18f", 0.000000000000000001000);}
3686: int notinsubject_f_L_stress_prec18_limits_big(void){return test("%.18f",  0.999999999999999999000);}
3687: int notinsubject_f_L_stress_prec19_rndu(void){return test("%.19f",        1.025978542436587568678);}
3688: int notinsubject_f_L_stress_prec19_rndd(void){return test("%.19f",        1.025978548534310421934);}
3689: int notinsubject_f_L_stress_prec19_limits_tiny(void){return test("%.19f", 0.000000000000000000100);}
3690: int notinsubject_f_L_stress_prec19_limits_big(void){return test("%.19f",  0.999999999999999999900);}
3691: int notinsubject_f_L_stress_prec20_rndu(void){return test("%.20f",        1.025978542436587568678);}
3692: int notinsubject_f_L_stress_prec20_rndd(void){return test("%.20f",        1.025978548534310422034);}
3693: int notinsubject_f_L_stress_prec20_limits_tiny(void){return test("%.20f", 0.000000000000000000010);}
3694: int notinsubject_f_L_stress_prec20_limits_big(void){return test("%.20f",  0.999999999999999999990);}
3695: int notinsubject_f_L_reserved_values_inf(void){long double special; *((unsigned long *)(&special)) = FTPF_LDBL_INF; FTPF_LDBL_BYTE5(special) = 0x7FFF;
3696: int notinsubject_f_L_reserved_values_ninf(void){long double special; *((unsigned long *)(&special)) = FTPF_LDBL_INF; FTPF_LDBL_BYTE5(special) = 0xFFFF;
3697: int notinsubject_f_L_reserved_values_nan(void){long double special; *((unsigned long *)(&special)) = 8ull;FTPF_LDBL_BYTE5(special) = 0xFFFF;
3698: int notinsubject_f_L_reserved_values_pzero(void){long double special; *((unsigned long *)(&special)) = 0ull;FTPF_LDBL_BYTE5(special) = 0;
3699: int notinsubject_f_L_reserved_values_nzero(void){long double special; *((unsigned long *)(&special)) = 0ull;FTPF_LDBL_BYTE5(special) = 0;
3700: int notinsubject_f_L_reserved_values_inf_6w(void){long double special; *((unsigned long *)(&special)) = FTPF_LDBL_INF; FTPF_LDBL_BYTE5(special) = 0x7FFF;
3701: int notinsubject_f_L_reserved_values_ninf_6w(void){long double special; *((unsigned long *)(&special)) = FTPF_LDBL_INF;FTPF_LDBL_BYTE5(special) = 0xFFFF;
3702: int notinsubject_f_L_reserved_values_nan_6w(void){long double special; *((unsigned long *)(&special)) = 8ull;FTPF_LDBL_BYTE5(special) = 0xFFFF;
3703: int notinsubject_f_L_reserved_values_pzero_6w(void){long double special; *((unsigned long *)(&special)) = 0ull;FTPF_LDBL_BYTE5(special) = 0;
3704: int notinsubject_f_L_reserved_values_nzero_6w(void){long double special; *((unsigned long *)(&special)) = 0ull;FTPF_LDBL_BYTE5(special) = 0;
3705: int notinsubject_f_L_reserved_values_inf_6wlj(void){long double special; *((unsigned long *)(&special)) = FTPF_LDBL_INF; FTPF_LDBL_BYTE5(special) = 0x7FFF;
3706: int notinsubject_f_L_reserved_values_ninf_6wlj(void){long double special; *((unsigned long *)(&special)) = FTPF_LDBL_INF;FTPF_LDBL_BYTE5(special) = 0xFFFF;
3707: int notinsubject_f_L_reserved_values_nan_6wlj(void){long double special; *((unsigned long *)(&special)) = 8ull;FTPF_LDBL_BYTE5(special) = 0xFFFF;
3708: int notinsubject_f_L_reserved_values_pzero_6wlj(void){long double special; *((unsigned long *)(&special)) = 0ull;FTPF_LDBL_BYTE5(special) = 0;
3709: int notinsubject_f_L_reserved_values_nzero_6wlj(void){long double special; *((unsigned long *)(&special)) = 0ull;FTPF_LDBL_BYTE5(special) = 0;
3710: int notinsubject_f_L_reserved_values_inf_6was(void){long double special; *((unsigned long *)(&special)) = FTPF_LDBL_INF; FTPF_LDBL_BYTE5(special) = 0x7FFF;
3711: int notinsubject_f_L_reserved_values_ninf_6was(void){long double special; *((unsigned long *)(&special)) = FTPF_LDBL_INF;FTPF_LDBL_BYTE5(special) = 0xFFFF;
3712: int notinsubject_f_L_reserved_values_nan_6was(void){long double special; *((unsigned long *)(&special)) = 8ull;FTPF_LDBL_BYTE5(special) = 0xFFFF;
3713: int notinsubject_f_L_reserved_values_pzero_6was(void){long double special; *((unsigned long *)(&special)) = 0ull;FTPF_LDBL_BYTE5(special) = 0;
3714: int notinsubject_f_L_reserved_values_nzero_6was(void){long double special; *((unsigned long *)(&special)) = 0ull;FTPF_LDBL_BYTE5(special) = 0;
3715: int notinsubject_f_L_reserved_values_inf_10w_prec7(void){long double special; *((unsigned long *)(&special)) = FTPF_LDBL_INF;  FTPF_LDBL_BYTE5(special) = 0x7FFF;
3716: int notinsubject_f_L_reserved_values_ninf_10w_prec7(void){long double special; *((unsigned long *)(&special)) = FTPF_LDBL_INF;FTPF_LDBL_BYTE5(special) = 0xFFFF;
3717: int notinsubject_f_L_reserved_values_nan_10w_prec7(void){long double special; *((unsigned long *)(&special)) = 8ull;FTPF_LDBL_BYTE5(special) = 0xFFFF;
3718: int notinsubject_f_L_reserved_values_pzero_10w_prec7(void){long double special; *((unsigned long *)(&special)) = 0ull;FTPF_LDBL_BYTE5(special) = 0;
3719: int notinsubject_f_L_reserved_values_nzero_10w_prec7(void){long double special; *((unsigned long *)(&special)) = 0ull;FTPF_LDBL_BYTE5(special) = 0;
3720: int notinsubject_f_L_reserved_values_inf_sp_prec7(void){long double special; *((unsigned long *)(&special)) = FTPF_LDBL_INF;  FTPF_LDBL_BYTE5(special) = 0x7FFF;
3721: int notinsubject_f_L_reserved_values_ninf_sp_prec7(void){long double special; *((unsigned long *)(&special)) = FTPF_LDBL_INF;FTPF_LDBL_BYTE5(special) = 0xFFFF;
3722: int notinsubject_f_L_reserved_values_nan_sp_prec7(void){long double special; *((unsigned long *)(&special)) = 8ull;FTPF_LDBL_BYTE5(special) = 0xFFFF;
3723: int notinsubject_f_L_reserved_values_pzero_sp_prec7(void){long double special; *((unsigned long *)(&special)) = 0ull;FTPF_LDBL_BYTE5(special) = 0;
3724: int notinsubject_f_L_reserved_values_nzero_sp_prec7(void){long double special; *((unsigned long *)(&special)) = 0ull;FTPF_LDBL_BYTE5(special) = 0;
3725: int notinsubject_f_L_reserved_values_inf_sp(void){long double special; *((unsigned long *)(&special)) = FTPF_LDBL_INF; FTPF_LDBL_BYTE5(special) = 0x7FFF;
3726: int notinsubject_f_L_reserved_values_ninf_sp(void){long double special; *((unsigned long *)(&special)) = FTPF_LDBL_INF;FTPF_LDBL_BYTE5(special) = 0xFFFF;
3727: int notinsubject_f_L_reserved_values_nan_sp(void){long double special; *((unsigned long *)(&special)) = 8ull;FTPF_LDBL_BYTE5(special) = 0xFFFF;
3728: int notinsubject_f_L_reserved_values_pzero_sp(void){long double special; *((unsigned long *)(&special)) = 0ull;FTPF_LDBL_BYTE5(special) = 0;
3729: int notinsubject_f_L_reserved_values_nzero_sp(void){long double special; *((unsigned long *)(&special)) = 0ull;FTPF_LDBL_BYTE5(special) = 0;
3730: int notinsubject_f_L_reserved_values_inf_6wzp(void){long double special; *((unsigned long *)(&special)) = FTPF_LDBL_INF; FTPF_LDBL_BYTE5(special) = 0x7FFF;
3731: int notinsubject_f_L_reserved_values_ninf_6wzp(void){long double special; *((unsigned long *)(&special)) = FTPF_LDBL_INF;FTPF_LDBL_BYTE5(special) = 0xFFFF;
3732: int notinsubject_f_L_reserved_values_nan_6wzp(void){long double special; *((unsigned long *)(&special)) = 8ull;FTPF_LDBL_BYTE5(special) = 0xFFFF;
3733: int notinsubject_f_L_reserved_values_pzero_6wzp(void){long double special; *((unsigned long *)(&special)) = 0ull;FTPF_LDBL_BYTE5(special) = 0;
3734: int notinsubject_f_L_reserved_values_nzero_6wzp(void){long double special; *((unsigned long *)(&special)) = 0ull;FTPF_LDBL_BYTE5(special) = 0;
3735: int notinsubject_f_L_overprec_might_be_undefbehav_100(void){return test("%.100Lf", 0.237l);}
3736: int notinsubject_f_L_overprec_might_be_undefbehav_32(void){return test("%.32Lf", 0.237l);}
3737: int notinsubject_f_L_overprec_might_be_undefbehav_4(void){return test("%.4Lf", 0.237l);}
3738: int notinsubject_f_L_overprec_might_be_undefbehav_1000(void){return test("%.4Lf", -0.106577568068517810765107851705167l);}
3739: int notinsubject_f_L_overprec_might_be_undefbehav_10_from_0(void){return test("%.10Lf", 0.0l);}
3740: int notinsubject_f_L_overprec_might_be_undefbehav_2000(void){return test("%.2000Lf", 623.28376510723481l);}
3741: int notinsubject_f_L_overprec_might_be_undefbehav_dblmin(void){return test("%.2000Lf", LDBL_MIN);}
3742: int notinsubject_f_L_overprec_might_be_undefbehav_ndblmin(void){return test("%.2000Lf", -LDBL_MIN);}
3743: int notinsubject_f_L_limits_dblmax_prec0(void){return test("%.0Lf", LDBL_MAX);}
3744: int notinsubject_f_L_limits_dblmax_prec3(void){return test("%.3Lf", LDBL_MAX);}
3745: int notinsubject_f_L_limits_dblmax_precd(void){return test("%Lf", LDBL_MAX);}
3746: int notinsubject_f_L_limits_dblmax_prec8(void){return test("%.8Lf", LDBL_MAX);}
3747: int notinsubject_f_L_stress_limits_dblmax_prec12(void){return test("%.12Lf", LDBL_MAX);}
3748: int notinsubject_f_L_stress_limits_dblmax_prec16(void){return test("%.16Lf", LDBL_MAX);}
3749: int notinsubject_f_L_stress_limits_dblmax_prec18(void){return test("%.18Lf", LDBL_MAX);}
3750: int notinsubject_f_L_limits_ndblmax_prec0(void){return test("%.0Lf", -LDBL_MAX);}
3751: int notinsubject_f_L_limits_ndblmax_prec3(void){return test("%.3Lf", -LDBL_MAX);}
3752: int notinsubject_f_L_limits_ndblmax_precd(void){return test("%Lf", -LDBL_MAX);}
3753: int notinsubject_f_L_limits_ndblmax_prec8(void){return test("%.8Lf", -LDBL_MAX);}
3754: int notinsubject_f_L_stress_limits_ndblmax_prec12(void){return test("%.12Lf", -LDBL_MAX);}
3755: int notinsubject_f_L_stress_limits_ndblmax_prec16(void){return test("%.16Lf", -LDBL_MAX);}
3756: int notinsubject_f_L_stress_limits_ndblmax_prec18(void){return test("%.18Lf", -LDBL_MAX);}
3757: int notinsubject_f_L_limits_dblmin_prec0(void){return test("%.0Lf", LDBL_MIN);}
3758: int notinsubject_f_L_limits_dblmin_prec3(void){return test("%.3Lf", LDBL_MIN);}
3759: int notinsubject_f_L_limits_dblmin_precd(void){return test("%Lf", LDBL_MIN);}
3760: int notinsubject_f_L_limits_dblmin_prec8(void){return test("%.8Lf", LDBL_MIN);}
3761: int notinsubject_f_L_stress_limits_dblmin_prec12(void){return test("%.12Lf", LDBL_MIN);}
3762: int notinsubject_f_L_stress_limits_dblmin_prec16(void){return test("%.16Lf", LDBL_MIN);}
3763: int notinsubject_f_L_stress_limits_dblmin_prec18(void){return test("%.18Lf", LDBL_MIN);}
3764: int notinsubject_f_L_limits_ndblmin_prec0(void){return test("%.0Lf", -LDBL_MIN);}
3765: int notinsubject_f_L_limits_ndblmin_prec3(void){return test("%.3Lf", -LDBL_MIN);}
3766: int notinsubject_f_L_limits_ndblmin_precd(void){return test("%Lf", -LDBL_MIN);}
3767: int notinsubject_f_L_limits_ndblmin_prec8(void){return test("%.8Lf", -LDBL_MIN);}
3768: int notinsubject_f_L_stress_limits_ndblmin_prec12(void){return test("%.12Lf", -LDBL_MIN);}
3769: int notinsubject_f_L_stress_limits_ndblmin_prec16(void){return test("%.16Lf", -LDBL_MIN);}
3770: int notinsubject_f_L_stress_limits_ndblmin_prec18(void){return test("%.18Lf", -LDBL_MIN);}
3771: int notinsubject_moul_a_1(void){return test("%a", (double)42);}
3772: int notinsubject_moul_a_2(void){return test("Kashim a %a histoires à raconter", (double)1001);}
3773: int notinsubject_moul_a_3(void){return test("Il fait au moins %a\n", (double)-8000);}
3774: int notinsubject_moul_a_4(void){return test("%a", (double)-0);}
3775: int notinsubject_moul_a_5(void){return test("%a", (double)0);}
3776: int notinsubject_moul_a_6(void){return test("%a", (double)INT_MAX);}
3777: int notinsubject_moul_a_7(void){return test("%a", (double)INT_MIN);}
3778: int notinsubject_moul_a_8(void){return test("%a", (double)INT_MIN - 1);}
3779: int notinsubject_moul_a_9(void){return test("%a", (double)INT_MAX + 1);}
3780: int notinsubject_moul_a_11(void){return test("%%a 0000042 == |%a|\n", (double)0000042);}
3781: int notinsubject_moul_a_12(void){return test("%%a \t == |%a|\n", (double)'\t');}
3782: int notinsubject_moul_a_13(void){return test("%%a Lydie == |%a|\n", (double)'L'+'y'+'d'+'i'+'e');}
3783: int notinsubject_moul_a_14(void){return test("%%a 42.42 == |%a|\n", 42.42);}
3784: int notinsubject_moul_a_15(void){return test("%A", (double)42);}
3785: int notinsubject_moul_a_16(void){return test("Kashim a %A histoires à raconter", (double)1001);}
3786: int notinsubject_moul_a_17(void){return test("Il fait au moins %A\n", (double)-8000);}
3787: int notinsubject_moul_a_18(void){return test("%A", (double)-0);}
3788: int notinsubject_moul_a_19(void){return test("%A", (double)0);}
3789: int notinsubject_moul_a_20(void){return test("%A", (double)INT_MAX);}
3790: int notinsubject_moul_a_21(void){return test("%A", (double)INT_MIN);}
3791: int notinsubject_moul_a_22(void){return test("%A", (double)INT_MIN - 1);}
3792: int notinsubject_moul_a_23(void){return test("%A", (double)INT_MAX + 1);}
3793: int notinsubject_moul_a_24(void){return test("%%A 0000042 == |%A|\n", (double)0000042);}
3794: int notinsubject_moul_a_25(void){return test("%%A \t == |%A|\n", (double)'\t');}
3795: int notinsubject_moul_a_26(void){return test("%%A Lydie == |%A|\n", (double)'L'+'y'+'d'+'i'+'e');}
3796: int notinsubject_moul_a_27(void){return test("%%A 42.42 == |%A|\n", 42.42);}
3797: int notinsubject_moul_a_28(void){return test("%%A 42.42 == |%.2A|\n", 42.42);}
3798: int notinsubject_o_basic_octl_pos(void){return test("this %o number", 17);}
3799: int notinsubject_o_basic_octl_zero(void){return test("this %o number", 0);}
3800: int notinsubject_o_basic_octl_onlypos(void){return test("%o", 3);}
3801: int notinsubject_o_octlmax(void){return test("%o", 4294967295u);}
3802: int notinsubject_o_width_pos_fits(void){return test("%7o", 33);}
3803: int notinsubject_o_width_zero_fits(void){return test("%3o", 0);}
3804: int notinsubject_o_width_pos_exactfit(void){return test("%6o", 52625);}
3805: int notinsubject_o_width_pos_nofit(void){return test("%2o", 94827);}
3806: int notinsubject_o_width_pos_fits_lj(void){return test("%-7o", 33);}
3807: int notinsubject_o_width_zero_fits_lj(void){return test("%-3o", 0);}
3808: int notinsubject_o_width_pos_exactfit_lj(void){return test("%-6o", 52625);}
3809: int notinsubject_o_width_pos_nofit_lj(void){return test("%-4o", 9648627);}
3810: int notinsubject_o_prec_fits_pos(void){return test("%.5o", 21);}
3811: int notinsubject_o_prec_fits_zero(void){return test("%.3o", 0);}
3812: int notinsubject_o_prec_exactfit_pos(void){return test("%.5o", 5263);}
3813: int notinsubject_o_prec_nofit_pos(void){return test("%.3o", 938862);}
3814: int notinsubject_o_zp_pos_fits(void){return test("%05o", 43);}
3815: int notinsubject_o_zp_zero_fits(void){return test("%03o", 0);}
3816: int notinsubject_o_zp_pos_exactfit(void){return test("%07o", 698334);}
3817: int notinsubject_o_prec_width_fit_fit_pos(void){return test("%8.5o", 34);}
3818: int notinsubject_o_prec_width_fit_fit_zero(void){return test("%8.5o", 0);}
3819: int notinsubject_o_prec_width_nofit_fit_pos(void){return test("%8.3o", 8375);}
3820: int notinsubject_o_prec_width_fit_nofit_pos(void){return test("%2.7o", 3267);}
3821: int notinsubject_o_prec_width_nofit_nofit_pos(void){return test("%3.3o", 6983);}
3822: int notinsubject_o_prec_width_fit_fit_pos_lj(void){return test("%-8.5o", 34);}
3823: int notinsubject_o_prec_width_fit_fit_zero_lj(void){return test("%-8.5o", 0);}
3824: int notinsubject_o_prec_width_nofit_fit_pos_lj(void){return test("%-8.3o", 8375);}
3825: int notinsubject_o_prec_width_fit_nofit_pos_lj(void){return test("%-2.7o", 3267);}
3826: int notinsubject_o_prec_width_nofit_nofit_pos_lj(void){return test("%-3.3o", 6983);}
3827: int notinsubject_o_prec_width_ff_pos_zp(void){return test("%08.5o", 34);}
3828: int notinsubject_o_prec_width_ff_zero_zp(void){return test("%08.5o", 0);}
3829: int notinsubject_o_prec_width_nf_pos_zp(void){return test("%08.3o", 8375);}
3830: int notinsubject_o_prec_width_fn_pos_zp(void){return test("%02.7o", 3267);}
3831: int notinsubject_o_prec_width_nn_pos_zp(void){return test("%03.3o", 6983);}
3832: int notinsubject_o_prec_width_ff_pos_ljzp_ignoreflag(void){return test("%0-8.5o", 34);}
3833: int notinsubject_o_prec_width_ff_zero_ljzp_ignoreflag(void){return test("%0-8.5o", 0);}
3834: int notinsubject_o_prec_width_nf_pos_ljzp_ignoreflag(void){return test("%0-8.3o", 8375);}
3835: int notinsubject_o_prec_width_fn_pos_ljzp_ignoreflag(void){return test("%0-2.7o", 3267);}
3836: int notinsubject_o_prec_width_nn_pos_ljzp_ignoreflag(void){return test("%0-3.3o", 6983);}
3837: int notinsubject_o_hh_pos_casted(void){return test("%hho", (unsigned char)45);}
3838: int notinsubject_o_h_pos_casted(void){return test("%ho", (unsigned short)385);}
3839: int notinsubject_o_l_pos_casted(void){return test("%lo", (unsigned long)32);}
3840: int notinsubject_o_ll_pos_casted(void){return test("%llo", (long long)43);}
3841: int notinsubject_o_hh_pos_ref(void){return test("%hho", uch_pos_1);}
3842: int notinsubject_o_h_pos_ref(void){return test("%ho", ush_pos_1);}
3843: int notinsubject_o_l_pos_ref(void){return test("%lo", ul_pos_1);}
3844: int notinsubject_o_ll_pos_ref(void){return test("%llo", ull_pos_1);}
3845: int notinsubject_o_l_pos_big(void){return test("%lo", 22337203685477ul);}
3846: int notinsubject_o_ll_pos_big(void){return test("%llo", 522337203685470ull);}
3847: int notinsubject_o_ullmax(void){return test("%llo", ullmax);}
3848: int notinsubject_o_ulmax(void){return test("%lo", ulmax);}
3849: int notinsubject_o_uhmax(void){return test("%ho", (unsigned short)65535);}
3850: int notinsubject_o_uhhmax(void){return test("%hho", (unsigned char)255);}
3851: int notinsubject_o_l_pos_big_zp(void){return test("%037lo", 22337203685477ul);}
3852: int notinsubject_o_ll_pos_big_width(void){return test("%37llo", 522337203685470ull);}
3853: int notinsubject_o_ll_hh_ll(void){return test("%llu%hhu%llo", ull_pos_1, uch_pos_1, ull_pos_1);}
3854: int notinsubject_o_h_l_hh(void){return test("%hu%lu%hho", ush_pos_1, ul_pos_1, uch_pos_1);}
3855: int notinsubject_o_l_hh_h(void){return test("%lu%hhu%ho", ul_pos_1, uch_pos_1, ush_pos_1);}
3856: int notinsubject_o_n_ll_hh(void){return test("%u%llu%hho", ui_pos_1, ull_pos_1, uch_pos_1);}
3857: int notinsubject_o_ll_n_l(void){return test("%llu%u%lo", ull_pos_1, ui_pos_1, ul_pos_1);}
3858: int notinsubject_o_basic_octl_pos_af(void){return test("this %#o number", 17);}
3859: int notinsubject_o_basic_octl_zero_af(void){return test("this %#o number", 0);}
3860: int notinsubject_o_basic_octl_onlypos_af(void){return test("%#o", 3);}
3861: int notinsubject_o_octlmax_af(void){return test("%#o", 4294967295u);}
3862: int notinsubject_o_width_pos_fits_af(void){return test("%#7o", 33);}
3863: int notinsubject_o_width_zero_fits_af(void){return test("%#3o", 0);}
3864: int notinsubject_o_width_pos_exactfit_af(void){return test("%#6o", 52625);}
3865: int notinsubject_o_width_pos_nofit_af(void){return test("%#2o", 94827);}
3866: int notinsubject_o_width_pos_fits_lj_af(void){return test("%#-7o", 33);}
3867: int notinsubject_o_width_zero_fits_lj_af(void){return test("%#-3o", 0);}
3868: int notinsubject_o_width_pos_exactfit_lj_af(void){return test("%#-6o", 52625);}
3869: int notinsubject_o_width_pos_nofit_lj_af(void){return test("%#-4o", 9648627);}
3870: int notinsubject_o_prec_fits_pos_af(void){return test("%#.5o", 21);}
3871: int notinsubject_o_prec_fits_zero_af(void){return test("%#.3o", 0);}
3872: int notinsubject_o_prec_exactfit_pos_af(void){return test("%#.5o", 5263);}
3873: int notinsubject_o_prec_nofit_pos_af(void){return test("%#.3o", 938862);}
3874: int notinsubject_o_zp_pos_fits_af(void){return test("%#05o", 43);}
3875: int notinsubject_o_zp_zero_fits_af(void){return test("%#03o", 0);}
3876: int notinsubject_o_zp_pos_exactfit_af(void){return test("%#07o", 698334);}
3877: int notinsubject_o_prec_width_fit_fit_pos_af(void){return test("%#8.5o", 34);}
3878: int notinsubject_o_prec_width_fit_fit_zero_af(void){return test("%#8.5o", 0);}
3879: int notinsubject_o_prec_width_nofit_fit_pos_af(void){return test("%#8.3o", 8375);}
3880: int notinsubject_o_prec_width_fit_nofit_pos_af(void){return test("%#2.7o", 3267);}
3881: int notinsubject_o_prec_width_nofit_nofit_pos_af(void){return test("%#3.3o", 6983);}
3882: int notinsubject_o_prec_width_fit_fit_pos_lj_af(void){return test("%#-8.5o", 34);}
3883: int notinsubject_o_prec_width_fit_fit_zero_lj_af(void){return test("%#-8.5o", 0);}
3884: int notinsubject_o_prec_width_nofit_fit_pos_lj_af(void){return test("%#-8.3o", 8375);}
3885: int notinsubject_o_prec_width_fit_nofit_pos_lj_af(void){return test("%#-2.7o", 3267);}
3886: int notinsubject_o_prec_width_nofit_nofit_pos_lj_af(void){return test("%#-3.3o", 6983);}
3887: int notinsubject_o_prec_width_ff_pos_zp_af(void){return test("%#08.5o", 34);}
3888: int notinsubject_o_prec_width_ff_zero_zp_af(void){return test("%#08.5o", 0);}
3889: int notinsubject_o_prec_width_nf_pos_zp_af(void){return test("%#08.3o", 8375);}
3890: int notinsubject_o_prec_width_fn_pos_zp_af(void){return test("%#02.7o", 3267);}
3891: int notinsubject_o_prec_width_nn_pos_zp_af(void){return test("%#03.3o", 6983);}
3892: int notinsubject_o_prec_width_ff_pos_ljzpaf_ignoreflag(void){return test("%#0-8.5o", 34);}
3893: int notinsubject_o_prec_width_ff_zero_ljzpaf_ignoreflag(void){return test("%#0-8.5o", 0);}
3894: int notinsubject_o_prec_width_nf_pos_ljzpaf_ignoreflag(void){return test("%#0-8.3o", 8375);}
3895: int notinsubject_o_prec_width_fn_pos_ljzpaf_ignoreflag(void){return test("%#0-2.7o", 3267);}
3896: int notinsubject_o_prec_width_nn_pos_ljzpaf_ignoreflag(void){return test("%#0-3.3o", 6983);}
3897: int notinsubject_o_hh_pos_casted_af(void){return test("%#hho", (unsigned char)45);}
3898: int notinsubject_o_h_pos_casted_af(void){return test("%#ho", (unsigned short)385);}
3899: int notinsubject_o_l_pos_casted_af(void){return test("%#lo", (unsigned long)32);}
3900: int notinsubject_o_ll_pos_casted_af(void){return test("%#llo", (long long)43);}
3901: int notinsubject_o_hh_pos_ref_af(void){return test("%#hho", uch_pos_1);}
3902: int notinsubject_o_h_pos_ref_af(void){return test("%#ho", ush_pos_1);}
3903: int notinsubject_o_l_pos_ref_af(void){return test("%#lo", ul_pos_1);}
3904: int notinsubject_o_ll_pos_ref_af(void){return test("%#llo", ull_pos_1);}
3905: int notinsubject_o_l_pos_big_af(void){return test("%#lo", 22337203685477ul);}
3906: int notinsubject_o_ll_pos_big_af(void){return test("%#llo", 522337203685470ull);}
3907: int notinsubject_o_ullmax_af(void){return test("%#llo", ullmax);}
3908: int notinsubject_o_ulmax_af(void){return test("%#lo", ulmax);}
3909: int notinsubject_o_uhmax_af(void){return test("%#ho", (unsigned short)65535);}
3910: int notinsubject_o_uhhmax_af(void){return test("%#hho", (unsigned char)255);}
3911: int notinsubject_o_l_pos_big_zp_af(void){return test("%#037lo", 22337203685477ul);}
3912: int notinsubject_o_ll_pos_big_width_af(void){return test("%#37llo", 522337203685470ull);}
3913: int notinsubject_o_ll_hh_ll_af(void){return test("%llu%hhu%#llo", ull_pos_1, uch_pos_1, ull_pos_1);}
3914: int notinsubject_o_h_l_hh_af(void){return test("%hu%lu%#hho", ush_pos_1, ul_pos_1, uch_pos_1);}
3915: int notinsubject_o_l_hh_h_af(void){return test("%#lo%hhu%#ho", ul_pos_1, uch_pos_1, ush_pos_1);}
3916: int notinsubject_o_n_ll_hh_af(void){return test("%#o%llu%hho", ui_pos_1, ull_pos_1, uch_pos_1);}
3917: int notinsubject_o_ll_n_l_af(void){return test("%#llo%u%#lo", ull_pos_1, ui_pos_1, ul_pos_1);}
3918: int notinsubject_o_prec0val0_basic(void){return test("%.0o", 0);}
3919: int notinsubject_o_prec0val0_implicit(void){return test("%.o", 0);}
3920: int notinsubject_o_prec0val0_w(void){return test("%5.0o", 0);}
3921: int notinsubject_o_prec0val0_w_impl(void){return test("%5.o", 0);}
3922: int notinsubject_o_prec0val0_wlj(void){return test("%-5.0o", 0);}
3923: int notinsubject_o_prec0val0_wlj_impl(void){return test("%-5.o", 0);}
3924: int notinsubject_o_prec0val0_af(void){return test("%#.0o", 0);}
3925: int notinsubject_o_prec0val0_af_impl(void){return test("%#.o", 0);}
3926: int notinsubject_o_prec0val0_waf(void){return test("%#5.0o", 0);}
3927: int notinsubject_o_prec0val0_waf_impl(void){return test("%#5.o", 0);}
3928: int notinsubject_o_prec0val0_waflj(void){return test("%#-5.0o", 0);}
3929: int notinsubject_o_prec0val0_waflj_impl(void){return test("%#-5.o", 0);}
3930: int nocrash_notinsubject_notrequired_o_sp(void){return test("% o", 42);}
3931: int nocrash_notinsubject_notrequired_o_hhh(void){return test("%hhho", 42);}
3932: int nocrash_notinsubject_notrequired_o_hhhh(void){return test("%hhhho", 42);}
3933: int nocrash_notinsubject_notrequired_o_hhl(void){return test("%hhlo", 42);}
3934: int nocrash_notinsubject_notrequired_o_hhll(void){return test("%hhllo", 42);}
3935: int nocrash_notinsubject_notrequired_o_llh(void){return test("%llho", 42);}
3936: int nocrash_notinsubject_notrequired_o_lll(void){return test("%lllo", 42);}
3937: int nocrash_notinsubject_notrequired_o_lj_nowidth(void){return test("%-o", 42);}
3938: int nocrash_notinsubject_notrequired_o_as(void){return test("%+o", 42);}
3939: int notinsubject_moul_o_1(void){return test("%o", 42);}
3940: int notinsubject_moul_o_2(void){return test("Kashim a %o histoires à raconter", 1001);}
3941: int notinsubject_moul_o_3(void){return test("Il fait au moins %o\n", -8000);}
3942: int notinsubject_moul_o_4(void){return test("%o", -0);}
3943: int notinsubject_moul_o_5(void){return test("%o", 0);}
3944: int notinsubject_moul_o_6(void){return test("%o", INT_MAX);}
3945: int notinsubject_moul_o_7(void){return test("%o", INT_MIN);}
3946: int notinsubject_moul_o_8(void){return test("%o", INT_MIN - 1);}
3947: int notinsubject_moul_o_9(void){return test("%o", INT_MAX + 1);}
3948: int notinsubject_moul_o_10(void){return test("%%o 0000042 == |%o|\n", 0000042);}
3949: int notinsubject_moul_o_11(void){return test("%%o \t == |%o|\n", '\t');}
3950: int notinsubject_moul_o_12(void){return test("%%o Lydie == |%o|\n", 'L'+'y'+'d'+'i'+'e');}
3951: int notinsubject_moul_o_hash_3(void){return test("%%#o 0 ==  %#o\n", 0);}
3952: int notinsubject_moul_o_hash_4(void){return test("%%o 0 ==  %o\n", 0);}
3953: int notinsubject_moul_o_hash_5(void){return test("%%#o INT_MAX ==  %#o\n", INT_MAX);}
3954: int notinsubject_moul_o_hash_6(void){return test("%%o INT_MAX ==  %o\n", INT_MAX);}
3955: int notinsubject_moul_o_hash_7(void){return test("%%#o INT_MIN ==  %#o\n", INT_MIN);}
3956: int notinsubject_moul_o_hash_8(void){return test("%%o INT_MIN ==  %o\n", INT_MIN);}
3957: int notinsubject_moul_G_1(void){return test("%G", (double)42);}
3958: int notinsubject_moul_G_2(void){return test("Kashim a %G histoires à raconter", (double)1001);}
3959: int notinsubject_moul_G_3(void){return test("Il fait au moins %G\n", (double)-8000);}
3960: int notinsubject_moul_G_4(void){return test("%G", (double)-0);}
3961: int notinsubject_moul_G_5(void){return test("%G", (double)0);}
3962: int notinsubject_moul_G_6(void){return test("%G", (double)INT_MAX);}
3963: int notinsubject_moul_G_7(void){return test("%G", (double)INT_MIN);}
3964: int notinsubject_moul_G_8(void){return test("%G", (double)INT_MIN - 1);}
3965: int notinsubject_moul_G_9(void){return test("%G", (double)INT_MAX + 1);}
3966: int notinsubject_moul_G_10(void){return test("%%G 0000042 == |%G|\n", (double)0000042);}
3967: int notinsubject_moul_G_11(void){return test("%%G \t == |%G|\n", (double)'\t');}
3968: int notinsubject_moul_G_12(void){return test("%%G Lydie == |%G|\n", (double)'L'+'y'+'d'+'i'+'e');}
3969: int notinsubject_moul_G_13(void){return test("%%G 42.42 == |%G|\n", 42.42);}
3970: int notinsubject_moul_G_14(void){return test("%%G 42.42 == |%.2G|\n", 42.42);}
3971: int notinsubject_moul_e_14(void){return test("%E", (double)42);}
3972: int notinsubject_moul_e_15(void){return test("Kashim a %E histoires à raconter", (double)1001);}
3973: int notinsubject_moul_e_16(void){return test("Il fait au moins %E\n", (double)-8000);}
3974: int notinsubject_moul_e_17(void){return test("%E", (double)-0);}
3975: int notinsubject_moul_e_18(void){return test("%E", (double)0);}
3976: int notinsubject_moul_e_19(void){return test("%E", (double)INT_MAX);}
3977: int notinsubject_moul_e_20(void){return test("%E", (double)INT_MIN);}
3978: int notinsubject_moul_e_21(void){return test("%E", (double)INT_MIN - 1);}
3979: int notinsubject_moul_e_22(void){return test("%E", (double)INT_MAX + 1);}
3980: int notinsubject_moul_e_23(void){return test("%%E 0000042 == |%E|\n", (double)0000042);}
3981: int notinsubject_moul_e_24(void){return test("%%E \t == |%E|\n", (double)'\t');}
3982: int notinsubject_moul_e_25(void){return test("%%E Lydie == |%E|\n", (double)'L'+'y'+'d'+'i'+'e');}
3983: int notinsubject_moul_e_26(void){return test("%%E 42.42 == |%E|\n", 42.42);}
3984: int notinsubject_moul_e_27(void){return test("%%E 42.42 == |%.2E|\n", 42.42);}
3985: int notinsubject_moul_widechar_mix2_throwswarning(void){return test("Lalalala, %d%% des gens qui parlent %C Ly adorent %s. Ou Presque. %d, %u, %X, %c", 100, L'à', "Ly", 2, 10, 10000, '\n', "ôHohoho");}
3986: int notinsubject_moul_widechar_basic1(void){wchar_t c = L'\x82'; return test("%C\n", c);}
3987: int notinsubject_moul_widechar_basic2(void){return test("%C\n", L'ø');}
3988: int notinsubject_moul_widestr_basic2(void){wchar_t wz[3] = L"@@"; return test("%ls", wz);}
3989: int notinsubject_moul_D_1_notmandatory(void){return test("%D", 42);}
3990: int notinsubject_moul_D_2_notmandatory(void){return test("Kashim a %D histoires à raconter", 1001);}
3991: int notinsubject_moul_D_3_notmandatory(void){return test("Il fait au moins %D\n", -8000);}
3992: int notinsubject_moul_D_4_notmandatory(void){return test("%D", -0);}
3993: int notinsubject_moul_D_5_notmandatory(void){return test("%D", 0);}
3994: int notinsubject_moul_D_6_notmandatory(void){return test("%D", INT_MAX);}
3995: int notinsubject_moul_D_7_notmandatory(void){return test("%D", INT_MIN);}
3996: int notinsubject_moul_D_8_notmandatory(void){return test("%D", INT_MIN - 1);}
3997: int notinsubject_moul_D_9_notmandatory(void){return test("%D", INT_MAX + 1);}
3998: int notinsubject_moul_D_10_notmandatory(void){return test("%%D 0000042 == |%D|\n", 0000042);}
3999: int notinsubject_moul_D_11_notmandatory(void){return test("%%D \t == |%D|\n", '\t');}
4000: int notinsubject_moul_D_12_notmandatory(void){return test("%%D Lydie == |%D|\n", 'L'+'y'+'d'+'i'+'e');}
4001: int bonus_f_rnd_half_to_even_01(void){return test("%.0f", -5.5);}
4002: int bonus_f_rnd_half_to_even_02(void){return test("%.0f", -4.5);}
4003: int bonus_f_rnd_half_to_even_03(void){return test("%.0f", -3.5);}
4004: int bonus_f_rnd_half_to_even_04(void){return test("%.0f", -2.5);}
4005: int bonus_f_rnd_half_to_even_05(void){return test("%.0f", -1.5);}
4006: int bonus_f_rnd_half_to_even_06(void){return test("%.0f", -0.5);}
4007: int bonus_f_rnd_half_to_even_07(void){return test("%.0f", 0.5);}
4008: int bonus_f_rnd_half_to_even_08(void){return test("%.0f", 1.5);}
4009: int bonus_f_rnd_half_to_even_09(void){return test("%.0f", 2.5);}
4010: int bonus_f_rnd_half_to_even_10(void){return test("%.0f", 3.5);}
4011: int bonus_f_rnd_half_to_even_11(void){return test("%.0f", 4.5);}
4012: int bonus_f_rnd_half_to_even_12(void){return test("%.0f", 5.5);}
4013: int bonus_f_rnd_half_to_even_13(void){return test("%.3f", -1.2305);}
4014: int bonus_f_rnd_half_to_even_14(void){return test("%.3f", -1.2315);}
4015: int bonus_f_rnd_half_to_even_15(void){return test("%.3f", -1.2325);}
4016: int bonus_f_rnd_half_to_even_16(void){return test("%.3f", -1.2335);}
4017: int bonus_f_rnd_half_to_even_17(void){return test("%.3f", -1.2345);}
4018: int bonus_f_rnd_half_to_even_18(void){return test("%.3f", -1.2355);}
4019: int bonus_f_rnd_half_to_even_19(void){return test("%.3f", -1.2365);}
4020: int bonus_f_rnd_half_to_even_20(void){return test("%.3f", -1.2375);}
4021: int bonus_f_rnd_half_to_even_21(void){return test("%.3f", -1.2385);}
4022: int bonus_f_rnd_half_to_even_22(void){return test("%.3f", -1.2395);}
4023: int bonus_f_rnd_half_to_even_24(void){return test("%.3f", 1.2305);}
4024: int bonus_f_rnd_half_to_even_25(void){return test("%.3f", 1.2315);}
4025: int bonus_f_rnd_half_to_even_26(void){return test("%.3f", 1.2325);}
4026: int bonus_f_rnd_half_to_even_27(void){return test("%.3f", 1.2335);}
4027: int bonus_f_rnd_half_to_even_28(void){return test("%.3f", 1.2345);}
4028: int bonus_f_rnd_half_to_even_29(void){return test("%.3f", 1.2355);}
4029: int bonus_f_rnd_half_to_even_30(void){return test("%.3f", 1.2365);}
4030: int bonus_f_rnd_half_to_even_31(void){return test("%.3f", 1.2375);}
4031: int bonus_f_rnd_half_to_even_32(void){return test("%.3f", 1.2385);}
4032: int bonus_f_rnd_half_to_even_33(void){return test("%.3f", 1.2395);}
4033: int bonus_e_rnd_half_to_even_01(void){return test("%.0e", -5.5);}
4034: int bonus_e_rnd_half_to_even_02(void){return test("%.0e", -4.5);}
4035: int bonus_e_rnd_half_to_even_03(void){return test("%.0e", -3.5);}
4036: int bonus_e_rnd_half_to_even_04(void){return test("%.0e", -2.5);}
4037: int bonus_e_rnd_half_to_even_05(void){return test("%.0e", -1.5);}
4038: int bonus_e_rnd_half_to_even_06(void){return test("%.0e", -0.5);}
4039: int bonus_e_rnd_half_to_even_07(void){return test("%.0e", 0.5);}
4040: int bonus_e_rnd_half_to_even_08(void){return test("%.0e", 1.5);}
4041: int bonus_e_rnd_half_to_even_09(void){return test("%.0e", 2.5);}
4042: int bonus_e_rnd_half_to_even_10(void){return test("%.0e", 3.5);}
4043: int bonus_e_rnd_half_to_even_11(void){return test("%.0e", 4.5);}
4044: int bonus_e_rnd_half_to_even_12(void){return test("%.0e", 5.5);}
4045: int bonus_e_rnd_half_to_even_13(void){return test("%.3e", -1.2305);}
4046: int bonus_e_rnd_half_to_even_14(void){return test("%.3e", -1.2315);}
4047: int bonus_e_rnd_half_to_even_15(void){return test("%.3e", -1.2325);}
4048: int bonus_e_rnd_half_to_even_16(void){return test("%.3e", -1.2335);}
4049: int bonus_e_rnd_half_to_even_17(void){return test("%.3e", -1.2345);}
4050: int bonus_e_rnd_half_to_even_18(void){return test("%.3e", -1.2355);}
4051: int bonus_e_rnd_half_to_even_19(void){return test("%.3e", -1.2365);}
4052: int bonus_e_rnd_half_to_even_20(void){return test("%.3e", -1.2375);}
4053: int bonus_e_rnd_half_to_even_21(void){return test("%.3e", -1.2385);}
4054: int bonus_e_rnd_half_to_even_22(void){return test("%.3e", -1.2395);}
4055: int bonus_e_rnd_half_to_even_24(void){return test("%.3e", 1.2305);}
4056: int bonus_e_rnd_half_to_even_25(void){return test("%.3e", 1.2315);}
4057: int bonus_e_rnd_half_to_even_26(void){return test("%.3e", 1.2325);}
4058: int bonus_e_rnd_half_to_even_27(void){return test("%.3e", 1.2335);}
4059: int bonus_e_rnd_half_to_even_28(void){return test("%.3e", 1.2345);}
4060: int bonus_e_rnd_half_to_even_29(void){return test("%.3e", 1.2355);}
4061: int bonus_e_rnd_half_to_even_30(void){return test("%.3e", 1.2365);}
4062: int bonus_e_rnd_half_to_even_31(void){return test("%.3e", 1.2375);}
4063: int bonus_e_rnd_half_to_even_32(void){return test("%.3e", 1.2385);}
4064: int bonus_e_rnd_half_to_even_33(void){return test("%.3e", 1.2395);}
4065: int bonus_g_rnd_half_to_even_01(void){return test("%.0g", -5.5);}
4066: int bonus_g_rnd_half_to_even_02(void){return test("%.0g", -4.5);}
4067: int bonus_g_rnd_half_to_even_03(void){return test("%.0g", -3.5);}
4068: int bonus_g_rnd_half_to_even_04(void){return test("%.0g", -2.5);}
4069: int bonus_g_rnd_half_to_even_05(void){return test("%.0g", -1.5);}
4070: int bonus_g_rnd_half_to_even_06(void){return test("%.0g", -0.5);}
4071: int bonus_g_rnd_half_to_even_07(void){return test("%.0g", 0.5);}
4072: int bonus_g_rnd_half_to_even_08(void){return test("%.0g", 1.5);}
4073: int bonus_g_rnd_half_to_even_09(void){return test("%.0g", 2.5);}
4074: int bonus_g_rnd_half_to_even_10(void){return test("%.0g", 3.5);}
4075: int bonus_g_rnd_half_to_even_11(void){return test("%.0g", 4.5);}
4076: int bonus_g_rnd_half_to_even_12(void){return test("%.0g", 5.5);}
4077: int bonus_g_rnd_half_to_even_13(void){return test("%.3g", -1.2305);}
4078: int bonus_g_rnd_half_to_even_14(void){return test("%.3g", -1.2315);}
4079: int bonus_g_rnd_half_to_even_15(void){return test("%.3g", -1.2325);}
4080: int bonus_g_rnd_half_to_even_16(void){return test("%.3g", -1.2335);}
4081: int bonus_g_rnd_half_to_even_17(void){return test("%.3g", -1.2345);}
4082: int bonus_g_rnd_half_to_even_18(void){return test("%.3g", -1.2355);}
4083: int bonus_g_rnd_half_to_even_19(void){return test("%.3g", -1.2365);}
4084: int bonus_g_rnd_half_to_even_20(void){return test("%.3g", -1.2375);}
4085: int bonus_g_rnd_half_to_even_21(void){return test("%.3g", -1.2385);}
4086: int bonus_g_rnd_half_to_even_22(void){return test("%.3g", -1.2395);}
4087: int bonus_g_rnd_half_to_even_24(void){return test("%.3g", 1.2305);}
4088: int bonus_g_rnd_half_to_even_25(void){return test("%.3g", 1.2315);}
4089: int bonus_g_rnd_half_to_even_26(void){return test("%.3g", 1.2325);}
4090: int bonus_g_rnd_half_to_even_27(void){return test("%.3g", 1.2335);}
4091: int bonus_g_rnd_half_to_even_28(void){return test("%.3g", 1.2345);}
4092: int bonus_g_rnd_half_to_even_29(void){return test("%.3g", 1.2355);}
4093: int bonus_g_rnd_half_to_even_30(void){return test("%.3g", 1.2365);}
4094: int bonus_g_rnd_half_to_even_31(void){return test("%.3g", 1.2375);}
4095: int bonus_g_rnd_half_to_even_32(void){return test("%.3g", 1.2385);}
4096: int bonus_g_rnd_half_to_even_33(void){return test("%.3g", 1.2395);}
4097: int bonus_g_rnd_half_to_even_34(void){return test("%.4g", -1.2305);}
4098: int bonus_g_rnd_half_to_even_35(void){return test("%.4g", -1.2315);}
4099: int bonus_g_rnd_half_to_even_36(void){return test("%.4g", -1.2325);}
4100: int bonus_g_rnd_half_to_even_37(void){return test("%.4g", -1.2335);}
4101: int bonus_g_rnd_half_to_even_38(void){return test("%.4g", -1.2345);}
4102: int bonus_g_rnd_half_to_even_39(void){return test("%.4g", -1.2355);}
4103: int bonus_g_rnd_half_to_even_40(void){return test("%.4g", -1.2365);}
4104: int bonus_g_rnd_half_to_even_41(void){return test("%.4g", -1.2375);}
4105: int bonus_g_rnd_half_to_even_42(void){return test("%.4g", -1.2385);}
4106: int bonus_g_rnd_half_to_even_43(void){return test("%.4g", -1.2395);}
4107: int bonus_g_rnd_half_to_even_44(void){return test("%.4g", 1.2305);}
4108: int bonus_g_rnd_half_to_even_45(void){return test("%.4g", 1.2315);}
4109: int bonus_g_rnd_half_to_even_46(void){return test("%.4g", 1.2325);}
4110: int bonus_g_rnd_half_to_even_47(void){return test("%.4g", 1.2335);}
4111: int bonus_g_rnd_half_to_even_48(void){return test("%.4g", 1.2345);}
4112: int bonus_g_rnd_half_to_even_49(void){return test("%.4g", 1.2355);}
4113: int bonus_g_rnd_half_to_even_50(void){return test("%.4g", 1.2365);}
4114: int bonus_g_rnd_half_to_even_51(void){return test("%.4g", 1.2375);}
4115: int bonus_g_rnd_half_to_even_52(void){return test("%.4g", 1.2385);}
4116: int bonus_g_rnd_half_to_even_53(void){return test("%.4g", 1.2395);}
4117: int bonus_f_rnd_9999_01(void){return test("%.0f", -9.0);}
4118: int bonus_f_rnd_9999_02(void){return test("%.1f", -9.0);}
4119: int bonus_f_rnd_9999_03(void){return test("%.0f", -9.9);}
4120: int bonus_f_rnd_9999_04(void){return test("%.1f", -9.9);}
4121: int bonus_f_rnd_9999_05(void){return test("%.0f", -9.999);}
4122: int bonus_f_rnd_9999_06(void){return test("%.1f", -9.999);}
4123: int bonus_f_rnd_9999_07(void){return test("%.0f", -0.999);}
4124: int bonus_f_rnd_9999_08(void){return test("%.1f", -0.999);}
4125: int bonus_f_rnd_9999_09(void){return test("%.0f", -0.099);}
4126: int bonus_f_rnd_9999_10(void){return test("%.1f", -0.099);}
4127: int bonus_f_rnd_9999_11(void){return test("%.0f", -9.0);}
4128: int bonus_f_rnd_9999_12(void){return test("%.1f", -9.0);}
4129: int bonus_f_rnd_9999_13(void){return test("%.0f", -9.9);}
4130: int bonus_f_rnd_9999_14(void){return test("%.1f", -9.9);}
4131: int bonus_f_rnd_9999_15(void){return test("%.0f", -9.999);}
4132: int bonus_f_rnd_9999_16(void){return test("%.1f", -9.999);}
4133: int bonus_f_rnd_9999_17(void){return test("%.0f", -0.999);}
4134: int bonus_f_rnd_9999_18(void){return test("%.1f", -0.999);}
4135: int bonus_f_rnd_9999_19(void){return test("%.0f", -0.099);}
4136: int bonus_f_rnd_9999_20(void){return test("%.1f", -0.099);}
4137: int bonus_e_rnd_9999_01(void){return test("%.0e", -9.0);}
4138: int bonus_e_rnd_9999_02(void){return test("%.1e", -9.0);}
4139: int bonus_e_rnd_9999_03(void){return test("%.0e", -9.9);}
4140: int bonus_e_rnd_9999_04(void){return test("%.1e", -9.9);}
4141: int bonus_e_rnd_9999_05(void){return test("%.0e", -9.999);}
4142: int bonus_e_rnd_9999_06(void){return test("%.1e", -9.999);}
4143: int bonus_e_rnd_9999_07(void){return test("%.0e", -0.999);}
4144: int bonus_e_rnd_9999_08(void){return test("%.1e", -0.999);}
4145: int bonus_e_rnd_9999_09(void){return test("%.0e", -0.099);}
4146: int bonus_e_rnd_9999_10(void){return test("%.1e", -0.099);}
4147: int bonus_e_rnd_9999_11(void){return test("%.0e", -9.0);}
4148: int bonus_e_rnd_9999_12(void){return test("%.1e", -9.0);}
4149: int bonus_e_rnd_9999_13(void){return test("%.0e", -9.9);}
4150: int bonus_e_rnd_9999_14(void){return test("%.1e", -9.9);}
4151: int bonus_e_rnd_9999_15(void){return test("%.0e", -9.999);}
4152: int bonus_e_rnd_9999_16(void){return test("%.1e", -9.999);}
4153: int bonus_e_rnd_9999_17(void){return test("%.0e", -0.999);}
4154: int bonus_e_rnd_9999_18(void){return test("%.1e", -0.999);}
4155: int bonus_e_rnd_9999_19(void){return test("%.0e", -0.099);}
4156: int bonus_e_rnd_9999_20(void){return test("%.1e", -0.099);}
4157: int bonus_g_rnd_9999_01(void){return test("%.0g", -9.0);}
4158: int bonus_g_rnd_9999_02(void){return test("%.1g", -9.0);}
4159: int bonus_g_rnd_9999_03(void){return test("%.0g", -9.9);}
4160: int bonus_g_rnd_9999_04(void){return test("%.1g", -9.9);}
4161: int bonus_g_rnd_9999_05(void){return test("%.0g", -9.999);}
4162: int bonus_g_rnd_9999_06(void){return test("%.1g", -9.999);}
4163: int bonus_g_rnd_9999_07(void){return test("%.0g", -0.999);}
4164: int bonus_g_rnd_9999_08(void){return test("%.1g", -0.999);}
4165: int bonus_g_rnd_9999_09(void){return test("%.0g", -0.099);}
4166: int bonus_g_rnd_9999_10(void){return test("%.1g", -0.099);}
4167: int bonus_g_rnd_9999_11(void){return test("%.0g", -9.0);}
4168: int bonus_g_rnd_9999_12(void){return test("%.1g", -9.0);}
4169: int bonus_g_rnd_9999_13(void){return test("%.0g", -9.9);}
4170: int bonus_g_rnd_9999_14(void){return test("%.1g", -9.9);}
4171: int bonus_g_rnd_9999_15(void){return test("%.0g", -9.999);}
4172: int bonus_g_rnd_9999_16(void){return test("%.1g", -9.999);}
4173: int bonus_g_rnd_9999_17(void){return test("%.0g", -0.999);}
4174: int bonus_g_rnd_9999_18(void){return test("%.1g", -0.999);}
4175: int bonus_g_rnd_9999_19(void){return test("%.0g", -0.099);}
4176: int bonus_g_rnd_9999_20(void){return test("%.1g", -0.099);}
4177: int bonus_f_neg_prec_star_01(void){return test("%.*f", -3, 3.1415926535);}
4178: int bonus_f_neg_prec_star_02(void){return test("%.*f", -1, 3.1415926535);}
4179: int bonus_f_neg_prec_star_03(void){return test("%.*f", -1, 0.0);}
4180: int bonus_e_neg_prec_star_01(void){return test("%.*e", -3, 3.1415926535);}
4181: int bonus_e_neg_prec_star_02(void){return test("%.*e", -1, 3.1415926535);}
4182: int bonus_e_neg_prec_star_03(void){return test("%.*e", -1, 0.0);}
4183: int bonus_g_neg_prec_star_01(void){return test("%.*g", -3, 3.1415926535);}
4184: int bonus_g_neg_prec_star_02(void){return test("%.*g", -1, 3.1415926535);}
4185: int bonus_g_neg_prec_star_03(void){return test("%.*g", -1, 0.0);}
4207: int bonus_n_format_only(void){return test("pft%ntest", &n); (void)n;} 
4208: int bonus_n_format_only_sp(void){return test("pft% ntest", &n); (void)n;} 
4209: int bonus_n_format_only_af(void){return test("pft%#ntest", &n); (void)n;} 
4210: int bonus_n_format_only_zp(void){return test("pft%0ntest", &n); (void)n;} 
4211: int bonus_n_format_only_lj(void){return test("pft%-ntest", &n); (void)n;} 
4212: int bonus_n_format_only_as(void){return test("pft%+ntest", &n); (void)n;} 
4213: int bonus_n_format_only_w(void){return test("pft%5ntest", &n); (void)n;} 
4214: int bonus_n_format_only_prec(void){return test("pft%.5ntest", &n); (void)n;} 
4215: int bonus_n_format_only_w_prec(void){return test("pft%5.5ntest", &n); (void)n;} 
4216: int bonus_n_format_only_prec_star(void){return test("pft%.*ntest%d", 5, &n, 123); (void)n;}
4217: int bonus_n_format_only_w_star(void){return test("pft%*.ntest%d", 5, &n, 123); (void)n;}
4218: int bonus_n_format_only_wprec_star(void){return test("pft%*.*ntest%d", 5, 5, &n, 123); (void)n;}
